
pmsm_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005618  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af8  08005af8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b00  08005b00  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000006c  08005b74  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005b74  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00015857  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007e  00000000  00000000  00035936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00013ed3  00000000  00000000  000359b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002c6c  00000000  00000000  00049887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000011e0  00000000  00000000  0004c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce7a4  00000000  00000000  0004d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000dda  00000000  00000000  0011be7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000215bd  00000000  00000000  0011cc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050c0  00000000  00000000  0013e214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080057d8 	.word	0x080057d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	080057d8 	.word	0x080057d8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000518:	f000 fd1c 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	; (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	; (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f004 ff2b 	bl	800539c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000546:	f000 f85d 	bl	8000604 <main>

0800054a <LoopForever>:

LoopForever:
    b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000558:	08005b08 	.word	0x08005b08
  ldr r2, =_sbss
 800055c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000560:	2000036c 	.word	0x2000036c

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>
	...

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <MX_GPIO_Init+0x94>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <MX_GPIO_Init+0x94>)
 8000584:	f043 0310 	orr.w	r3, r3, #16
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <MX_GPIO_Init+0x94>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0310 	and.w	r3, r3, #16
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <MX_GPIO_Init+0x94>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <MX_GPIO_Init+0x94>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <MX_GPIO_Init+0x94>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_GPIO_Init+0x94>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <MX_GPIO_Init+0x94>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_GPIO_Init+0x94>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HALL_H1_Pin|HALL_H2_Pin|HALL_H3_Pin;
 80005c6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <MX_GPIO_Init+0x98>)
 80005de:	f000 fe6d 	bl	80012bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2017      	movs	r0, #23
 80005e8:	f000 fe33 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005ec:	2017      	movs	r0, #23
 80005ee:	f000 fe4a 	bl	8001286 <HAL_NVIC_EnableIRQ>

}
 80005f2:	bf00      	nop
 80005f4:	3720      	adds	r7, #32
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <main+0x54>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fd75 	bl	8005100 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fcaf 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f81f 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f7ff ffa3 	bl	8000568 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000622:	f000 f9d9 	bl	80009d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000626:	f000 fbdf 	bl	8000de8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800062a:	f000 faf1 	bl	8000c10 <MX_TIM4_Init>
  MX_TIM3_Init();
 800062e:	f000 faa1 	bl	8000b74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  pmsm_init();
 8000632:	f004 fa1b 	bl	8004a6c <pmsm_init>
  HAL_Delay( 3000 );
 8000636:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800063a:	f000 fd0d 	bl	8001058 <HAL_Delay>

  pmsm_motor_commutation( pmsm_hall_sensors_get_position() );
 800063e:	f004 fbb5 	bl	8004dac <pmsm_hall_sensors_get_position>
 8000642:	4603      	mov	r3, r0
 8000644:	4618      	mov	r0, r3
 8000646:	f004 fbc5 	bl	8004dd4 <pmsm_motor_commutation>
  pmsm_motor_set_run();
 800064a:	f004 fc67 	bl	8004f1c <pmsm_motor_set_run>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pmsm_set_PWM( 4000 );
 800064e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000652:	f004 fc6f 	bl	8004f34 <pmsm_set_PWM>
  {
 8000656:	e7fa      	b.n	800064e <main+0x4a>
 8000658:	20000068 	.word	0x20000068

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2238      	movs	r2, #56	; 0x38
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fe41 	bl	80052f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800067e:	2000      	movs	r0, #0
 8000680:	f000 ff9e 	bl	80015c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	; 0x40
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800069e:	2355      	movs	r3, #85	; 0x55
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f838 	bl	8001728 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006be:	f000 f818 	bl	80006f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fb36 	bl	8001d4c <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006e6:	f000 f804 	bl	80006f2 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f6:	b672      	cpsid	i
}
 80006f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fa:	e7fe      	b.n	80006fa <Error_Handler+0x8>

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x44>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6613      	str	r3, [r2, #96]	; 0x60
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x44>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x44>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x44>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000732:	f000 ffe9 	bl	8001708 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f06f 0201 	mvn.w	r2, #1
 8000752:	611a      	str	r2, [r3, #16]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b01      	cmp	r3, #1
 8000772:	d101      	bne.n	8000778 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000774:	2301      	movs	r3, #1
 8000776:	e000      	b.n	800077a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078a:	e7fe      	b.n	800078a <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <HardFault_Handler+0x4>

08000792 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <MemManage_Handler+0x4>

08000798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <BusFault_Handler+0x4>

0800079e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <UsageFault_Handler+0x4>

080007a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d2:	f000 fc23 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}

080007da <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(HALL_H1_Pin);
  HAL_GPIO_EXTI_IRQHandler(HALL_H2_Pin);
  HAL_GPIO_EXTI_IRQHandler(HALL_H3_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
#else
  pmsm_EXTI9_5_IRQHandler();
 80007de:	f004 f973 	bl	8004ac8 <pmsm_EXTI9_5_IRQHandler>
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80007ee:	f001 ffdc 	bl	80027aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000008c 	.word	0x2000008c

080007fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000802:	f001 ffd2 	bl	80027aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000008c 	.word	0x2000008c

08000810 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
#else
	if ( LL_TIM_IsActiveFlag_UPDATE( htim3.Instance )){
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <TIM3_IRQHandler+0x28>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffa1 	bl	8000760 <LL_TIM_IsActiveFlag_UPDATE>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <TIM3_IRQHandler+0x22>
		LL_TIM_ClearFlag_UPDATE( htim3.Instance );
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <TIM3_IRQHandler+0x28>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff8b 	bl	8000744 <LL_TIM_ClearFlag_UPDATE>
		pmsm_timer3_update_handler();
 800082e:	f004 fa85 	bl	8004d3c <pmsm_timer3_update_handler>
	}
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000d8 	.word	0x200000d8

0800083c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */
#else
  if ( LL_TIM_IsActiveFlag_UPDATE( htim4.Instance )){
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <TIM4_IRQHandler+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff8b 	bl	8000760 <LL_TIM_IsActiveFlag_UPDATE>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <TIM4_IRQHandler+0x22>
      LL_TIM_ClearFlag_UPDATE( htim4.Instance );
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <TIM4_IRQHandler+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff75 	bl	8000744 <LL_TIM_ClearFlag_UPDATE>
      pmsm_sin_table_timer4_handler();
 800085a:	f004 f9c3 	bl	8004be4 <pmsm_sin_table_timer4_handler>
    }
#endif
  /* USER CODE END TIM4_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000124 	.word	0x20000124

08000868 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00a      	b.n	8000890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800087a:	f3af 8000 	nop.w
 800087e:	4601      	mov	r1, r0
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf0      	blt.n	800087a <_read+0x12>
  }

  return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e009      	b.n	80008c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fb37 	bl	8000f30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dbf1      	blt.n	80008b4 <_write+0x12>
  }
  return len;
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <_close>:

int _close(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000902:	605a      	str	r2, [r3, #4]
  return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000912:	b480      	push	{r7}
 8000914:	b085      	sub	sp, #20
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f004 fd18 	bl	8005390 <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20008000 	.word	0x20008000
 800098c:	00000400 	.word	0x00000400
 8000990:	20000088 	.word	0x20000088
 8000994:	20000370 	.word	0x20000370

08000998 <LL_TIM_EnableCounter>:
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f043 0201 	orr.w	r2, r3, #1
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <LL_TIM_EnableAllOutputs>:
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	645a      	str	r2, [r3, #68]	; 0x44
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09c      	sub	sp, #112	; 0x70
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]
 8000a0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2234      	movs	r2, #52	; 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fc6d 	bl	80052f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a18:	4b54      	ldr	r3, [pc, #336]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a1a:	4a55      	ldr	r2, [pc, #340]	; (8000b70 <MX_TIM1_Init+0x198>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a1e:	4b53      	ldr	r3, [pc, #332]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b51      	ldr	r3, [pc, #324]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5665;
 8000a2a:	4b50      	ldr	r3, [pc, #320]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a2c:	f241 6221 	movw	r2, #5665	; 0x1621
 8000a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a38:	4b4c      	ldr	r3, [pc, #304]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a44:	4849      	ldr	r0, [pc, #292]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a46:	f001 fd8d 	bl	8002564 <HAL_TIM_Base_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f7ff fe4f 	bl	80006f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a58:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4842      	ldr	r0, [pc, #264]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a62:	f002 f905 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a6c:	f7ff fe41 	bl	80006f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a70:	483e      	ldr	r0, [pc, #248]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a72:	f001 fe39 	bl	80026e8 <HAL_TIM_PWM_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a7c:	f7ff fe39 	bl	80006f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a90:	4619      	mov	r1, r3
 8000a92:	4836      	ldr	r0, [pc, #216]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000a94:	f002 fe46 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a9e:	f7ff fe28 	bl	80006f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa2:	2360      	movs	r3, #96	; 0x60
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4829      	ldr	r0, [pc, #164]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000ac8:	f001 ffbe 	bl	8002a48 <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ad2:	f7ff fe0e 	bl	80006f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ada:	2204      	movs	r2, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4823      	ldr	r0, [pc, #140]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000ae0:	f001 ffb2 	bl	8002a48 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000aea:	f7ff fe02 	bl	80006f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000af2:	2208      	movs	r2, #8
 8000af4:	4619      	mov	r1, r3
 8000af6:	481d      	ldr	r0, [pc, #116]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000af8:	f001 ffa6 	bl	8002a48 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000b02:	f7ff fdf6 	bl	80006f2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 127;
 8000b12:	237f      	movs	r3, #127	; 0x7f
 8000b14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000b44:	f002 fe70 	bl	8003828 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000b4e:	f7ff fdd0 	bl	80006f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
//  TIM1->CR1 |= TIM_CR1_CEN;
  LL_TIM_EnableCounter( TIM1 );
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <MX_TIM1_Init+0x198>)
 8000b54:	f7ff ff20 	bl	8000998 <LL_TIM_EnableCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_TIM1_Init+0x198>)
 8000b5a:	f7ff ff2d 	bl	80009b8 <LL_TIM_EnableAllOutputs>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <MX_TIM1_Init+0x194>)
 8000b60:	f000 f90a 	bl	8000d78 <HAL_TIM_MspPostInit>

}
 8000b64:	bf00      	nop
 8000b66:	3770      	adds	r7, #112	; 0x70
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	40012c00 	.word	0x40012c00

08000b74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <MX_TIM3_Init+0x98>)
 8000b96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000b9a:	22a9      	movs	r2, #169	; 0xa9
 8000b9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000baa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bba:	f001 fcd3 	bl	8002564 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bc4:	f7ff fd95 	bl	80006f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bd6:	f002 f84b 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000be0:	f7ff fd87 	bl	80006f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bf2:	f002 fd97 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f7ff fd79 	bl	80006f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000d8 	.word	0x200000d8
 8000c0c:	40000400 	.word	0x40000400

08000c10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <MX_TIM4_Init+0x98>)
 8000c32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c36:	22a9      	movs	r2, #169	; 0xa9
 8000c38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c54:	f001 fc86 	bl	8002564 <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c5e:	f7ff fd48 	bl	80006f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c70:	f001 fffe 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f7ff fd3a 	bl	80006f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_TIM4_Init+0x94>)
 8000c8c:	f002 fd4a 	bl	8003724 <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c96:	f7ff fd2c 	bl	80006f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000124 	.word	0x20000124
 8000ca8:	40000800 	.word	0x40000800

08000cac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a2b      	ldr	r2, [pc, #172]	; (8000d68 <HAL_TIM_Base_MspInit+0xbc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d11c      	bne.n	8000cf8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	4a2a      	ldr	r2, [pc, #168]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2018      	movs	r0, #24
 8000cdc:	f000 fab9 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ce0:	2018      	movs	r0, #24
 8000ce2:	f000 fad0 	bl	8001286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2019      	movs	r0, #25
 8000cec:	f000 fab1 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cf0:	2019      	movs	r0, #25
 8000cf2:	f000 fac8 	bl	8001286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cf6:	e032      	b.n	8000d5e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_TIM_Base_MspInit+0xc4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d114      	bne.n	8000d2c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	201d      	movs	r0, #29
 8000d20:	f000 fa97 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d24:	201d      	movs	r0, #29
 8000d26:	f000 faae 	bl	8001286 <HAL_NVIC_EnableIRQ>
}
 8000d2a:	e018      	b.n	8000d5e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM4)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_TIM_Base_MspInit+0xc8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d113      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_TIM_Base_MspInit+0xc0>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	201e      	movs	r0, #30
 8000d54:	f000 fa7d 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d58:	201e      	movs	r0, #30
 8000d5a:	f000 fa94 	bl	8001286 <HAL_NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40012c00 	.word	0x40012c00
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40000400 	.word	0x40000400
 8000d74:	40000800 	.word	0x40000800

08000d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <HAL_TIM_MspPostInit+0x64>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d11c      	bne.n	8000dd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_UL_Pin|PWM_UH_Pin|PWM_VL_Pin|PWM_VH_Pin
 8000db2:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8000db6:	60fb      	str	r3, [r7, #12]
                          |PWM_WL_Pin|PWM_WH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_TIM_MspPostInit+0x6c>)
 8000dd0:	f000 fa74 	bl	80012bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48001000 	.word	0x48001000

08000de8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dec:	4b22      	ldr	r3, [pc, #136]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <MX_USART1_UART_Init+0x94>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e32:	f002 fdcb 	bl	80039cc <HAL_UART_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e3c:	f7ff fc59 	bl	80006f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e44:	f003 fbc4 	bl	80045d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4e:	f7ff fc50 	bl	80006f2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e56:	f003 fbf9 	bl	800464c <HAL_UARTEx_SetRxFifoThreshold>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e60:	f7ff fc47 	bl	80006f2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_USART1_UART_Init+0x90>)
 8000e66:	f003 fb7a 	bl	800455e <HAL_UARTEx_DisableFifoMode>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e70:	f7ff fc3f 	bl	80006f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000170 	.word	0x20000170
 8000e7c:	40013800 	.word	0x40013800

08000e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	; 0x68
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2244      	movs	r2, #68	; 0x44
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f004 fa26 	bl	80052f2 <memset>
  if(uartHandle->Instance==USART1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <HAL_UART_MspInit+0xa8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d137      	bne.n	8000f20 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 f961 	bl	8002184 <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec8:	f7ff fc13 	bl	80006f2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_UART_MspInit+0xac>)
 8000ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed0:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0xac>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_UART_MspInit+0xac>)
 8000eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0xac>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_UART_MspInit+0xac>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_UART_MspInit+0xac>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000efc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f00:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f000 f9ce 	bl	80012bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f20:	bf00      	nop
 8000f22:	3768      	adds	r7, #104	; 0x68
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40021000 	.word	0x40021000

08000f30 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the debug port and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000f38:	1d39      	adds	r1, r7, #4
 8000f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <__io_putchar+0x20>)
 8000f42:	f002 fd93 	bl	8003a6c <HAL_UART_Transmit>

  return ch;
 8000f46:	687b      	ldr	r3, [r7, #4]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000170 	.word	0x20000170

08000f54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 f95a 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f88:	200f      	movs	r0, #15
 8000f8a:	f000 f80d 	bl	8000fa8 <HAL_InitTick>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	e001      	b.n	8000f9e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f9a:	f7ff fbaf 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]

}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_InitTick+0x68>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d022      	beq.n	8001002 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_InitTick+0x6c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_InitTick+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f966 	bl	80012a2 <HAL_SYSTICK_Config>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10f      	bne.n	8000ffc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d809      	bhi.n	8000ff6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fea:	f000 f932 	bl	8001252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_InitTick+0x70>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	e007      	b.n	8001006 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e004      	b.n	8001006 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e001      	b.n	8001006 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000008 	.word	0x20000008
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x1c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x20>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4413      	add	r3, r2
 800102a:	4a03      	ldr	r2, [pc, #12]	; (8001038 <HAL_IncTick+0x1c>)
 800102c:	6013      	str	r3, [r2, #0]
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000204 	.word	0x20000204
 800103c:	20000008 	.word	0x20000008

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000204 	.word	0x20000204

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d004      	beq.n	800107c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_Delay+0x40>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107c:	bf00      	nop
 800107e:	f7ff ffdf 	bl	8001040 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	429a      	cmp	r2, r3
 800108c:	d8f7      	bhi.n	800107e <HAL_Delay+0x26>
  {
  }
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000008 	.word	0x20000008

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff40 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff90 	bl	8001190 <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5f 	bl	800113c <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff33 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa4 	bl	80011f8 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ca:	e15a      	b.n	8001582 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa01 f303 	lsl.w	r3, r1, r3
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 814c 	beq.w	800157c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d005      	beq.n	80012fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d130      	bne.n	800135e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001332:	2201      	movs	r2, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	f003 0201 	and.w	r2, r3, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b03      	cmp	r3, #3
 8001368:	d017      	beq.n	800139a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d123      	bne.n	80013ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	6939      	ldr	r1, [r7, #16]
 80013ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0203 	and.w	r2, r3, #3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 80a6 	beq.w	800157c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001430:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <HAL_GPIO_Init+0x2e4>)
 8001432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001434:	4a5a      	ldr	r2, [pc, #360]	; (80015a0 <HAL_GPIO_Init+0x2e4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6613      	str	r3, [r2, #96]	; 0x60
 800143c:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <HAL_GPIO_Init+0x2e4>)
 800143e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001448:	4a56      	ldr	r2, [pc, #344]	; (80015a4 <HAL_GPIO_Init+0x2e8>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001472:	d01f      	beq.n	80014b4 <HAL_GPIO_Init+0x1f8>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x2ec>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d019      	beq.n	80014b0 <HAL_GPIO_Init+0x1f4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <HAL_GPIO_Init+0x2f0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d013      	beq.n	80014ac <HAL_GPIO_Init+0x1f0>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a4a      	ldr	r2, [pc, #296]	; (80015b0 <HAL_GPIO_Init+0x2f4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00d      	beq.n	80014a8 <HAL_GPIO_Init+0x1ec>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a49      	ldr	r2, [pc, #292]	; (80015b4 <HAL_GPIO_Init+0x2f8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d007      	beq.n	80014a4 <HAL_GPIO_Init+0x1e8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a48      	ldr	r2, [pc, #288]	; (80015b8 <HAL_GPIO_Init+0x2fc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_GPIO_Init+0x1e4>
 800149c:	2305      	movs	r3, #5
 800149e:	e00a      	b.n	80014b6 <HAL_GPIO_Init+0x1fa>
 80014a0:	2306      	movs	r3, #6
 80014a2:	e008      	b.n	80014b6 <HAL_GPIO_Init+0x1fa>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x1fa>
 80014a8:	2303      	movs	r3, #3
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1fa>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1fa>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1fa>
 80014b4:	2300      	movs	r3, #0
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c6:	4937      	ldr	r1, [pc, #220]	; (80015a4 <HAL_GPIO_Init+0x2e8>)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_GPIO_Init+0x300>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014f8:	4a30      	ldr	r2, [pc, #192]	; (80015bc <HAL_GPIO_Init+0x300>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_GPIO_Init+0x300>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001522:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_GPIO_Init+0x300>)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_GPIO_Init+0x300>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <HAL_GPIO_Init+0x300>)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_GPIO_Init+0x300>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_GPIO_Init+0x300>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	f47f ae9d 	bne.w	80012cc <HAL_GPIO_Init+0x10>
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010000 	.word	0x40010000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	48000800 	.word	0x48000800
 80015b0:	48000c00 	.word	0x48000c00
 80015b4:	48001000 	.word	0x48001000
 80015b8:	48001400 	.word	0x48001400
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d141      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015da:	d131      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f4:	4a41      	ldr	r2, [pc, #260]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2232      	movs	r2, #50	; 0x32
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	0c9b      	lsrs	r3, r3, #18
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001612:	e002      	b.n	800161a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3b01      	subs	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001626:	d102      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f2      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d158      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e057      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001646:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800164c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001650:	e04d      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001658:	d141      	bne.n	80016de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001666:	d131      	bne.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2232      	movs	r2, #50	; 0x32
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800169e:	e002      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	d102      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f2      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d112      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e011      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016dc:	e007      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40007000 	.word	0x40007000
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83

08001708 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001716:	6093      	str	r3, [r2, #8]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e2fe      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d075      	beq.n	8001832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001746:	4b97      	ldr	r3, [pc, #604]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001750:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x3e>
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d002      	beq.n	800176c <HAL_RCC_OscConfig+0x44>
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b08      	cmp	r3, #8
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b8d      	ldr	r3, [pc, #564]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <HAL_RCC_OscConfig+0x108>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d157      	bne.n	8001830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e2d9      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x74>
 800178e:	4b85      	ldr	r3, [pc, #532]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a84      	ldr	r2, [pc, #528]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b7f      	ldr	r3, [pc, #508]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a7e      	ldr	r2, [pc, #504]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7b      	ldr	r2, [pc, #492]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a74      	ldr	r2, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc2e 	bl	8001040 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fc2a 	bl	8001040 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e29e      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fc1a 	bl	8001040 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc16 	bl	8001040 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e28a      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001822:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0xe8>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d075      	beq.n	800192a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0x136>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d002      	beq.n	8001864 <HAL_RCC_OscConfig+0x13c>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d11f      	bne.n	80018a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_OscConfig+0x154>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e25d      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	4946      	ldr	r1, [pc, #280]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001890:	4b45      	ldr	r3, [pc, #276]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb87 	bl	8000fa8 <HAL_InitTick>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d043      	beq.n	8001928 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e249      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d023      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ac:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3c      	ldr	r2, [pc, #240]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fbc2 	bl	8001040 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fbbe 	bl	8001040 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e232      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	061b      	lsls	r3, r3, #24
 80018ec:	492d      	ldr	r1, [pc, #180]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
 80018f2:	e01a      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 80018fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fb9e 	bl	8001040 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fb9a 	bl	8001040 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e20e      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1e0>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d041      	beq.n	80019ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01c      	beq.n	8001978 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff fb77 	bl	8001040 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fb73 	bl	8001040 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1e7      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0ef      	beq.n	8001956 <HAL_RCC_OscConfig+0x22e>
 8001976:	e020      	b.n	80019ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_OscConfig+0x27c>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff fb5a 	bl	8001040 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800198e:	e00d      	b.n	80019ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fb56 	bl	8001040 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d906      	bls.n	80019ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1ca      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ac:	4b8c      	ldr	r3, [pc, #560]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ea      	bne.n	8001990 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a6 	beq.w	8001b14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019cc:	4b84      	ldr	r3, [pc, #528]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_OscConfig+0x2b4>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x2b6>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00d      	beq.n	80019fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a7e      	ldr	r2, [pc, #504]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b7c      	ldr	r3, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a0a:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a75      	ldr	r2, [pc, #468]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fb13 	bl	8001040 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fb0f 	bl	8001040 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e183      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	4b6c      	ldr	r3, [pc, #432]	; (8001be4 <HAL_RCC_OscConfig+0x4bc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_RCC_OscConfig+0x32e>
 8001a44:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a65      	ldr	r2, [pc, #404]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a54:	e024      	b.n	8001aa0 <HAL_RCC_OscConfig+0x378>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d110      	bne.n	8001a80 <HAL_RCC_OscConfig+0x358>
 8001a5e:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a74:	4a5a      	ldr	r2, [pc, #360]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x378>
 8001a80:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a56      	ldr	r2, [pc, #344]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a52      	ldr	r2, [pc, #328]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d016      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff faca 	bl	8001040 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fac6 	bl	8001040 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e138      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ed      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x388>
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fab3 	bl	8001040 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff faaf 	bl	8001040 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e121      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ed      	bne.n	8001ade <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2e:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fa82 	bl	8001040 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b40:	f7ff fa7e 	bl	8001040 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0f2      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCC_OscConfig+0x418>
 8001b60:	e01b      	b.n	8001b9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa65 	bl	8001040 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7a:	f7ff fa61 	bl	8001040 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0d5      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ef      	bne.n	8001b7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80c9 	beq.w	8001d36 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	f000 8083 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d15e      	bne.n	8001c78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fa3b 	bl	8001040 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	e00c      	b.n	8001be8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff fa37 	bl	8001040 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d905      	bls.n	8001be8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0ab      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ec      	bne.n	8001bce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	4b52      	ldr	r3, [pc, #328]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4b52      	ldr	r3, [pc, #328]	; (8001d44 <HAL_RCC_OscConfig+0x61c>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6a11      	ldr	r1, [r2, #32]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c04:	3a01      	subs	r2, #1
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c0e:	0212      	lsls	r2, r2, #8
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c16:	0852      	lsrs	r2, r2, #1
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	0552      	lsls	r2, r2, #21
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c22:	0852      	lsrs	r2, r2, #1
 8001c24:	3a01      	subs	r2, #1
 8001c26:	0652      	lsls	r2, r2, #25
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c2e:	06d2      	lsls	r2, r2, #27
 8001c30:	430a      	orrs	r2, r1
 8001c32:	4943      	ldr	r1, [pc, #268]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a40      	ldr	r2, [pc, #256]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c44:	4b3e      	ldr	r3, [pc, #248]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a3d      	ldr	r2, [pc, #244]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f9f6 	bl	8001040 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff f9f2 	bl	8001040 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e066      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x530>
 8001c76:	e05e      	b.n	8001d36 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f9dc 	bl	8001040 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f9d8 	bl	8001040 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04c      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	4924      	ldr	r1, [pc, #144]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60cb      	str	r3, [r1, #12]
 8001cb6:	e03e      	b.n	8001d36 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e039      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_RCC_OscConfig+0x618>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d12c      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d123      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d11b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d113      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	3b01      	subs	r3, #1
 8001d18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	019f800c 	.word	0x019f800c
 8001d48:	feeefffc 	.word	0xfeeefffc

08001d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e11e      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b91      	ldr	r3, [pc, #580]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b8e      	ldr	r3, [pc, #568]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 020f 	bic.w	r2, r3, #15
 8001d7a:	498c      	ldr	r1, [pc, #560]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e106      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d073      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d129      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da8:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0f4      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001db8:	f000 f99e 	bl	80020f8 <RCC_GetSysClockFreqFromPLLSource>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4a7c      	ldr	r2, [pc, #496]	; (8001fb4 <HAL_RCC_ClockConfig+0x268>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d93f      	bls.n	8001e46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dc6:	4b7a      	ldr	r3, [pc, #488]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d033      	beq.n	8001e46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d12f      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dee:	4a70      	ldr	r2, [pc, #448]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e024      	b.n	8001e46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0c6      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e14:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0be      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e24:	f000 f8ce 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4a61      	ldr	r2, [pc, #388]	; (8001fb4 <HAL_RCC_ClockConfig+0x268>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d909      	bls.n	8001e46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e32:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e3a:	4a5d      	ldr	r2, [pc, #372]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f023 0203 	bic.w	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4957      	ldr	r1, [pc, #348]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e58:	f7ff f8f2 	bl	8001040 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7ff f8ee 	bl	8001040 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e095      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1eb      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d023      	beq.n	8001edc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a42      	ldr	r2, [pc, #264]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eaa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ec0:	4a3b      	ldr	r2, [pc, #236]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
 8001eda:	e008      	b.n	8001eee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b80      	cmp	r3, #128	; 0x80
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ee2:	4b33      	ldr	r3, [pc, #204]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4a32      	ldr	r2, [pc, #200]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d21d      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 020f 	bic.w	r2, r3, #15
 8001f04:	4929      	ldr	r1, [pc, #164]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff f898 	bl	8001040 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7ff f894 	bl	8001040 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e03b      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1ed      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4917      	ldr	r1, [pc, #92]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	490f      	ldr	r1, [pc, #60]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f76:	f000 f825 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_RCC_ClockConfig+0x264>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <HAL_RCC_ClockConfig+0x26c>)
 8001f88:	5ccb      	ldrb	r3, [r1, r3]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_RCC_ClockConfig+0x270>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x274>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f804 	bl	8000fa8 <HAL_InitTick>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	04c4b400 	.word	0x04c4b400
 8001fb8:	080057f0 	.word	0x080057f0
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	e047      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e03e      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d136      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3301      	adds	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002018:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc0>)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002022:	68d2      	ldr	r2, [r2, #12]
 8002024:	0a12      	lsrs	r2, r2, #8
 8002026:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	617b      	str	r3, [r7, #20]
      break;
 8002030:	e00c      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 800203c:	68d2      	ldr	r2, [r2, #12]
 800203e:	0a12      	lsrs	r2, r2, #8
 8002040:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
      break;
 800204a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_GetSysClockFreq+0xb8>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0e5b      	lsrs	r3, r3, #25
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e001      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800206c:	693b      	ldr	r3, [r7, #16]
}
 800206e:	4618      	mov	r0, r3
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4904      	ldr	r1, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08005800 	.word	0x08005800

080020cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d0:	f7ff ffda 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0adb      	lsrs	r3, r3, #11
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4904      	ldr	r1, [pc, #16]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08005800 	.word	0x08005800

080020f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3301      	adds	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d10c      	bne.n	8002136 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002126:	68d2      	ldr	r2, [r2, #12]
 8002128:	0a12      	lsrs	r2, r2, #8
 800212a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
    break;
 8002134:	e00c      	b.n	8002150 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002140:	68d2      	ldr	r2, [r2, #12]
 8002142:	0a12      	lsrs	r2, r2, #8
 8002144:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
    break;
 800214e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0e5b      	lsrs	r3, r3, #25
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	3301      	adds	r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800216a:	687b      	ldr	r3, [r7, #4]
}
 800216c:	4618      	mov	r0, r3
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000
 800217c:	007a1200 	.word	0x007a1200
 8002180:	00f42400 	.word	0x00f42400

08002184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800218c:	2300      	movs	r3, #0
 800218e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002190:	2300      	movs	r3, #0
 8002192:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8098 	beq.w	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a6:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10d      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ca:	2301      	movs	r3, #1
 80021cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ce:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021da:	f7fe ff31 	bl	8001040 <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021e0:	e009      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7fe ff2d 	bl	8001040 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d902      	bls.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	74fb      	strb	r3, [r7, #19]
        break;
 80021f4:	e005      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ef      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d159      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01e      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	d019      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002224:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe feed 	bl	8001040 <HAL_GetTick>
 8002266:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002268:	e00b      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fee9 	bl	8001040 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d902      	bls.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	74fb      	strb	r3, [r7, #19]
            break;
 8002280:	e006      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0ec      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4903      	ldr	r1, [pc, #12]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022ac:	e008      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
 80022b2:	e005      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c0:	7c7b      	ldrb	r3, [r7, #17]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4ba6      	ldr	r3, [pc, #664]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4aa5      	ldr	r2, [pc, #660]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022de:	4ba0      	ldr	r3, [pc, #640]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 0203 	bic.w	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	499c      	ldr	r1, [pc, #624]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002300:	4b97      	ldr	r3, [pc, #604]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 020c 	bic.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	4994      	ldr	r1, [pc, #592]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002322:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	498b      	ldr	r1, [pc, #556]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002344:	4b86      	ldr	r3, [pc, #536]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	4983      	ldr	r1, [pc, #524]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002366:	4b7e      	ldr	r3, [pc, #504]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	497a      	ldr	r1, [pc, #488]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002388:	4b75      	ldr	r3, [pc, #468]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	4972      	ldr	r1, [pc, #456]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023aa:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4969      	ldr	r1, [pc, #420]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023cc:	4b64      	ldr	r3, [pc, #400]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4961      	ldr	r1, [pc, #388]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ee:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	4958      	ldr	r1, [pc, #352]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	4950      	ldr	r1, [pc, #320]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800242e:	d105      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002448:	4b45      	ldr	r3, [pc, #276]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	4942      	ldr	r1, [pc, #264]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002466:	d105      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002468:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002472:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d015      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4934      	ldr	r1, [pc, #208]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249e:	d105      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c6:	4926      	ldr	r1, [pc, #152]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024d6:	d105      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a20      	ldr	r2, [pc, #128]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d015      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	4918      	ldr	r1, [pc, #96]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002546:	d105      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a04      	ldr	r2, [pc, #16]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002552:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002554:	7cbb      	ldrb	r3, [r7, #18]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e049      	b.n	800260a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fb8e 	bl	8000cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 fc90 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d001      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e04a      	b.n	80026c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d018      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002656:	d013      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_TIM_Base_Start_IT+0xc8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x6c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d115      	bne.n	80026ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2b06      	cmp	r3, #6
 8002690:	d015      	beq.n	80026be <HAL_TIM_Base_Start_IT+0xaa>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d011      	beq.n	80026be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026aa:	e008      	b.n	80026be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e000      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40013400 	.word	0x40013400
 80026e0:	40014000 	.word	0x40014000
 80026e4:	00010007 	.word	0x00010007

080026e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e049      	b.n	800278e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f841 	bl	8002796 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f000 fbce 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01b      	beq.n	800280e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f06f 0202 	mvn.w	r2, #2
 80027de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb49 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 80027fa:	e005      	b.n	8002808 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb3b 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fb4c 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01b      	beq.n	800285a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f06f 0204 	mvn.w	r2, #4
 800282a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fb23 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002846:	e005      	b.n	8002854 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fb15 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fb26 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01b      	beq.n	80028a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0208 	mvn.w	r2, #8
 8002876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fafd 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002892:	e005      	b.n	80028a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 faef 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fb00 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01b      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0210 	mvn.w	r2, #16
 80028c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2208      	movs	r2, #8
 80028c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fad7 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 80028de:	e005      	b.n	80028ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fac9 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fada 	bl	8002ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00c      	beq.n	8002916 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0201 	mvn.w	r2, #1
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 faa7 	bl	8002e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f001 f808 	bl	8003954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f001 f800 	bl	8003968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa94 	bl	8002eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00c      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0220 	mvn.w	r2, #32
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 ffc8 	bl	8003940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00c      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 ffd4 	bl	800397c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 ffcc 	bl	8003990 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 ffc4 	bl	80039a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 ffbc 	bl	80039b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e0ff      	b.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b14      	cmp	r3, #20
 8002a72:	f200 80f0 	bhi.w	8002c56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002ad1 	.word	0x08002ad1
 8002a80:	08002c57 	.word	0x08002c57
 8002a84:	08002c57 	.word	0x08002c57
 8002a88:	08002c57 	.word	0x08002c57
 8002a8c:	08002b11 	.word	0x08002b11
 8002a90:	08002c57 	.word	0x08002c57
 8002a94:	08002c57 	.word	0x08002c57
 8002a98:	08002c57 	.word	0x08002c57
 8002a9c:	08002b53 	.word	0x08002b53
 8002aa0:	08002c57 	.word	0x08002c57
 8002aa4:	08002c57 	.word	0x08002c57
 8002aa8:	08002c57 	.word	0x08002c57
 8002aac:	08002b93 	.word	0x08002b93
 8002ab0:	08002c57 	.word	0x08002c57
 8002ab4:	08002c57 	.word	0x08002c57
 8002ab8:	08002c57 	.word	0x08002c57
 8002abc:	08002bd5 	.word	0x08002bd5
 8002ac0:	08002c57 	.word	0x08002c57
 8002ac4:	08002c57 	.word	0x08002c57
 8002ac8:	08002c57 	.word	0x08002c57
 8002acc:	08002c15 	.word	0x08002c15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fa92 	bl	8003000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	619a      	str	r2, [r3, #24]
      break;
 8002b0e:	e0a5      	b.n	8002c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fb02 	bl	8003120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6999      	ldr	r1, [r3, #24]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	619a      	str	r2, [r3, #24]
      break;
 8002b50:	e084      	b.n	8002c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fb6b 	bl	8003234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0208 	orr.w	r2, r2, #8
 8002b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0204 	bic.w	r2, r2, #4
 8002b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69d9      	ldr	r1, [r3, #28]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	61da      	str	r2, [r3, #28]
      break;
 8002b90:	e064      	b.n	8002c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fbd3 	bl	8003344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69d9      	ldr	r1, [r3, #28]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	021a      	lsls	r2, r3, #8
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	61da      	str	r2, [r3, #28]
      break;
 8002bd2:	e043      	b.n	8002c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fc3c 	bl	8003458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0208 	orr.w	r2, r2, #8
 8002bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c12:	e023      	b.n	8002c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fc80 	bl	8003520 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	021a      	lsls	r2, r3, #8
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c54:	e002      	b.n	8002c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop

08002c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIM_ConfigClockSource+0x1c>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0de      	b.n	8002e4a <HAL_TIM_ConfigClockSource+0x1da>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002caa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a63      	ldr	r2, [pc, #396]	; (8002e54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	f000 80a9 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002ccc:	4a61      	ldr	r2, [pc, #388]	; (8002e54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	f200 80ae 	bhi.w	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cd4:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f000 80a1 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002cdc:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	f200 80a6 	bhi.w	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ce4:	4a5d      	ldr	r2, [pc, #372]	; (8002e5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f000 8099 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002cec:	4a5b      	ldr	r2, [pc, #364]	; (8002e5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f200 809e 	bhi.w	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cf4:	4a5a      	ldr	r2, [pc, #360]	; (8002e60 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f000 8091 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002cfc:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	f200 8096 	bhi.w	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002d08:	f000 8089 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002d10:	f200 808e 	bhi.w	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d18:	d03e      	beq.n	8002d98 <HAL_TIM_ConfigClockSource+0x128>
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1e:	f200 8087 	bhi.w	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	f000 8086 	beq.w	8002e36 <HAL_TIM_ConfigClockSource+0x1c6>
 8002d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2e:	d87f      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d30:	2b70      	cmp	r3, #112	; 0x70
 8002d32:	d01a      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xfa>
 8002d34:	2b70      	cmp	r3, #112	; 0x70
 8002d36:	d87b      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d050      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
 8002d3c:	2b60      	cmp	r3, #96	; 0x60
 8002d3e:	d877      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d40:	2b50      	cmp	r3, #80	; 0x50
 8002d42:	d03c      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x14e>
 8002d44:	2b50      	cmp	r3, #80	; 0x50
 8002d46:	d873      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d058      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x18e>
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d86f      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	d064      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d54:	2b30      	cmp	r3, #48	; 0x30
 8002d56:	d86b      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d060      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d867      	bhi.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d05c      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d05a      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d68:	e062      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d7a:	f000 fcb3 	bl	80036e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	609a      	str	r2, [r3, #8]
      break;
 8002d96:	e04f      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002da8:	f000 fc9c 	bl	80036e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dba:	609a      	str	r2, [r3, #8]
      break;
 8002dbc:	e03c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 fc0e 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2150      	movs	r1, #80	; 0x50
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fc67 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e02c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 fc2d 	bl	800364a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2160      	movs	r1, #96	; 0x60
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fc57 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e01c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 fbee 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2140      	movs	r1, #64	; 0x40
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fc47 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e00c      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f000 fc3e 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 8002e2e:	e003      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      break;
 8002e34:	e000      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	00100070 	.word	0x00100070
 8002e58:	00100040 	.word	0x00100040
 8002e5c:	00100030 	.word	0x00100030
 8002e60:	00100020 	.word	0x00100020

08002e64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a42      	ldr	r2, [pc, #264]	; (8002fe4 <TIM_Base_SetConfig+0x11c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00f      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d00b      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <TIM_Base_SetConfig+0x120>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <TIM_Base_SetConfig+0x124>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <TIM_Base_SetConfig+0x128>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a33      	ldr	r2, [pc, #204]	; (8002fe4 <TIM_Base_SetConfig+0x11c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01b      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d017      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <TIM_Base_SetConfig+0x120>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <TIM_Base_SetConfig+0x124>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00f      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a2e      	ldr	r2, [pc, #184]	; (8002ff0 <TIM_Base_SetConfig+0x128>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00b      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a2d      	ldr	r2, [pc, #180]	; (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d007      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <TIM_Base_SetConfig+0x130>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d003      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <TIM_Base_SetConfig+0x134>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d108      	bne.n	8002f64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <TIM_Base_SetConfig+0x11c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00f      	beq.n	8002fb0 <TIM_Base_SetConfig+0xe8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <TIM_Base_SetConfig+0x128>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <TIM_Base_SetConfig+0xe8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <TIM_Base_SetConfig+0xe8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <TIM_Base_SetConfig+0x130>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0xe8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <TIM_Base_SetConfig+0x134>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f023 0201 	bic.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40013400 	.word	0x40013400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800

08003000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f023 0201 	bic.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f023 0302 	bic.w	r3, r3, #2
 800304c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <TIM_OC1_SetConfig+0x10c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00f      	beq.n	8003080 <TIM_OC1_SetConfig+0x80>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <TIM_OC1_SetConfig+0x110>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00b      	beq.n	8003080 <TIM_OC1_SetConfig+0x80>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <TIM_OC1_SetConfig+0x114>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <TIM_OC1_SetConfig+0x80>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a29      	ldr	r2, [pc, #164]	; (8003118 <TIM_OC1_SetConfig+0x118>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_OC1_SetConfig+0x80>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <TIM_OC1_SetConfig+0x11c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0308 	bic.w	r3, r3, #8
 8003086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <TIM_OC1_SetConfig+0x10c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_OC1_SetConfig+0xc2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <TIM_OC1_SetConfig+0x110>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_OC1_SetConfig+0xc2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <TIM_OC1_SetConfig+0x114>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_OC1_SetConfig+0xc2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a18      	ldr	r2, [pc, #96]	; (8003118 <TIM_OC1_SetConfig+0x118>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_OC1_SetConfig+0xc2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a17      	ldr	r2, [pc, #92]	; (800311c <TIM_OC1_SetConfig+0x11c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d111      	bne.n	80030e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	bf00      	nop
 8003102:	371c      	adds	r7, #28
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40013400 	.word	0x40013400
 8003114:	40014000 	.word	0x40014000
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800

08003120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0320 	bic.w	r3, r3, #32
 800316e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a28      	ldr	r2, [pc, #160]	; (8003220 <TIM_OC2_SetConfig+0x100>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_OC2_SetConfig+0x6c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a27      	ldr	r2, [pc, #156]	; (8003224 <TIM_OC2_SetConfig+0x104>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d10d      	bne.n	80031a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <TIM_OC2_SetConfig+0x100>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00f      	beq.n	80031d0 <TIM_OC2_SetConfig+0xb0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <TIM_OC2_SetConfig+0x104>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <TIM_OC2_SetConfig+0xb0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <TIM_OC2_SetConfig+0x108>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <TIM_OC2_SetConfig+0xb0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a1a      	ldr	r2, [pc, #104]	; (800322c <TIM_OC2_SetConfig+0x10c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_OC2_SetConfig+0xb0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <TIM_OC2_SetConfig+0x110>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d113      	bne.n	80031f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40013400 	.word	0x40013400
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800

08003234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <TIM_OC3_SetConfig+0xfc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_OC3_SetConfig+0x6a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <TIM_OC3_SetConfig+0x100>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10d      	bne.n	80032ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <TIM_OC3_SetConfig+0xfc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_OC3_SetConfig+0xae>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <TIM_OC3_SetConfig+0x100>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_OC3_SetConfig+0xae>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <TIM_OC3_SetConfig+0x104>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_OC3_SetConfig+0xae>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <TIM_OC3_SetConfig+0x108>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_OC3_SetConfig+0xae>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <TIM_OC3_SetConfig+0x10c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d113      	bne.n	800330a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	621a      	str	r2, [r3, #32]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	031b      	lsls	r3, r3, #12
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a28      	ldr	r2, [pc, #160]	; (8003444 <TIM_OC4_SetConfig+0x100>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_OC4_SetConfig+0x6c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a27      	ldr	r2, [pc, #156]	; (8003448 <TIM_OC4_SetConfig+0x104>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d10d      	bne.n	80033cc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	031b      	lsls	r3, r3, #12
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <TIM_OC4_SetConfig+0x100>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00f      	beq.n	80033f4 <TIM_OC4_SetConfig+0xb0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <TIM_OC4_SetConfig+0x104>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_OC4_SetConfig+0xb0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <TIM_OC4_SetConfig+0x108>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_OC4_SetConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <TIM_OC4_SetConfig+0x10c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_OC4_SetConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a19      	ldr	r2, [pc, #100]	; (8003454 <TIM_OC4_SetConfig+0x110>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d113      	bne.n	800341c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003402:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40012c00 	.word	0x40012c00
 8003448:	40013400 	.word	0x40013400
 800344c:	40014000 	.word	0x40014000
 8003450:	40014400 	.word	0x40014400
 8003454:	40014800 	.word	0x40014800

08003458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800349c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a17      	ldr	r2, [pc, #92]	; (800350c <TIM_OC5_SetConfig+0xb4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00f      	beq.n	80034d2 <TIM_OC5_SetConfig+0x7a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <TIM_OC5_SetConfig+0xb8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <TIM_OC5_SetConfig+0x7a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <TIM_OC5_SetConfig+0xbc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <TIM_OC5_SetConfig+0x7a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a14      	ldr	r2, [pc, #80]	; (8003518 <TIM_OC5_SetConfig+0xc0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_OC5_SetConfig+0x7a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <TIM_OC5_SetConfig+0xc4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d109      	bne.n	80034e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	621a      	str	r2, [r3, #32]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40013400 	.word	0x40013400
 8003514:	40014000 	.word	0x40014000
 8003518:	40014400 	.word	0x40014400
 800351c:	40014800 	.word	0x40014800

08003520 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	051b      	lsls	r3, r3, #20
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <TIM_OC6_SetConfig+0xb8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00f      	beq.n	800359c <TIM_OC6_SetConfig+0x7c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <TIM_OC6_SetConfig+0xbc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <TIM_OC6_SetConfig+0x7c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <TIM_OC6_SetConfig+0xc0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <TIM_OC6_SetConfig+0x7c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <TIM_OC6_SetConfig+0xc4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_OC6_SetConfig+0x7c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <TIM_OC6_SetConfig+0xc8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	029b      	lsls	r3, r3, #10
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	621a      	str	r2, [r3, #32]
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40013400 	.word	0x40013400
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40014400 	.word	0x40014400
 80035e8:	40014800 	.word	0x40014800

080035ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 030a 	bic.w	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364a:	b480      	push	{r7}
 800364c:	b087      	sub	sp, #28
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f023 0210 	bic.w	r2, r3, #16
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	031b      	lsls	r3, r3, #12
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003686:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f043 0307 	orr.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	021a      	lsls	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	431a      	orrs	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003738:	2302      	movs	r3, #2
 800373a:	e065      	b.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2c      	ldr	r2, [pc, #176]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2b      	ldr	r2, [pc, #172]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d108      	bne.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d018      	beq.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b2:	d013      	beq.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a17      	ldr	r2, [pc, #92]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a12      	ldr	r2, [pc, #72]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d10c      	bne.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40013400 	.word	0x40013400
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40014000 	.word	0x40014000

08003828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003840:	2302      	movs	r3, #2
 8003842:	e073      	b.n	800392c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a19      	ldr	r2, [pc, #100]	; (8003938 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d11c      	bne.n	800391a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	051b      	lsls	r3, r3, #20
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40013400 	.word	0x40013400

08003940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e042      	b.n	8003a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fd fa45 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2224      	movs	r2, #36	; 0x24
 80039fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fb82 	bl	8004120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8b3 	bl	8003b88 <UART_SetConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e01b      	b.n	8003a64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fc01 	bl	8004264 <UART_CheckIdleState>
 8003a62:	4603      	mov	r3, r0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d17b      	bne.n	8003b7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_UART_Transmit+0x26>
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e074      	b.n	8003b80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2221      	movs	r2, #33	; 0x21
 8003aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aa6:	f7fd facb 	bl	8001040 <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_UART_Transmit+0x6c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e003      	b.n	8003ae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ae0:	e030      	b.n	8003b44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2180      	movs	r1, #128	; 0x80
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fc63 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e03d      	b.n	8003b80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e007      	b.n	8003b32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1c8      	bne.n	8003ae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2140      	movs	r1, #64	; 0x40
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fc2c 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e006      	b.n	8003b80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b08c      	sub	sp, #48	; 0x30
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4bab      	ldr	r3, [pc, #684]	; (8003e64 <UART_SetConfig+0x2dc>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4aa0      	ldr	r2, [pc, #640]	; (8003e68 <UART_SetConfig+0x2e0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f023 010f 	bic.w	r1, r3, #15
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a91      	ldr	r2, [pc, #580]	; (8003e6c <UART_SetConfig+0x2e4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d125      	bne.n	8003c78 <UART_SetConfig+0xf0>
 8003c2c:	4b90      	ldr	r3, [pc, #576]	; (8003e70 <UART_SetConfig+0x2e8>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d81a      	bhi.n	8003c70 <UART_SetConfig+0xe8>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <UART_SetConfig+0xb8>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c61 	.word	0x08003c61
 8003c48:	08003c59 	.word	0x08003c59
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c56:	e0d6      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e0d2      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e0ce      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e0ca      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003c70:	2310      	movs	r3, #16
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e0c6      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a7d      	ldr	r2, [pc, #500]	; (8003e74 <UART_SetConfig+0x2ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d138      	bne.n	8003cf4 <UART_SetConfig+0x16c>
 8003c82:	4b7b      	ldr	r3, [pc, #492]	; (8003e70 <UART_SetConfig+0x2e8>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	d82d      	bhi.n	8003cec <UART_SetConfig+0x164>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <UART_SetConfig+0x110>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ccd 	.word	0x08003ccd
 8003c9c:	08003ced 	.word	0x08003ced
 8003ca0:	08003ced 	.word	0x08003ced
 8003ca4:	08003ced 	.word	0x08003ced
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003ced 	.word	0x08003ced
 8003cb4:	08003ced 	.word	0x08003ced
 8003cb8:	08003cd5 	.word	0x08003cd5
 8003cbc:	08003ced 	.word	0x08003ced
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003ce5 	.word	0x08003ce5
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd2:	e098      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cda:	e094      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce2:	e090      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cea:	e08c      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003cec:	2310      	movs	r3, #16
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf2:	e088      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a5f      	ldr	r2, [pc, #380]	; (8003e78 <UART_SetConfig+0x2f0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d125      	bne.n	8003d4a <UART_SetConfig+0x1c2>
 8003cfe:	4b5c      	ldr	r3, [pc, #368]	; (8003e70 <UART_SetConfig+0x2e8>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d016      	beq.n	8003d3a <UART_SetConfig+0x1b2>
 8003d0c:	2b30      	cmp	r3, #48	; 0x30
 8003d0e:	d818      	bhi.n	8003d42 <UART_SetConfig+0x1ba>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d00a      	beq.n	8003d2a <UART_SetConfig+0x1a2>
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d814      	bhi.n	8003d42 <UART_SetConfig+0x1ba>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <UART_SetConfig+0x19a>
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d008      	beq.n	8003d32 <UART_SetConfig+0x1aa>
 8003d20:	e00f      	b.n	8003d42 <UART_SetConfig+0x1ba>
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d28:	e06d      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d30:	e069      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d32:	2304      	movs	r3, #4
 8003d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d38:	e065      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d40:	e061      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d42:	2310      	movs	r3, #16
 8003d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d48:	e05d      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a4b      	ldr	r2, [pc, #300]	; (8003e7c <UART_SetConfig+0x2f4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d125      	bne.n	8003da0 <UART_SetConfig+0x218>
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <UART_SetConfig+0x2e8>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d60:	d016      	beq.n	8003d90 <UART_SetConfig+0x208>
 8003d62:	2bc0      	cmp	r3, #192	; 0xc0
 8003d64:	d818      	bhi.n	8003d98 <UART_SetConfig+0x210>
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d00a      	beq.n	8003d80 <UART_SetConfig+0x1f8>
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d814      	bhi.n	8003d98 <UART_SetConfig+0x210>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <UART_SetConfig+0x1f0>
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d008      	beq.n	8003d88 <UART_SetConfig+0x200>
 8003d76:	e00f      	b.n	8003d98 <UART_SetConfig+0x210>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7e:	e042      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d80:	2302      	movs	r3, #2
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d86:	e03e      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8e:	e03a      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d90:	2308      	movs	r3, #8
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d96:	e036      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	e032      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <UART_SetConfig+0x2e0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d12a      	bne.n	8003e00 <UART_SetConfig+0x278>
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <UART_SetConfig+0x2e8>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db8:	d01a      	beq.n	8003df0 <UART_SetConfig+0x268>
 8003dba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dbe:	d81b      	bhi.n	8003df8 <UART_SetConfig+0x270>
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc4:	d00c      	beq.n	8003de0 <UART_SetConfig+0x258>
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dca:	d815      	bhi.n	8003df8 <UART_SetConfig+0x270>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <UART_SetConfig+0x250>
 8003dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd4:	d008      	beq.n	8003de8 <UART_SetConfig+0x260>
 8003dd6:	e00f      	b.n	8003df8 <UART_SetConfig+0x270>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dde:	e012      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003de0:	2302      	movs	r3, #2
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de6:	e00e      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003de8:	2304      	movs	r3, #4
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dee:	e00a      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003df0:	2308      	movs	r3, #8
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df6:	e006      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfe:	e002      	b.n	8003e06 <UART_SetConfig+0x27e>
 8003e00:	2310      	movs	r3, #16
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <UART_SetConfig+0x2e0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	f040 80a8 	bne.w	8003f62 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d834      	bhi.n	8003e84 <UART_SetConfig+0x2fc>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x298>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e85 	.word	0x08003e85
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e85 	.word	0x08003e85
 8003e30:	08003e53 	.word	0x08003e53
 8003e34:	08003e85 	.word	0x08003e85
 8003e38:	08003e85 	.word	0x08003e85
 8003e3c:	08003e85 	.word	0x08003e85
 8003e40:	08003e5b 	.word	0x08003e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe f92c 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e4a:	e021      	b.n	8003e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <UART_SetConfig+0x2f8>)
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e50:	e01e      	b.n	8003e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e52:	f7fe f8b7 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e58:	e01a      	b.n	8003e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e60:	e016      	b.n	8003e90 <UART_SetConfig+0x308>
 8003e62:	bf00      	nop
 8003e64:	cfff69f3 	.word	0xcfff69f3
 8003e68:	40008000 	.word	0x40008000
 8003e6c:	40013800 	.word	0x40013800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40004400 	.word	0x40004400
 8003e78:	40004800 	.word	0x40004800
 8003e7c:	40004c00 	.word	0x40004c00
 8003e80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 812a 	beq.w	80040ec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	4a9e      	ldr	r2, [pc, #632]	; (8004118 <UART_SetConfig+0x590>)
 8003e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d305      	bcc.n	8003ec8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d903      	bls.n	8003ed0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ece:	e10d      	b.n	80040ec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	4a8e      	ldr	r2, [pc, #568]	; (8004118 <UART_SetConfig+0x590>)
 8003ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ef2:	f7fc f991 	bl	8000218 <__aeabi_uldivmod>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	020b      	lsls	r3, r1, #8
 8003f08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f0c:	0202      	lsls	r2, r0, #8
 8003f0e:	6979      	ldr	r1, [r7, #20]
 8003f10:	6849      	ldr	r1, [r1, #4]
 8003f12:	0849      	lsrs	r1, r1, #1
 8003f14:	2000      	movs	r0, #0
 8003f16:	460c      	mov	r4, r1
 8003f18:	4605      	mov	r5, r0
 8003f1a:	eb12 0804 	adds.w	r8, r2, r4
 8003f1e:	eb43 0905 	adc.w	r9, r3, r5
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	469a      	mov	sl, r3
 8003f2a:	4693      	mov	fp, r2
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	465b      	mov	r3, fp
 8003f30:	4640      	mov	r0, r8
 8003f32:	4649      	mov	r1, r9
 8003f34:	f7fc f970 	bl	8000218 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f46:	d308      	bcc.n	8003f5a <UART_SetConfig+0x3d2>
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f4e:	d204      	bcs.n	8003f5a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	e0c8      	b.n	80040ec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f60:	e0c4      	b.n	80040ec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6a:	d167      	bne.n	800403c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d828      	bhi.n	8003fc6 <UART_SetConfig+0x43e>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0x3f4>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fc7 	.word	0x08003fc7
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fbf 	.word	0x08003fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fe f87e 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa6:	e014      	b.n	8003fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7fe f890 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fae:	e010      	b.n	8003fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb0:	4b5a      	ldr	r3, [pc, #360]	; (800411c <UART_SetConfig+0x594>)
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb4:	e00d      	b.n	8003fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb6:	f7fe f805 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8003fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fbc:	e009      	b.n	8003fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fc4:	e005      	b.n	8003fd2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8089 	beq.w	80040ec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	4a4e      	ldr	r2, [pc, #312]	; (8004118 <UART_SetConfig+0x590>)
 8003fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fec:	005a      	lsls	r2, r3, #1
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	441a      	add	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d916      	bls.n	8004034 <UART_SetConfig+0x4ac>
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d212      	bcs.n	8004034 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	b29b      	uxth	r3, r3
 8004012:	f023 030f 	bic.w	r3, r3, #15
 8004016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	b29a      	uxth	r2, r3
 8004024:	8bfb      	ldrh	r3, [r7, #30]
 8004026:	4313      	orrs	r3, r2
 8004028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	8bfa      	ldrh	r2, [r7, #30]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	e05b      	b.n	80040ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800403a:	e057      	b.n	80040ec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800403c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004040:	2b08      	cmp	r3, #8
 8004042:	d828      	bhi.n	8004096 <UART_SetConfig+0x50e>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0x4c4>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004071 	.word	0x08004071
 8004050:	08004079 	.word	0x08004079
 8004054:	08004081 	.word	0x08004081
 8004058:	08004097 	.word	0x08004097
 800405c:	08004087 	.word	0x08004087
 8004060:	08004097 	.word	0x08004097
 8004064:	08004097 	.word	0x08004097
 8004068:	08004097 	.word	0x08004097
 800406c:	0800408f 	.word	0x0800408f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004070:	f7fe f816 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8004074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004076:	e014      	b.n	80040a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7fe f828 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800407e:	e010      	b.n	80040a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004080:	4b26      	ldr	r3, [pc, #152]	; (800411c <UART_SetConfig+0x594>)
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004084:	e00d      	b.n	80040a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004086:	f7fd ff9d 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 800408a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800408c:	e009      	b.n	80040a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004094:	e005      	b.n	80040a2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040a0:	bf00      	nop
    }

    if (pclk != 0U)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d021      	beq.n	80040ec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <UART_SetConfig+0x590>)
 80040ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b2:	461a      	mov	r2, r3
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	441a      	add	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b0f      	cmp	r3, #15
 80040d0:	d909      	bls.n	80040e6 <UART_SetConfig+0x55e>
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d8:	d205      	bcs.n	80040e6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	e002      	b.n	80040ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004108:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800410c:	4618      	mov	r0, r3
 800410e:	3730      	adds	r7, #48	; 0x30
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop
 8004118:	08005808 	.word	0x08005808
 800411c:	00f42400 	.word	0x00f42400

08004120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01a      	beq.n	8004236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421e:	d10a      	bne.n	8004236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b098      	sub	sp, #96	; 0x60
 8004268:	af02      	add	r7, sp, #8
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004274:	f7fc fee4 	bl	8001040 <HAL_GetTick>
 8004278:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d12f      	bne.n	80042e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f88e 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d022      	beq.n	80042e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b6:	653b      	str	r3, [r7, #80]	; 0x50
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c0:	647b      	str	r3, [r7, #68]	; 0x44
 80042c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e063      	b.n	80043b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d149      	bne.n	800438a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	2200      	movs	r2, #0
 8004300:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f857 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d03c      	beq.n	800438a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	623b      	str	r3, [r7, #32]
   return(result);
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
 8004330:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e6      	bne.n	8004310 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3308      	adds	r3, #8
 8004348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	60fb      	str	r3, [r7, #12]
   return(result);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004362:	61fa      	str	r2, [r7, #28]
 8004364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	617b      	str	r3, [r7, #20]
   return(result);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e012      	b.n	80043b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3758      	adds	r7, #88	; 0x58
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c8:	e04f      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d04b      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fc fe35 	bl	8001040 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e04e      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d037      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d034      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d031      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d110      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2208      	movs	r2, #8
 800441a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f838 	bl	8004492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2208      	movs	r2, #8
 8004426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e029      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004444:	d111      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f81e 	bl	8004492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e00f      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d0a0      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004492:	b480      	push	{r7}
 8004494:	b095      	sub	sp, #84	; 0x54
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	61fb      	str	r3, [r7, #28]
   return(result);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e3      	bne.n	80044cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d118      	bne.n	800453e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	60bb      	str	r3, [r7, #8]
   return(result);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	647b      	str	r3, [r7, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	613b      	str	r3, [r7, #16]
   return(result);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e6      	bne.n	800450c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004552:	bf00      	nop
 8004554:	3754      	adds	r7, #84	; 0x54
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_UARTEx_DisableFifoMode+0x16>
 8004570:	2302      	movs	r3, #2
 8004572:	e027      	b.n	80045c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e02d      	b.n	8004644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f84f 	bl	80046c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e02d      	b.n	80046c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f811 	bl	80046c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d108      	bne.n	80046ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046e8:	e031      	b.n	800474e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046ea:	2308      	movs	r3, #8
 80046ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046ee:	2308      	movs	r3, #8
 80046f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	0e5b      	lsrs	r3, r3, #25
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	0f5b      	lsrs	r3, r3, #29
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004712:	7bbb      	ldrb	r3, [r7, #14]
 8004714:	7b3a      	ldrb	r2, [r7, #12]
 8004716:	4911      	ldr	r1, [pc, #68]	; (800475c <UARTEx_SetNbDataToProcess+0x94>)
 8004718:	5c8a      	ldrb	r2, [r1, r2]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800471e:	7b3a      	ldrb	r2, [r7, #12]
 8004720:	490f      	ldr	r1, [pc, #60]	; (8004760 <UARTEx_SetNbDataToProcess+0x98>)
 8004722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004724:	fb93 f3f2 	sdiv	r3, r3, r2
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	7b7a      	ldrb	r2, [r7, #13]
 8004734:	4909      	ldr	r1, [pc, #36]	; (800475c <UARTEx_SetNbDataToProcess+0x94>)
 8004736:	5c8a      	ldrb	r2, [r1, r2]
 8004738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800473c:	7b7a      	ldrb	r2, [r7, #13]
 800473e:	4908      	ldr	r1, [pc, #32]	; (8004760 <UARTEx_SetNbDataToProcess+0x98>)
 8004740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004742:	fb93 f3f2 	sdiv	r3, r3, r2
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	08005820 	.word	0x08005820
 8004760:	08005828 	.word	0x08005828

08004764 <LL_TIM_EnableCounter>:
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f043 0201 	orr.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_TIM_DisableCounter>:
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 0201 	bic.w	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_TIM_SetCounter>:
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <LL_TIM_GetCounter>:
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_TIM_SetAutoReload>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_TIM_CC_EnableChannel>:
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_TIM_CC_DisableChannel>:
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	43db      	mvns	r3, r3
 8004828:	401a      	ands	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <LL_TIM_OC_SetMode>:
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d02e      	beq.n	80048ac <LL_TIM_OC_SetMode+0x70>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d029      	beq.n	80048a8 <LL_TIM_OC_SetMode+0x6c>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b10      	cmp	r3, #16
 8004858:	d024      	beq.n	80048a4 <LL_TIM_OC_SetMode+0x68>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d01f      	beq.n	80048a0 <LL_TIM_OC_SetMode+0x64>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004866:	d019      	beq.n	800489c <LL_TIM_OC_SetMode+0x60>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486e:	d013      	beq.n	8004898 <LL_TIM_OC_SetMode+0x5c>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	d00d      	beq.n	8004894 <LL_TIM_OC_SetMode+0x58>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487e:	d007      	beq.n	8004890 <LL_TIM_OC_SetMode+0x54>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004886:	d101      	bne.n	800488c <LL_TIM_OC_SetMode+0x50>
 8004888:	2308      	movs	r3, #8
 800488a:	e010      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 800488c:	2309      	movs	r3, #9
 800488e:	e00e      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 8004890:	2307      	movs	r3, #7
 8004892:	e00c      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 8004894:	2306      	movs	r3, #6
 8004896:	e00a      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 8004898:	2305      	movs	r3, #5
 800489a:	e008      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 800489c:	2304      	movs	r3, #4
 800489e:	e006      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 80048a0:	2303      	movs	r3, #3
 80048a2:	e004      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e002      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <LL_TIM_OC_SetMode+0x72>
 80048ac:	2300      	movs	r3, #0
 80048ae:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3318      	adds	r3, #24
 80048b4:	4619      	mov	r1, r3
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	4a0e      	ldr	r2, [pc, #56]	; (80048f4 <LL_TIM_OC_SetMode+0xb8>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	440b      	add	r3, r1
 80048be:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	490c      	ldr	r1, [pc, #48]	; (80048f8 <LL_TIM_OC_SetMode+0xbc>)
 80048c8:	5ccb      	ldrb	r3, [r1, r3]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <LL_TIM_OC_SetMode+0xc0>)
 80048ce:	408b      	lsls	r3, r1
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	4908      	ldr	r1, [pc, #32]	; (80048f8 <LL_TIM_OC_SetMode+0xbc>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	4619      	mov	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	408b      	lsls	r3, r1
 80048e0:	431a      	orrs	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	08005830 	.word	0x08005830
 80048f8:	0800583c 	.word	0x0800583c
 80048fc:	00010073 	.word	0x00010073

08004900 <LL_TIM_OC_SetCompareCH1>:
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_TIM_OC_SetCompareCH2>:
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_TIM_OC_SetCompareCH3>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_TIM_EnableAllOutputs>:
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <PMSM_MotorSpeedIsOK>:
volatile static int8_t PMSM_Timing = 10; // 15 * 1.875 = 28.125 degrees

#define TIMxCCER_MASK_CH123       (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 )
#define TIMxCCER_MASK_CH1N2N3N    (LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N)

static uint8_t PMSM_MotorSpeedIsOK(void) {
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
	return ((PMSM_Speed_prev > 0) & (PMSM_Speed > 0));
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <PMSM_MotorSpeedIsOK+0x34>)
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2da      	uxtb	r2, r3
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <PMSM_MotorSpeedIsOK+0x38>)
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	4013      	ands	r3, r2
 800499a:	b2db      	uxtb	r3, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000210 	.word	0x20000210
 80049ac:	20000212 	.word	0x20000212

080049b0 <PMSM_GetState>:

// Get index in sine table based on the sensor data, the timing and the direction of rotor rotation
static uint8_t	PMSM_GetState( uint8_t hallPos ){
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
	int16_t index;

	if( PMSM_MotorSpin == PMSM_CW ){
 80049ba:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <PMSM_GetState+0x68>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <PMSM_GetState+0x1e>
		index = PMSM_STATE_TABLE_INDEX_FORWARD[ hallPos ];
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <PMSM_GetState+0x6c>)
 80049c8:	5cd3      	ldrb	r3, [r2, r3]
 80049ca:	81fb      	strh	r3, [r7, #14]
 80049cc:	e003      	b.n	80049d6 <PMSM_GetState+0x26>
	}else{
		index = PMSM_STATE_TABLE_INDEX_BACKWARD[ hallPos ];
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <PMSM_GetState+0x70>)
 80049d2:	5cd3      	ldrb	r3, [r2, r3]
 80049d4:	81fb      	strh	r3, [r7, #14]
	}

	index = index + ( int16_t )PMSM_Timing;
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <PMSM_GetState+0x74>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	b25b      	sxtb	r3, r3
 80049dc:	b29a      	uxth	r2, r3
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	4413      	add	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	81fb      	strh	r3, [r7, #14]

	if( index > PMSM_SINTABLESIZE - 1 ){
 80049e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049ea:	2bbf      	cmp	r3, #191	; 0xbf
 80049ec:	dd04      	ble.n	80049f8 <PMSM_GetState+0x48>
		index = index - PMSM_SINTABLESIZE;
 80049ee:	89fb      	ldrh	r3, [r7, #14]
 80049f0:	3bc0      	subs	r3, #192	; 0xc0
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	81fb      	strh	r3, [r7, #14]
 80049f6:	e007      	b.n	8004a08 <PMSM_GetState+0x58>
	}else{
		if( index < 0 ){
 80049f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da03      	bge.n	8004a08 <PMSM_GetState+0x58>
			index = index + PMSM_SINTABLESIZE;
 8004a00:	89fb      	ldrh	r3, [r7, #14]
 8004a02:	33c0      	adds	r3, #192	; 0xc0
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	81fb      	strh	r3, [r7, #14]
		}
	}

	return index;
 8004a08:	89fb      	ldrh	r3, [r7, #14]
 8004a0a:	b2db      	uxtb	r3, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	20000219 	.word	0x20000219
 8004a1c:	08005ae8 	.word	0x08005ae8
 8004a20:	08005af0 	.word	0x08005af0
 8004a24:	2000000c 	.word	0x2000000c

08004a28 <PMSM_SetPWM_UVW>:

void PMSM_SetPWM_UVW(uint16_t PWM1, uint16_t PWM2, uint16_t PWM3){
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	80fb      	strh	r3, [r7, #6]
 8004a32:	460b      	mov	r3, r1
 8004a34:	80bb      	strh	r3, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	807b      	strh	r3, [r7, #2]
	if (PMSM_ModeEnabled == 1) {
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <PMSM_SetPWM_UVW+0x3c>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d108      	bne.n	8004a56 <PMSM_SetPWM_UVW+0x2e>
		TIM1->CCR1 = PWM1;
 8004a44:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <PMSM_SetPWM_UVW+0x40>)
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = PWM2;
 8004a4a:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <PMSM_SetPWM_UVW+0x40>)
 8004a4c:	88bb      	ldrh	r3, [r7, #4]
 8004a4e:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = PWM3;
 8004a50:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <PMSM_SetPWM_UVW+0x40>)
 8004a52:	887b      	ldrh	r3, [r7, #2]
 8004a54:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000214 	.word	0x20000214
 8004a68:	40012c00 	.word	0x40012c00

08004a6c <pmsm_init>:


void pmsm_init(){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	//1. hall sensor initialized in MX_GPIO_Init
	//2. pwm timer initialized in MX_TIM4_Init
	//3. PMSM_SinTimerInit in MX_TIM4_Init
	//4. PMSM_SpeedTimerInit in MX_TIM3_Init
	//5. initalize pwm channels.
	LL_TIM_OC_SetMode( TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 8004a70:	2260      	movs	r2, #96	; 0x60
 8004a72:	2101      	movs	r1, #1
 8004a74:	4813      	ldr	r0, [pc, #76]	; (8004ac4 <pmsm_init+0x58>)
 8004a76:	f7ff fee1 	bl	800483c <LL_TIM_OC_SetMode>
	LL_TIM_OC_SetMode( TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 8004a7a:	2260      	movs	r2, #96	; 0x60
 8004a7c:	2110      	movs	r1, #16
 8004a7e:	4811      	ldr	r0, [pc, #68]	; (8004ac4 <pmsm_init+0x58>)
 8004a80:	f7ff fedc 	bl	800483c <LL_TIM_OC_SetMode>
	LL_TIM_OC_SetMode( TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 8004a84:	2260      	movs	r2, #96	; 0x60
 8004a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a8a:	480e      	ldr	r0, [pc, #56]	; (8004ac4 <pmsm_init+0x58>)
 8004a8c:	f7ff fed6 	bl	800483c <LL_TIM_OC_SetMode>
	LL_TIM_EnableCounter( TIM1 );
 8004a90:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <pmsm_init+0x58>)
 8004a92:	f7ff fe67 	bl	8004764 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel( TIM1, TIMxCCER_MASK_CH123 | TIMxCCER_MASK_CH1N2N3N );
 8004a96:	f240 5155 	movw	r1, #1365	; 0x555
 8004a9a:	480a      	ldr	r0, [pc, #40]	; (8004ac4 <pmsm_init+0x58>)
 8004a9c:	f7ff feaa 	bl	80047f4 <LL_TIM_CC_EnableChannel>
	// charge capacitors
	LL_TIM_OC_SetCompareCH1(TIM1, 0u);
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4808      	ldr	r0, [pc, #32]	; (8004ac4 <pmsm_init+0x58>)
 8004aa4:	f7ff ff2c 	bl	8004900 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_OC_SetCompareCH2(TIM1, 0u);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4806      	ldr	r0, [pc, #24]	; (8004ac4 <pmsm_init+0x58>)
 8004aac:	f7ff ff36 	bl	800491c <LL_TIM_OC_SetCompareCH2>
	LL_TIM_OC_SetCompareCH3(TIM1, 0u);
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4804      	ldr	r0, [pc, #16]	; (8004ac4 <pmsm_init+0x58>)
 8004ab4:	f7ff ff40 	bl	8004938 <LL_TIM_OC_SetCompareCH3>
	LL_TIM_EnableAllOutputs(TIM1);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <pmsm_init+0x58>)
 8004aba:	f7ff ff4b 	bl	8004954 <LL_TIM_EnableAllOutputs>
//	pmsm_motor_stop();
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00

08004ac8 <pmsm_EXTI9_5_IRQHandler>:


void pmsm_EXTI9_5_IRQHandler(void){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
  if ( ( __HAL_GPIO_EXTI_GET_IT(HALL_H1_Pin) | __HAL_GPIO_EXTI_GET_IT(HALL_H2_Pin) | __HAL_GPIO_EXTI_GET_IT(HALL_H3_Pin) ) != 0x00u)
 8004ace:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <pmsm_EXTI9_5_IRQHandler+0xf4>)
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8004ad6:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <pmsm_EXTI9_5_IRQHandler+0xf4>)
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <pmsm_EXTI9_5_IRQHandler+0xf4>)
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d062      	beq.n	8004bb4 <pmsm_EXTI9_5_IRQHandler+0xec>
    {
      __HAL_GPIO_EXTI_CLEAR_IT(HALL_H1_Pin);
 8004aee:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <pmsm_EXTI9_5_IRQHandler+0xf4>)
 8004af0:	2240      	movs	r2, #64	; 0x40
 8004af2:	615a      	str	r2, [r3, #20]
      __HAL_GPIO_EXTI_CLEAR_IT(HALL_H2_Pin);
 8004af4:	4b31      	ldr	r3, [pc, #196]	; (8004bbc <pmsm_EXTI9_5_IRQHandler+0xf4>)
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	615a      	str	r2, [r3, #20]
      __HAL_GPIO_EXTI_CLEAR_IT(HALL_H3_Pin);
 8004afa:	4b30      	ldr	r3, [pc, #192]	; (8004bbc <pmsm_EXTI9_5_IRQHandler+0xf4>)
 8004afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b00:	615a      	str	r2, [r3, #20]

      PMSM_Sensors = pmsm_hall_sensors_get_position();
 8004b02:	f000 f953 	bl	8004dac <pmsm_hall_sensors_get_position>
 8004b06:	4603      	mov	r3, r0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <pmsm_EXTI9_5_IRQHandler+0xf8>)
 8004b0c:	701a      	strb	r2, [r3, #0]
      PMSM_Speed_prev = PMSM_Speed;
 8004b0e:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <pmsm_EXTI9_5_IRQHandler+0xfc>)
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	4b2c      	ldr	r3, [pc, #176]	; (8004bc8 <pmsm_EXTI9_5_IRQHandler+0x100>)
 8004b16:	801a      	strh	r2, [r3, #0]
      // Get rotation time (in inverse ratio speed) from timer TIM3
      PMSM_Speed = LL_TIM_GetCounter( TIM3 );
 8004b18:	482c      	ldr	r0, [pc, #176]	; (8004bcc <pmsm_EXTI9_5_IRQHandler+0x104>)
 8004b1a:	f7ff fe51 	bl	80047c0 <LL_TIM_GetCounter>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <pmsm_EXTI9_5_IRQHandler+0xfc>)
 8004b24:	801a      	strh	r2, [r3, #0]
//      LL_TIM_EnableCounter( TIM3 );
      LL_TIM_SetCounter( TIM3, 0 );
 8004b26:	2100      	movs	r1, #0
 8004b28:	4828      	ldr	r0, [pc, #160]	; (8004bcc <pmsm_EXTI9_5_IRQHandler+0x104>)
 8004b2a:	f7ff fe3b 	bl	80047a4 <LL_TIM_SetCounter>
      HAL_TIM_Base_Start_IT( &htim3 );
 8004b2e:	4828      	ldr	r0, [pc, #160]	; (8004bd0 <pmsm_EXTI9_5_IRQHandler+0x108>)
 8004b30:	f7fd fd70 	bl	8002614 <HAL_TIM_Base_Start_IT>

      // It requires at least two measurement to correct calculate the rotor speed
      if( PMSM_MotorSpeedIsOK() ){
 8004b34:	f7ff ff1e 	bl	8004974 <PMSM_MotorSpeedIsOK>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <pmsm_EXTI9_5_IRQHandler+0x98>
    	  LL_TIM_SetCounter( TIM4, 0 );
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4824      	ldr	r0, [pc, #144]	; (8004bd4 <pmsm_EXTI9_5_IRQHandler+0x10c>)
 8004b42:	f7ff fe2f 	bl	80047a4 <LL_TIM_SetCounter>
    	  uint16_t arr4 = PMSM_Speed / 32;//32 - number of items in the sine table between commutations (192/6 = 32)
 8004b46:	4b1f      	ldr	r3, [pc, #124]	; (8004bc4 <pmsm_EXTI9_5_IRQHandler+0xfc>)
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	80fb      	strh	r3, [r7, #6]
    	  LL_TIM_SetAutoReload( TIM4, arr4 );
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	4619      	mov	r1, r3
 8004b54:	481f      	ldr	r0, [pc, #124]	; (8004bd4 <pmsm_EXTI9_5_IRQHandler+0x10c>)
 8004b56:	f7ff fe3f 	bl	80047d8 <LL_TIM_SetAutoReload>
//    	  LL_TIM_EnableCounter( TIM4 );
    	  HAL_TIM_Base_Start_IT( &htim4 );
 8004b5a:	481f      	ldr	r0, [pc, #124]	; (8004bd8 <pmsm_EXTI9_5_IRQHandler+0x110>)
 8004b5c:	f7fd fd5a 	bl	8002614 <HAL_TIM_Base_Start_IT>
      }

      if ((PMSM_Sensors > 0 ) & (PMSM_Sensors < 7)) {
 8004b60:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <pmsm_EXTI9_5_IRQHandler+0xf8>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <pmsm_EXTI9_5_IRQHandler+0xf8>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	bf94      	ite	ls
 8004b7a:	2301      	movls	r3, #1
 8004b7c:	2300      	movhi	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	4013      	ands	r3, r2
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <pmsm_EXTI9_5_IRQHandler+0xd4>
			// Do a phase correction
			PMSM_SinTableIndex = PMSM_GetState(PMSM_Sensors);
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <pmsm_EXTI9_5_IRQHandler+0xf8>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff0e 	bl	80049b0 <PMSM_GetState>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <pmsm_EXTI9_5_IRQHandler+0x114>)
 8004b9a:	701a      	strb	r2, [r3, #0]
      }

      if ( PMSM_ModeEnabled == 0 ) {
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <pmsm_EXTI9_5_IRQHandler+0x118>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <pmsm_EXTI9_5_IRQHandler+0xec>
    	  pmsm_motor_commutation( PMSM_Sensors );
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <pmsm_EXTI9_5_IRQHandler+0xf8>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f910 	bl	8004dd4 <pmsm_motor_commutation>
      }
    }

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	2000020e 	.word	0x2000020e
 8004bc4:	20000212 	.word	0x20000212
 8004bc8:	20000210 	.word	0x20000210
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	200000d8 	.word	0x200000d8
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	20000124 	.word	0x20000124
 8004bdc:	20000218 	.word	0x20000218
 8004be0:	20000214 	.word	0x20000214

08004be4 <pmsm_sin_table_timer4_handler>:

uint16_t sPWM1, sPWM2, sPWM3;

void pmsm_sin_table_timer4_handler(){
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
	uint16_t PWM1, PWM2, PWM3;

	if ( PMSM_ModeEnabled == 0 ) {
 8004bea:	4b4a      	ldr	r3, [pc, #296]	; (8004d14 <pmsm_sin_table_timer4_handler+0x130>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d11f      	bne.n	8004c34 <pmsm_sin_table_timer4_handler+0x50>
		// Turn PWM outputs for working with sine wave
		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 8004bf4:	2260      	movs	r2, #96	; 0x60
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4847      	ldr	r0, [pc, #284]	; (8004d18 <pmsm_sin_table_timer4_handler+0x134>)
 8004bfa:	f7ff fe1f 	bl	800483c <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N );
 8004bfe:	2105      	movs	r1, #5
 8004c00:	4845      	ldr	r0, [pc, #276]	; (8004d18 <pmsm_sin_table_timer4_handler+0x134>)
 8004c02:	f7ff fdf7 	bl	80047f4 <LL_TIM_CC_EnableChannel>

		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 8004c06:	2260      	movs	r2, #96	; 0x60
 8004c08:	2110      	movs	r1, #16
 8004c0a:	4843      	ldr	r0, [pc, #268]	; (8004d18 <pmsm_sin_table_timer4_handler+0x134>)
 8004c0c:	f7ff fe16 	bl	800483c <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH2N );
 8004c10:	2150      	movs	r1, #80	; 0x50
 8004c12:	4841      	ldr	r0, [pc, #260]	; (8004d18 <pmsm_sin_table_timer4_handler+0x134>)
 8004c14:	f7ff fdee 	bl	80047f4 <LL_TIM_CC_EnableChannel>

		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 8004c18:	2260      	movs	r2, #96	; 0x60
 8004c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c1e:	483e      	ldr	r0, [pc, #248]	; (8004d18 <pmsm_sin_table_timer4_handler+0x134>)
 8004c20:	f7ff fe0c 	bl	800483c <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N );
 8004c24:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8004c28:	483b      	ldr	r0, [pc, #236]	; (8004d18 <pmsm_sin_table_timer4_handler+0x134>)
 8004c2a:	f7ff fde3 	bl	80047f4 <LL_TIM_CC_EnableChannel>

		PMSM_ModeEnabled = 1;
 8004c2e:	4b39      	ldr	r3, [pc, #228]	; (8004d14 <pmsm_sin_table_timer4_handler+0x130>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
	}

	PWM1 = (uint16_t)( (uint32_t)PMSM_PWM * PMSM_SINTABLE[ PMSM_SinTableIndex ][ 0 ] / 255 );
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <pmsm_sin_table_timer4_handler+0x138>)
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	4b38      	ldr	r3, [pc, #224]	; (8004d20 <pmsm_sin_table_timer4_handler+0x13c>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	4619      	mov	r1, r3
 8004c44:	4a37      	ldr	r2, [pc, #220]	; (8004d24 <pmsm_sin_table_timer4_handler+0x140>)
 8004c46:	460b      	mov	r3, r1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	440b      	add	r3, r1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	fb00 f303 	mul.w	r3, r0, r3
 8004c54:	4a34      	ldr	r2, [pc, #208]	; (8004d28 <pmsm_sin_table_timer4_handler+0x144>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	09db      	lsrs	r3, r3, #7
 8004c5c:	80fb      	strh	r3, [r7, #6]
	PWM2 = (uint16_t)( (uint32_t)PMSM_PWM * PMSM_SINTABLE[ PMSM_SinTableIndex ][ 1 ] / 255 );
 8004c5e:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <pmsm_sin_table_timer4_handler+0x138>)
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4618      	mov	r0, r3
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <pmsm_sin_table_timer4_handler+0x13c>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <pmsm_sin_table_timer4_handler+0x140>)
 8004c70:	460b      	mov	r3, r1
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	440b      	add	r3, r1
 8004c76:	4413      	add	r3, r2
 8004c78:	3301      	adds	r3, #1
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	fb00 f303 	mul.w	r3, r0, r3
 8004c80:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <pmsm_sin_table_timer4_handler+0x144>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	09db      	lsrs	r3, r3, #7
 8004c88:	80bb      	strh	r3, [r7, #4]
	PWM3 = (uint16_t)( (uint32_t)PMSM_PWM * PMSM_SINTABLE[ PMSM_SinTableIndex ][ 2 ] / 255 );
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <pmsm_sin_table_timer4_handler+0x138>)
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4618      	mov	r0, r3
 8004c92:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <pmsm_sin_table_timer4_handler+0x13c>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4a22      	ldr	r2, [pc, #136]	; (8004d24 <pmsm_sin_table_timer4_handler+0x140>)
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	440b      	add	r3, r1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	fb00 f303 	mul.w	r3, r0, r3
 8004cac:	4a1e      	ldr	r2, [pc, #120]	; (8004d28 <pmsm_sin_table_timer4_handler+0x144>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	09db      	lsrs	r3, r3, #7
 8004cb4:	807b      	strh	r3, [r7, #2]

	if (PMSM_MotorSpin == PMSM_CW) {
 8004cb6:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <pmsm_sin_table_timer4_handler+0x148>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <pmsm_sin_table_timer4_handler+0xea>
		// Forward rotation
		PMSM_SetPWM_UVW(PWM1, PWM2, PWM3);
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	88b9      	ldrh	r1, [r7, #4]
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff feae 	bl	8004a28 <PMSM_SetPWM_UVW>
 8004ccc:	e005      	b.n	8004cda <pmsm_sin_table_timer4_handler+0xf6>
	}
	else {
		// Backward rotation
		PMSM_SetPWM_UVW(PWM1, PWM3, PWM2);
 8004cce:	88ba      	ldrh	r2, [r7, #4]
 8004cd0:	8879      	ldrh	r1, [r7, #2]
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fea7 	bl	8004a28 <PMSM_SetPWM_UVW>
	}

	// Increment position in sine table
	PMSM_SinTableIndex++;
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <pmsm_sin_table_timer4_handler+0x13c>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <pmsm_sin_table_timer4_handler+0x13c>)
 8004ce6:	701a      	strb	r2, [r3, #0]

	if (PMSM_SinTableIndex > PMSM_SINTABLESIZE-1) {
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <pmsm_sin_table_timer4_handler+0x13c>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2bbf      	cmp	r3, #191	; 0xbf
 8004cf0:	d902      	bls.n	8004cf8 <pmsm_sin_table_timer4_handler+0x114>
		PMSM_SinTableIndex = 0;
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <pmsm_sin_table_timer4_handler+0x13c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
	}

	sPWM1 = PWM1;
 8004cf8:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <pmsm_sin_table_timer4_handler+0x14c>)
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	8013      	strh	r3, [r2, #0]
	sPWM2 = PWM2;
 8004cfe:	4a0d      	ldr	r2, [pc, #52]	; (8004d34 <pmsm_sin_table_timer4_handler+0x150>)
 8004d00:	88bb      	ldrh	r3, [r7, #4]
 8004d02:	8013      	strh	r3, [r2, #0]
	sPWM3 = PWM3;
 8004d04:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <pmsm_sin_table_timer4_handler+0x154>)
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	8013      	strh	r3, [r2, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000214 	.word	0x20000214
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	20000216 	.word	0x20000216
 8004d20:	20000218 	.word	0x20000218
 8004d24:	080058a8 	.word	0x080058a8
 8004d28:	80808081 	.word	0x80808081
 8004d2c:	20000219 	.word	0x20000219
 8004d30:	2000021a 	.word	0x2000021a
 8004d34:	2000021c 	.word	0x2000021c
 8004d38:	2000021e 	.word	0x2000021e

08004d3c <pmsm_timer3_update_handler>:

void pmsm_timer3_update_handler(){
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
	// Overflow - the motor is stopped
	if (PMSM_MotorSpeedIsOK()) {
 8004d40:	f7ff fe18 	bl	8004974 <PMSM_MotorSpeedIsOK>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <pmsm_timer3_update_handler+0x12>
		pmsm_motor_stop();
 8004d4a:	f000 f803 	bl	8004d54 <pmsm_motor_stop>
	}
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <pmsm_motor_stop>:

void pmsm_motor_stop(){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
	pmsm_set_PWM( 0 );
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f000 f8eb 	bl	8004f34 <pmsm_set_PWM>
	LL_TIM_CC_EnableChannel( TIM1, TIMxCCER_MASK_CH123 | TIMxCCER_MASK_CH1N2N3N );
 8004d5e:	f240 5155 	movw	r1, #1365	; 0x555
 8004d62:	480b      	ldr	r0, [pc, #44]	; (8004d90 <pmsm_motor_stop+0x3c>)
 8004d64:	f7ff fd46 	bl	80047f4 <LL_TIM_CC_EnableChannel>

	LL_TIM_DisableCounter( TIM3 );
 8004d68:	480a      	ldr	r0, [pc, #40]	; (8004d94 <pmsm_motor_stop+0x40>)
 8004d6a:	f7ff fd0b 	bl	8004784 <LL_TIM_DisableCounter>
	LL_TIM_DisableCounter( TIM4 );
 8004d6e:	480a      	ldr	r0, [pc, #40]	; (8004d98 <pmsm_motor_stop+0x44>)
 8004d70:	f7ff fd08 	bl	8004784 <LL_TIM_DisableCounter>
	PMSM_Speed = 0;
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <pmsm_motor_stop+0x48>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	801a      	strh	r2, [r3, #0]
	PMSM_Speed_prev = 0;
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <pmsm_motor_stop+0x4c>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	801a      	strh	r2, [r3, #0]
	PMSM_MotorRunFlag = 0;
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <pmsm_motor_stop+0x50>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
	PMSM_ModeEnabled = 0;
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <pmsm_motor_stop+0x54>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	20000212 	.word	0x20000212
 8004da0:	20000210 	.word	0x20000210
 8004da4:	20000215 	.word	0x20000215
 8004da8:	20000214 	.word	0x20000214

08004dac <pmsm_hall_sensors_get_position>:

uint8_t pmsm_hall_sensors_get_position(){
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
	uint8_t hallpos = ((GPIOB->IDR & 0b111000000) >> 6);
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pmsm_hall_sensors_get_position+0x24>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	71fb      	strb	r3, [r7, #7]
//	printf(">> st:%u\r\n", hallpos);
	return hallpos;
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	48000400 	.word	0x48000400

08004dd4 <pmsm_motor_commutation>:

void pmsm_motor_commutation( uint16_t hall_pos ){
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80fb      	strh	r3, [r7, #6]
	if (PMSM_MotorSpin == PMSM_CW) {
 8004dde:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <pmsm_motor_commutation+0x134>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10c      	bne.n	8004e02 <pmsm_motor_commutation+0x2e>
		memcpy(PMSM_State, BLDC_BRIDGE_STATE_FORWARD[hall_pos], sizeof(PMSM_State));
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4a46      	ldr	r2, [pc, #280]	; (8004f0c <pmsm_motor_commutation+0x138>)
 8004df4:	441a      	add	r2, r3
 8004df6:	4b46      	ldr	r3, [pc, #280]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004df8:	6810      	ldr	r0, [r2, #0]
 8004dfa:	6018      	str	r0, [r3, #0]
 8004dfc:	8892      	ldrh	r2, [r2, #4]
 8004dfe:	809a      	strh	r2, [r3, #4]
 8004e00:	e00b      	b.n	8004e1a <pmsm_motor_commutation+0x46>
	}
	else {
		memcpy(PMSM_State, PMSM_BRIDGE_STATE_BACKWARD[hall_pos], sizeof(PMSM_State));
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4a41      	ldr	r2, [pc, #260]	; (8004f14 <pmsm_motor_commutation+0x140>)
 8004e0e:	441a      	add	r2, r3
 8004e10:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004e12:	6810      	ldr	r0, [r2, #0]
 8004e14:	6018      	str	r0, [r3, #0]
 8004e16:	8892      	ldrh	r2, [r2, #4]
 8004e18:	809a      	strh	r2, [r3, #4]
	}

	if (PMSM_State[UH]) {
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <pmsm_motor_commutation+0x62>
		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 8004e22:	2260      	movs	r2, #96	; 0x60
 8004e24:	2101      	movs	r1, #1
 8004e26:	483c      	ldr	r0, [pc, #240]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e28:	f7ff fd08 	bl	800483c <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N );
 8004e2c:	2105      	movs	r1, #5
 8004e2e:	483a      	ldr	r0, [pc, #232]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e30:	f7ff fce0 	bl	80047f4 <LL_TIM_CC_EnableChannel>
 8004e34:	e015      	b.n	8004e62 <pmsm_motor_commutation+0x8e>
	} else {
		// Low side FET: OFF
		LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8004e36:	2101      	movs	r1, #1
 8004e38:	4837      	ldr	r0, [pc, #220]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e3a:	f7ff fcec 	bl	8004816 <LL_TIM_CC_DisableChannel>

		if (PMSM_State[UL]){
 8004e3e:	4b34      	ldr	r3, [pc, #208]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <pmsm_motor_commutation+0x86>
			// High side FET: ON
			LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_FORCED_ACTIVE );
 8004e46:	2250      	movs	r2, #80	; 0x50
 8004e48:	2101      	movs	r1, #1
 8004e4a:	4833      	ldr	r0, [pc, #204]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e4c:	f7ff fcf6 	bl	800483c <LL_TIM_OC_SetMode>
			LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N );
 8004e50:	2104      	movs	r1, #4
 8004e52:	4831      	ldr	r0, [pc, #196]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e54:	f7ff fcce 	bl	80047f4 <LL_TIM_CC_EnableChannel>
 8004e58:	e003      	b.n	8004e62 <pmsm_motor_commutation+0x8e>
		} else {
			// High side FET: OFF
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	482e      	ldr	r0, [pc, #184]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e5e:	f7ff fcda 	bl	8004816 <LL_TIM_CC_DisableChannel>
		}
	}

	if (PMSM_State[VH]) {
 8004e62:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004e64:	789b      	ldrb	r3, [r3, #2]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <pmsm_motor_commutation+0xaa>
		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 8004e6a:	2260      	movs	r2, #96	; 0x60
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	482a      	ldr	r0, [pc, #168]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e70:	f7ff fce4 	bl	800483c <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH2N );
 8004e74:	2150      	movs	r1, #80	; 0x50
 8004e76:	4828      	ldr	r0, [pc, #160]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e78:	f7ff fcbc 	bl	80047f4 <LL_TIM_CC_EnableChannel>
 8004e7c:	e015      	b.n	8004eaa <pmsm_motor_commutation+0xd6>
	} else {
		// Low side FET: OFF
		LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8004e7e:	2110      	movs	r1, #16
 8004e80:	4825      	ldr	r0, [pc, #148]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e82:	f7ff fcc8 	bl	8004816 <LL_TIM_CC_DisableChannel>

		if (PMSM_State[VL]){
 8004e86:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004e88:	78db      	ldrb	r3, [r3, #3]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <pmsm_motor_commutation+0xce>
			// High side FET: ON
			LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2N, LL_TIM_OCMODE_FORCED_ACTIVE );
 8004e8e:	2250      	movs	r2, #80	; 0x50
 8004e90:	2140      	movs	r1, #64	; 0x40
 8004e92:	4821      	ldr	r0, [pc, #132]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e94:	f7ff fcd2 	bl	800483c <LL_TIM_OC_SetMode>
			LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2N );
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	481f      	ldr	r0, [pc, #124]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004e9c:	f7ff fcaa 	bl	80047f4 <LL_TIM_CC_EnableChannel>
 8004ea0:	e003      	b.n	8004eaa <pmsm_motor_commutation+0xd6>
		} else {
			// High side FET: OFF
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2N );
 8004ea2:	2140      	movs	r1, #64	; 0x40
 8004ea4:	481c      	ldr	r0, [pc, #112]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004ea6:	f7ff fcb6 	bl	8004816 <LL_TIM_CC_DisableChannel>
		}
	}

	if (PMSM_State[WH]) {
 8004eaa:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004eac:	791b      	ldrb	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <pmsm_motor_commutation+0xf6>
		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 8004eb2:	2260      	movs	r2, #96	; 0x60
 8004eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eb8:	4817      	ldr	r0, [pc, #92]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004eba:	f7ff fcbf 	bl	800483c <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N );
 8004ebe:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8004ec2:	4815      	ldr	r0, [pc, #84]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004ec4:	f7ff fc96 	bl	80047f4 <LL_TIM_CC_EnableChannel>
		} else {
			// High side FET: OFF
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N );
		}
	}
}
 8004ec8:	e019      	b.n	8004efe <pmsm_motor_commutation+0x12a>
		LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3 );
 8004eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ece:	4812      	ldr	r0, [pc, #72]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004ed0:	f7ff fca1 	bl	8004816 <LL_TIM_CC_DisableChannel>
		if (PMSM_State[WL]){
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <pmsm_motor_commutation+0x13c>)
 8004ed6:	795b      	ldrb	r3, [r3, #5]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <pmsm_motor_commutation+0x120>
			LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_FORCED_ACTIVE );
 8004edc:	2250      	movs	r2, #80	; 0x50
 8004ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ee2:	480d      	ldr	r0, [pc, #52]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004ee4:	f7ff fcaa 	bl	800483c <LL_TIM_OC_SetMode>
			LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3N );
 8004ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eec:	480a      	ldr	r0, [pc, #40]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004eee:	f7ff fc81 	bl	80047f4 <LL_TIM_CC_EnableChannel>
}
 8004ef2:	e004      	b.n	8004efe <pmsm_motor_commutation+0x12a>
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N );
 8004ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ef8:	4807      	ldr	r0, [pc, #28]	; (8004f18 <pmsm_motor_commutation+0x144>)
 8004efa:	f7ff fc8c 	bl	8004816 <LL_TIM_CC_DisableChannel>
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000219 	.word	0x20000219
 8004f0c:	08005848 	.word	0x08005848
 8004f10:	20000208 	.word	0x20000208
 8004f14:	08005878 	.word	0x08005878
 8004f18:	40012c00 	.word	0x40012c00

08004f1c <pmsm_motor_set_run>:

void pmsm_motor_set_run(void){
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	PMSM_MotorRunFlag = 1;
 8004f20:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <pmsm_motor_set_run+0x14>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
}
 8004f26:	bf00      	nop
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	20000215 	.word	0x20000215

08004f34 <pmsm_set_PWM>:

void pmsm_set_PWM(uint16_t PWM){
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	80fb      	strh	r3, [r7, #6]
	if ( PMSM_ModeEnabled == 0 ) {
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <pmsm_set_PWM+0x3c>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <pmsm_set_PWM+0x28>
		TIM1->CCR1 = PWM;
 8004f48:	4a0a      	ldr	r2, [pc, #40]	; (8004f74 <pmsm_set_PWM+0x40>)
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = PWM;
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <pmsm_set_PWM+0x40>)
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = PWM;
 8004f54:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <pmsm_set_PWM+0x40>)
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	63d3      	str	r3, [r2, #60]	; 0x3c
	} else {
		PMSM_PWM = PWM;
	}
}
 8004f5a:	e002      	b.n	8004f62 <pmsm_set_PWM+0x2e>
		PMSM_PWM = PWM;
 8004f5c:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <pmsm_set_PWM+0x44>)
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	8013      	strh	r3, [r2, #0]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000214 	.word	0x20000214
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	20000216 	.word	0x20000216

08004f7c <std>:
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	4604      	mov	r4, r0
 8004f82:	e9c0 3300 	strd	r3, r3, [r0]
 8004f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f8a:	6083      	str	r3, [r0, #8]
 8004f8c:	8181      	strh	r1, [r0, #12]
 8004f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f90:	81c2      	strh	r2, [r0, #14]
 8004f92:	6183      	str	r3, [r0, #24]
 8004f94:	4619      	mov	r1, r3
 8004f96:	2208      	movs	r2, #8
 8004f98:	305c      	adds	r0, #92	; 0x5c
 8004f9a:	f000 f9aa 	bl	80052f2 <memset>
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <std+0x58>)
 8004fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <std+0x5c>)
 8004fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <std+0x60>)
 8004fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <std+0x64>)
 8004fac:	6323      	str	r3, [r4, #48]	; 0x30
 8004fae:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <std+0x68>)
 8004fb0:	6224      	str	r4, [r4, #32]
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	d006      	beq.n	8004fc4 <std+0x48>
 8004fb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004fba:	4294      	cmp	r4, r2
 8004fbc:	d002      	beq.n	8004fc4 <std+0x48>
 8004fbe:	33d0      	adds	r3, #208	; 0xd0
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	d105      	bne.n	8004fd0 <std+0x54>
 8004fc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fcc:	f000 ba0a 	b.w	80053e4 <__retarget_lock_init_recursive>
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bf00      	nop
 8004fd4:	0800526d 	.word	0x0800526d
 8004fd8:	0800528f 	.word	0x0800528f
 8004fdc:	080052c7 	.word	0x080052c7
 8004fe0:	080052eb 	.word	0x080052eb
 8004fe4:	20000220 	.word	0x20000220

08004fe8 <stdio_exit_handler>:
 8004fe8:	4a02      	ldr	r2, [pc, #8]	; (8004ff4 <stdio_exit_handler+0xc>)
 8004fea:	4903      	ldr	r1, [pc, #12]	; (8004ff8 <stdio_exit_handler+0x10>)
 8004fec:	4803      	ldr	r0, [pc, #12]	; (8004ffc <stdio_exit_handler+0x14>)
 8004fee:	f000 b869 	b.w	80050c4 <_fwalk_sglue>
 8004ff2:	bf00      	nop
 8004ff4:	20000010 	.word	0x20000010
 8004ff8:	080056f9 	.word	0x080056f9
 8004ffc:	2000001c 	.word	0x2000001c

08005000 <cleanup_stdio>:
 8005000:	6841      	ldr	r1, [r0, #4]
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <cleanup_stdio+0x34>)
 8005004:	4299      	cmp	r1, r3
 8005006:	b510      	push	{r4, lr}
 8005008:	4604      	mov	r4, r0
 800500a:	d001      	beq.n	8005010 <cleanup_stdio+0x10>
 800500c:	f000 fb74 	bl	80056f8 <_fflush_r>
 8005010:	68a1      	ldr	r1, [r4, #8]
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <cleanup_stdio+0x38>)
 8005014:	4299      	cmp	r1, r3
 8005016:	d002      	beq.n	800501e <cleanup_stdio+0x1e>
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fb6d 	bl	80056f8 <_fflush_r>
 800501e:	68e1      	ldr	r1, [r4, #12]
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <cleanup_stdio+0x3c>)
 8005022:	4299      	cmp	r1, r3
 8005024:	d004      	beq.n	8005030 <cleanup_stdio+0x30>
 8005026:	4620      	mov	r0, r4
 8005028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800502c:	f000 bb64 	b.w	80056f8 <_fflush_r>
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop
 8005034:	20000220 	.word	0x20000220
 8005038:	20000288 	.word	0x20000288
 800503c:	200002f0 	.word	0x200002f0

08005040 <global_stdio_init.part.0>:
 8005040:	b510      	push	{r4, lr}
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <global_stdio_init.part.0+0x30>)
 8005044:	4c0b      	ldr	r4, [pc, #44]	; (8005074 <global_stdio_init.part.0+0x34>)
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <global_stdio_init.part.0+0x38>)
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	4620      	mov	r0, r4
 800504c:	2200      	movs	r2, #0
 800504e:	2104      	movs	r1, #4
 8005050:	f7ff ff94 	bl	8004f7c <std>
 8005054:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005058:	2201      	movs	r2, #1
 800505a:	2109      	movs	r1, #9
 800505c:	f7ff ff8e 	bl	8004f7c <std>
 8005060:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005064:	2202      	movs	r2, #2
 8005066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506a:	2112      	movs	r1, #18
 800506c:	f7ff bf86 	b.w	8004f7c <std>
 8005070:	20000358 	.word	0x20000358
 8005074:	20000220 	.word	0x20000220
 8005078:	08004fe9 	.word	0x08004fe9

0800507c <__sfp_lock_acquire>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sfp_lock_acquire+0x8>)
 800507e:	f000 b9b2 	b.w	80053e6 <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	20000361 	.word	0x20000361

08005088 <__sfp_lock_release>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__sfp_lock_release+0x8>)
 800508a:	f000 b9ad 	b.w	80053e8 <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	20000361 	.word	0x20000361

08005094 <__sinit>:
 8005094:	b510      	push	{r4, lr}
 8005096:	4604      	mov	r4, r0
 8005098:	f7ff fff0 	bl	800507c <__sfp_lock_acquire>
 800509c:	6a23      	ldr	r3, [r4, #32]
 800509e:	b11b      	cbz	r3, 80050a8 <__sinit+0x14>
 80050a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a4:	f7ff bff0 	b.w	8005088 <__sfp_lock_release>
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <__sinit+0x28>)
 80050aa:	6223      	str	r3, [r4, #32]
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <__sinit+0x2c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f5      	bne.n	80050a0 <__sinit+0xc>
 80050b4:	f7ff ffc4 	bl	8005040 <global_stdio_init.part.0>
 80050b8:	e7f2      	b.n	80050a0 <__sinit+0xc>
 80050ba:	bf00      	nop
 80050bc:	08005001 	.word	0x08005001
 80050c0:	20000358 	.word	0x20000358

080050c4 <_fwalk_sglue>:
 80050c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c8:	4607      	mov	r7, r0
 80050ca:	4688      	mov	r8, r1
 80050cc:	4614      	mov	r4, r2
 80050ce:	2600      	movs	r6, #0
 80050d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050d4:	f1b9 0901 	subs.w	r9, r9, #1
 80050d8:	d505      	bpl.n	80050e6 <_fwalk_sglue+0x22>
 80050da:	6824      	ldr	r4, [r4, #0]
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d1f7      	bne.n	80050d0 <_fwalk_sglue+0xc>
 80050e0:	4630      	mov	r0, r6
 80050e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e6:	89ab      	ldrh	r3, [r5, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d907      	bls.n	80050fc <_fwalk_sglue+0x38>
 80050ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050f0:	3301      	adds	r3, #1
 80050f2:	d003      	beq.n	80050fc <_fwalk_sglue+0x38>
 80050f4:	4629      	mov	r1, r5
 80050f6:	4638      	mov	r0, r7
 80050f8:	47c0      	blx	r8
 80050fa:	4306      	orrs	r6, r0
 80050fc:	3568      	adds	r5, #104	; 0x68
 80050fe:	e7e9      	b.n	80050d4 <_fwalk_sglue+0x10>

08005100 <setbuf>:
 8005100:	fab1 f281 	clz	r2, r1
 8005104:	0952      	lsrs	r2, r2, #5
 8005106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800510a:	0052      	lsls	r2, r2, #1
 800510c:	f000 b800 	b.w	8005110 <setvbuf>

08005110 <setvbuf>:
 8005110:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005114:	461d      	mov	r5, r3
 8005116:	4b54      	ldr	r3, [pc, #336]	; (8005268 <setvbuf+0x158>)
 8005118:	681f      	ldr	r7, [r3, #0]
 800511a:	4604      	mov	r4, r0
 800511c:	460e      	mov	r6, r1
 800511e:	4690      	mov	r8, r2
 8005120:	b127      	cbz	r7, 800512c <setvbuf+0x1c>
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	b913      	cbnz	r3, 800512c <setvbuf+0x1c>
 8005126:	4638      	mov	r0, r7
 8005128:	f7ff ffb4 	bl	8005094 <__sinit>
 800512c:	f1b8 0f02 	cmp.w	r8, #2
 8005130:	d006      	beq.n	8005140 <setvbuf+0x30>
 8005132:	f1b8 0f01 	cmp.w	r8, #1
 8005136:	f200 8094 	bhi.w	8005262 <setvbuf+0x152>
 800513a:	2d00      	cmp	r5, #0
 800513c:	f2c0 8091 	blt.w	8005262 <setvbuf+0x152>
 8005140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005142:	07da      	lsls	r2, r3, #31
 8005144:	d405      	bmi.n	8005152 <setvbuf+0x42>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	059b      	lsls	r3, r3, #22
 800514a:	d402      	bmi.n	8005152 <setvbuf+0x42>
 800514c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514e:	f000 f94a 	bl	80053e6 <__retarget_lock_acquire_recursive>
 8005152:	4621      	mov	r1, r4
 8005154:	4638      	mov	r0, r7
 8005156:	f000 facf 	bl	80056f8 <_fflush_r>
 800515a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800515c:	b141      	cbz	r1, 8005170 <setvbuf+0x60>
 800515e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005162:	4299      	cmp	r1, r3
 8005164:	d002      	beq.n	800516c <setvbuf+0x5c>
 8005166:	4638      	mov	r0, r7
 8005168:	f000 f940 	bl	80053ec <_free_r>
 800516c:	2300      	movs	r3, #0
 800516e:	6363      	str	r3, [r4, #52]	; 0x34
 8005170:	2300      	movs	r3, #0
 8005172:	61a3      	str	r3, [r4, #24]
 8005174:	6063      	str	r3, [r4, #4]
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	0618      	lsls	r0, r3, #24
 800517a:	d503      	bpl.n	8005184 <setvbuf+0x74>
 800517c:	6921      	ldr	r1, [r4, #16]
 800517e:	4638      	mov	r0, r7
 8005180:	f000 f934 	bl	80053ec <_free_r>
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	f1b8 0f02 	cmp.w	r8, #2
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	d05f      	beq.n	8005256 <setvbuf+0x146>
 8005196:	ab01      	add	r3, sp, #4
 8005198:	466a      	mov	r2, sp
 800519a:	4621      	mov	r1, r4
 800519c:	4638      	mov	r0, r7
 800519e:	f000 fad3 	bl	8005748 <__swhatbuf_r>
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	4318      	orrs	r0, r3
 80051a6:	81a0      	strh	r0, [r4, #12]
 80051a8:	bb2d      	cbnz	r5, 80051f6 <setvbuf+0xe6>
 80051aa:	9d00      	ldr	r5, [sp, #0]
 80051ac:	4628      	mov	r0, r5
 80051ae:	f000 f969 	bl	8005484 <malloc>
 80051b2:	4606      	mov	r6, r0
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d150      	bne.n	800525a <setvbuf+0x14a>
 80051b8:	f8dd 9000 	ldr.w	r9, [sp]
 80051bc:	45a9      	cmp	r9, r5
 80051be:	d13e      	bne.n	800523e <setvbuf+0x12e>
 80051c0:	f04f 35ff 	mov.w	r5, #4294967295
 80051c4:	2200      	movs	r2, #0
 80051c6:	60a2      	str	r2, [r4, #8]
 80051c8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80051cc:	6022      	str	r2, [r4, #0]
 80051ce:	6122      	str	r2, [r4, #16]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d6:	6162      	str	r2, [r4, #20]
 80051d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051da:	f043 0302 	orr.w	r3, r3, #2
 80051de:	07d1      	lsls	r1, r2, #31
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	d404      	bmi.n	80051ee <setvbuf+0xde>
 80051e4:	059b      	lsls	r3, r3, #22
 80051e6:	d402      	bmi.n	80051ee <setvbuf+0xde>
 80051e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ea:	f000 f8fd 	bl	80053e8 <__retarget_lock_release_recursive>
 80051ee:	4628      	mov	r0, r5
 80051f0:	b003      	add	sp, #12
 80051f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	d0d8      	beq.n	80051ac <setvbuf+0x9c>
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	b913      	cbnz	r3, 8005204 <setvbuf+0xf4>
 80051fe:	4638      	mov	r0, r7
 8005200:	f7ff ff48 	bl	8005094 <__sinit>
 8005204:	f1b8 0f01 	cmp.w	r8, #1
 8005208:	bf08      	it	eq
 800520a:	89a3      	ldrheq	r3, [r4, #12]
 800520c:	6026      	str	r6, [r4, #0]
 800520e:	bf04      	itt	eq
 8005210:	f043 0301 	orreq.w	r3, r3, #1
 8005214:	81a3      	strheq	r3, [r4, #12]
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	f013 0208 	ands.w	r2, r3, #8
 800521c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005220:	d01d      	beq.n	800525e <setvbuf+0x14e>
 8005222:	07da      	lsls	r2, r3, #31
 8005224:	bf41      	itttt	mi
 8005226:	2200      	movmi	r2, #0
 8005228:	426d      	negmi	r5, r5
 800522a:	60a2      	strmi	r2, [r4, #8]
 800522c:	61a5      	strmi	r5, [r4, #24]
 800522e:	bf58      	it	pl
 8005230:	60a5      	strpl	r5, [r4, #8]
 8005232:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005234:	f015 0501 	ands.w	r5, r5, #1
 8005238:	d0d4      	beq.n	80051e4 <setvbuf+0xd4>
 800523a:	2500      	movs	r5, #0
 800523c:	e7d7      	b.n	80051ee <setvbuf+0xde>
 800523e:	4648      	mov	r0, r9
 8005240:	f000 f920 	bl	8005484 <malloc>
 8005244:	4606      	mov	r6, r0
 8005246:	2800      	cmp	r0, #0
 8005248:	d0ba      	beq.n	80051c0 <setvbuf+0xb0>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	464d      	mov	r5, r9
 8005254:	e7d1      	b.n	80051fa <setvbuf+0xea>
 8005256:	2500      	movs	r5, #0
 8005258:	e7b4      	b.n	80051c4 <setvbuf+0xb4>
 800525a:	46a9      	mov	r9, r5
 800525c:	e7f5      	b.n	800524a <setvbuf+0x13a>
 800525e:	60a2      	str	r2, [r4, #8]
 8005260:	e7e7      	b.n	8005232 <setvbuf+0x122>
 8005262:	f04f 35ff 	mov.w	r5, #4294967295
 8005266:	e7c2      	b.n	80051ee <setvbuf+0xde>
 8005268:	20000068 	.word	0x20000068

0800526c <__sread>:
 800526c:	b510      	push	{r4, lr}
 800526e:	460c      	mov	r4, r1
 8005270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005274:	f000 f868 	bl	8005348 <_read_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	bfab      	itete	ge
 800527c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800527e:	89a3      	ldrhlt	r3, [r4, #12]
 8005280:	181b      	addge	r3, r3, r0
 8005282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005286:	bfac      	ite	ge
 8005288:	6563      	strge	r3, [r4, #84]	; 0x54
 800528a:	81a3      	strhlt	r3, [r4, #12]
 800528c:	bd10      	pop	{r4, pc}

0800528e <__swrite>:
 800528e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005292:	461f      	mov	r7, r3
 8005294:	898b      	ldrh	r3, [r1, #12]
 8005296:	05db      	lsls	r3, r3, #23
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	4616      	mov	r6, r2
 800529e:	d505      	bpl.n	80052ac <__swrite+0x1e>
 80052a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a4:	2302      	movs	r3, #2
 80052a6:	2200      	movs	r2, #0
 80052a8:	f000 f83c 	bl	8005324 <_lseek_r>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b6:	81a3      	strh	r3, [r4, #12]
 80052b8:	4632      	mov	r2, r6
 80052ba:	463b      	mov	r3, r7
 80052bc:	4628      	mov	r0, r5
 80052be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c2:	f000 b853 	b.w	800536c <_write_r>

080052c6 <__sseek>:
 80052c6:	b510      	push	{r4, lr}
 80052c8:	460c      	mov	r4, r1
 80052ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ce:	f000 f829 	bl	8005324 <_lseek_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	bf15      	itete	ne
 80052d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80052da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052e2:	81a3      	strheq	r3, [r4, #12]
 80052e4:	bf18      	it	ne
 80052e6:	81a3      	strhne	r3, [r4, #12]
 80052e8:	bd10      	pop	{r4, pc}

080052ea <__sclose>:
 80052ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ee:	f000 b809 	b.w	8005304 <_close_r>

080052f2 <memset>:
 80052f2:	4402      	add	r2, r0
 80052f4:	4603      	mov	r3, r0
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d100      	bne.n	80052fc <memset+0xa>
 80052fa:	4770      	bx	lr
 80052fc:	f803 1b01 	strb.w	r1, [r3], #1
 8005300:	e7f9      	b.n	80052f6 <memset+0x4>
	...

08005304 <_close_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4d06      	ldr	r5, [pc, #24]	; (8005320 <_close_r+0x1c>)
 8005308:	2300      	movs	r3, #0
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fb fae3 	bl	80008da <_close>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_close_r+0x1a>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_close_r+0x1a>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	2000035c 	.word	0x2000035c

08005324 <_lseek_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d07      	ldr	r5, [pc, #28]	; (8005344 <_lseek_r+0x20>)
 8005328:	4604      	mov	r4, r0
 800532a:	4608      	mov	r0, r1
 800532c:	4611      	mov	r1, r2
 800532e:	2200      	movs	r2, #0
 8005330:	602a      	str	r2, [r5, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	f7fb faed 	bl	8000912 <_lseek>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_lseek_r+0x1e>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_lseek_r+0x1e>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	2000035c 	.word	0x2000035c

08005348 <_read_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d07      	ldr	r5, [pc, #28]	; (8005368 <_read_r+0x20>)
 800534c:	4604      	mov	r4, r0
 800534e:	4608      	mov	r0, r1
 8005350:	4611      	mov	r1, r2
 8005352:	2200      	movs	r2, #0
 8005354:	602a      	str	r2, [r5, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7fb fa86 	bl	8000868 <_read>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_read_r+0x1e>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	b103      	cbz	r3, 8005366 <_read_r+0x1e>
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	2000035c 	.word	0x2000035c

0800536c <_write_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4d07      	ldr	r5, [pc, #28]	; (800538c <_write_r+0x20>)
 8005370:	4604      	mov	r4, r0
 8005372:	4608      	mov	r0, r1
 8005374:	4611      	mov	r1, r2
 8005376:	2200      	movs	r2, #0
 8005378:	602a      	str	r2, [r5, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	f7fb fa91 	bl	80008a2 <_write>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_write_r+0x1e>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_write_r+0x1e>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	2000035c 	.word	0x2000035c

08005390 <__errno>:
 8005390:	4b01      	ldr	r3, [pc, #4]	; (8005398 <__errno+0x8>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000068 	.word	0x20000068

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4d0d      	ldr	r5, [pc, #52]	; (80053d4 <__libc_init_array+0x38>)
 80053a0:	4c0d      	ldr	r4, [pc, #52]	; (80053d8 <__libc_init_array+0x3c>)
 80053a2:	1b64      	subs	r4, r4, r5
 80053a4:	10a4      	asrs	r4, r4, #2
 80053a6:	2600      	movs	r6, #0
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	4d0b      	ldr	r5, [pc, #44]	; (80053dc <__libc_init_array+0x40>)
 80053ae:	4c0c      	ldr	r4, [pc, #48]	; (80053e0 <__libc_init_array+0x44>)
 80053b0:	f000 fa12 	bl	80057d8 <_init>
 80053b4:	1b64      	subs	r4, r4, r5
 80053b6:	10a4      	asrs	r4, r4, #2
 80053b8:	2600      	movs	r6, #0
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	08005b00 	.word	0x08005b00
 80053d8:	08005b00 	.word	0x08005b00
 80053dc:	08005b00 	.word	0x08005b00
 80053e0:	08005b04 	.word	0x08005b04

080053e4 <__retarget_lock_init_recursive>:
 80053e4:	4770      	bx	lr

080053e6 <__retarget_lock_acquire_recursive>:
 80053e6:	4770      	bx	lr

080053e8 <__retarget_lock_release_recursive>:
 80053e8:	4770      	bx	lr
	...

080053ec <_free_r>:
 80053ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ee:	2900      	cmp	r1, #0
 80053f0:	d044      	beq.n	800547c <_free_r+0x90>
 80053f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f6:	9001      	str	r0, [sp, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f1a1 0404 	sub.w	r4, r1, #4
 80053fe:	bfb8      	it	lt
 8005400:	18e4      	addlt	r4, r4, r3
 8005402:	f000 f8e7 	bl	80055d4 <__malloc_lock>
 8005406:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <_free_r+0x94>)
 8005408:	9801      	ldr	r0, [sp, #4]
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	b933      	cbnz	r3, 800541c <_free_r+0x30>
 800540e:	6063      	str	r3, [r4, #4]
 8005410:	6014      	str	r4, [r2, #0]
 8005412:	b003      	add	sp, #12
 8005414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005418:	f000 b8e2 	b.w	80055e0 <__malloc_unlock>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d908      	bls.n	8005432 <_free_r+0x46>
 8005420:	6825      	ldr	r5, [r4, #0]
 8005422:	1961      	adds	r1, r4, r5
 8005424:	428b      	cmp	r3, r1
 8005426:	bf01      	itttt	eq
 8005428:	6819      	ldreq	r1, [r3, #0]
 800542a:	685b      	ldreq	r3, [r3, #4]
 800542c:	1949      	addeq	r1, r1, r5
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	e7ed      	b.n	800540e <_free_r+0x22>
 8005432:	461a      	mov	r2, r3
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b10b      	cbz	r3, 800543c <_free_r+0x50>
 8005438:	42a3      	cmp	r3, r4
 800543a:	d9fa      	bls.n	8005432 <_free_r+0x46>
 800543c:	6811      	ldr	r1, [r2, #0]
 800543e:	1855      	adds	r5, r2, r1
 8005440:	42a5      	cmp	r5, r4
 8005442:	d10b      	bne.n	800545c <_free_r+0x70>
 8005444:	6824      	ldr	r4, [r4, #0]
 8005446:	4421      	add	r1, r4
 8005448:	1854      	adds	r4, r2, r1
 800544a:	42a3      	cmp	r3, r4
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	d1e0      	bne.n	8005412 <_free_r+0x26>
 8005450:	681c      	ldr	r4, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	6053      	str	r3, [r2, #4]
 8005456:	440c      	add	r4, r1
 8005458:	6014      	str	r4, [r2, #0]
 800545a:	e7da      	b.n	8005412 <_free_r+0x26>
 800545c:	d902      	bls.n	8005464 <_free_r+0x78>
 800545e:	230c      	movs	r3, #12
 8005460:	6003      	str	r3, [r0, #0]
 8005462:	e7d6      	b.n	8005412 <_free_r+0x26>
 8005464:	6825      	ldr	r5, [r4, #0]
 8005466:	1961      	adds	r1, r4, r5
 8005468:	428b      	cmp	r3, r1
 800546a:	bf04      	itt	eq
 800546c:	6819      	ldreq	r1, [r3, #0]
 800546e:	685b      	ldreq	r3, [r3, #4]
 8005470:	6063      	str	r3, [r4, #4]
 8005472:	bf04      	itt	eq
 8005474:	1949      	addeq	r1, r1, r5
 8005476:	6021      	streq	r1, [r4, #0]
 8005478:	6054      	str	r4, [r2, #4]
 800547a:	e7ca      	b.n	8005412 <_free_r+0x26>
 800547c:	b003      	add	sp, #12
 800547e:	bd30      	pop	{r4, r5, pc}
 8005480:	20000364 	.word	0x20000364

08005484 <malloc>:
 8005484:	4b02      	ldr	r3, [pc, #8]	; (8005490 <malloc+0xc>)
 8005486:	4601      	mov	r1, r0
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	f000 b823 	b.w	80054d4 <_malloc_r>
 800548e:	bf00      	nop
 8005490:	20000068 	.word	0x20000068

08005494 <sbrk_aligned>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	4e0e      	ldr	r6, [pc, #56]	; (80054d0 <sbrk_aligned+0x3c>)
 8005498:	460c      	mov	r4, r1
 800549a:	6831      	ldr	r1, [r6, #0]
 800549c:	4605      	mov	r5, r0
 800549e:	b911      	cbnz	r1, 80054a6 <sbrk_aligned+0x12>
 80054a0:	f000 f98a 	bl	80057b8 <_sbrk_r>
 80054a4:	6030      	str	r0, [r6, #0]
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 f985 	bl	80057b8 <_sbrk_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d00a      	beq.n	80054c8 <sbrk_aligned+0x34>
 80054b2:	1cc4      	adds	r4, r0, #3
 80054b4:	f024 0403 	bic.w	r4, r4, #3
 80054b8:	42a0      	cmp	r0, r4
 80054ba:	d007      	beq.n	80054cc <sbrk_aligned+0x38>
 80054bc:	1a21      	subs	r1, r4, r0
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f97a 	bl	80057b8 <_sbrk_r>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d101      	bne.n	80054cc <sbrk_aligned+0x38>
 80054c8:	f04f 34ff 	mov.w	r4, #4294967295
 80054cc:	4620      	mov	r0, r4
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	20000368 	.word	0x20000368

080054d4 <_malloc_r>:
 80054d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d8:	1ccd      	adds	r5, r1, #3
 80054da:	f025 0503 	bic.w	r5, r5, #3
 80054de:	3508      	adds	r5, #8
 80054e0:	2d0c      	cmp	r5, #12
 80054e2:	bf38      	it	cc
 80054e4:	250c      	movcc	r5, #12
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	4607      	mov	r7, r0
 80054ea:	db01      	blt.n	80054f0 <_malloc_r+0x1c>
 80054ec:	42a9      	cmp	r1, r5
 80054ee:	d905      	bls.n	80054fc <_malloc_r+0x28>
 80054f0:	230c      	movs	r3, #12
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	2600      	movs	r6, #0
 80054f6:	4630      	mov	r0, r6
 80054f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055d0 <_malloc_r+0xfc>
 8005500:	f000 f868 	bl	80055d4 <__malloc_lock>
 8005504:	f8d8 3000 	ldr.w	r3, [r8]
 8005508:	461c      	mov	r4, r3
 800550a:	bb5c      	cbnz	r4, 8005564 <_malloc_r+0x90>
 800550c:	4629      	mov	r1, r5
 800550e:	4638      	mov	r0, r7
 8005510:	f7ff ffc0 	bl	8005494 <sbrk_aligned>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	4604      	mov	r4, r0
 8005518:	d155      	bne.n	80055c6 <_malloc_r+0xf2>
 800551a:	f8d8 4000 	ldr.w	r4, [r8]
 800551e:	4626      	mov	r6, r4
 8005520:	2e00      	cmp	r6, #0
 8005522:	d145      	bne.n	80055b0 <_malloc_r+0xdc>
 8005524:	2c00      	cmp	r4, #0
 8005526:	d048      	beq.n	80055ba <_malloc_r+0xe6>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	4631      	mov	r1, r6
 800552c:	4638      	mov	r0, r7
 800552e:	eb04 0903 	add.w	r9, r4, r3
 8005532:	f000 f941 	bl	80057b8 <_sbrk_r>
 8005536:	4581      	cmp	r9, r0
 8005538:	d13f      	bne.n	80055ba <_malloc_r+0xe6>
 800553a:	6821      	ldr	r1, [r4, #0]
 800553c:	1a6d      	subs	r5, r5, r1
 800553e:	4629      	mov	r1, r5
 8005540:	4638      	mov	r0, r7
 8005542:	f7ff ffa7 	bl	8005494 <sbrk_aligned>
 8005546:	3001      	adds	r0, #1
 8005548:	d037      	beq.n	80055ba <_malloc_r+0xe6>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	442b      	add	r3, r5
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	f8d8 3000 	ldr.w	r3, [r8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d038      	beq.n	80055ca <_malloc_r+0xf6>
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	42a2      	cmp	r2, r4
 800555c:	d12b      	bne.n	80055b6 <_malloc_r+0xe2>
 800555e:	2200      	movs	r2, #0
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	e00f      	b.n	8005584 <_malloc_r+0xb0>
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	1b52      	subs	r2, r2, r5
 8005568:	d41f      	bmi.n	80055aa <_malloc_r+0xd6>
 800556a:	2a0b      	cmp	r2, #11
 800556c:	d917      	bls.n	800559e <_malloc_r+0xca>
 800556e:	1961      	adds	r1, r4, r5
 8005570:	42a3      	cmp	r3, r4
 8005572:	6025      	str	r5, [r4, #0]
 8005574:	bf18      	it	ne
 8005576:	6059      	strne	r1, [r3, #4]
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	bf08      	it	eq
 800557c:	f8c8 1000 	streq.w	r1, [r8]
 8005580:	5162      	str	r2, [r4, r5]
 8005582:	604b      	str	r3, [r1, #4]
 8005584:	4638      	mov	r0, r7
 8005586:	f104 060b 	add.w	r6, r4, #11
 800558a:	f000 f829 	bl	80055e0 <__malloc_unlock>
 800558e:	f026 0607 	bic.w	r6, r6, #7
 8005592:	1d23      	adds	r3, r4, #4
 8005594:	1af2      	subs	r2, r6, r3
 8005596:	d0ae      	beq.n	80054f6 <_malloc_r+0x22>
 8005598:	1b9b      	subs	r3, r3, r6
 800559a:	50a3      	str	r3, [r4, r2]
 800559c:	e7ab      	b.n	80054f6 <_malloc_r+0x22>
 800559e:	42a3      	cmp	r3, r4
 80055a0:	6862      	ldr	r2, [r4, #4]
 80055a2:	d1dd      	bne.n	8005560 <_malloc_r+0x8c>
 80055a4:	f8c8 2000 	str.w	r2, [r8]
 80055a8:	e7ec      	b.n	8005584 <_malloc_r+0xb0>
 80055aa:	4623      	mov	r3, r4
 80055ac:	6864      	ldr	r4, [r4, #4]
 80055ae:	e7ac      	b.n	800550a <_malloc_r+0x36>
 80055b0:	4634      	mov	r4, r6
 80055b2:	6876      	ldr	r6, [r6, #4]
 80055b4:	e7b4      	b.n	8005520 <_malloc_r+0x4c>
 80055b6:	4613      	mov	r3, r2
 80055b8:	e7cc      	b.n	8005554 <_malloc_r+0x80>
 80055ba:	230c      	movs	r3, #12
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4638      	mov	r0, r7
 80055c0:	f000 f80e 	bl	80055e0 <__malloc_unlock>
 80055c4:	e797      	b.n	80054f6 <_malloc_r+0x22>
 80055c6:	6025      	str	r5, [r4, #0]
 80055c8:	e7dc      	b.n	8005584 <_malloc_r+0xb0>
 80055ca:	605b      	str	r3, [r3, #4]
 80055cc:	deff      	udf	#255	; 0xff
 80055ce:	bf00      	nop
 80055d0:	20000364 	.word	0x20000364

080055d4 <__malloc_lock>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__malloc_lock+0x8>)
 80055d6:	f7ff bf06 	b.w	80053e6 <__retarget_lock_acquire_recursive>
 80055da:	bf00      	nop
 80055dc:	20000360 	.word	0x20000360

080055e0 <__malloc_unlock>:
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <__malloc_unlock+0x8>)
 80055e2:	f7ff bf01 	b.w	80053e8 <__retarget_lock_release_recursive>
 80055e6:	bf00      	nop
 80055e8:	20000360 	.word	0x20000360

080055ec <__sflush_r>:
 80055ec:	898a      	ldrh	r2, [r1, #12]
 80055ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f2:	4605      	mov	r5, r0
 80055f4:	0710      	lsls	r0, r2, #28
 80055f6:	460c      	mov	r4, r1
 80055f8:	d458      	bmi.n	80056ac <__sflush_r+0xc0>
 80055fa:	684b      	ldr	r3, [r1, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dc05      	bgt.n	800560c <__sflush_r+0x20>
 8005600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	dc02      	bgt.n	800560c <__sflush_r+0x20>
 8005606:	2000      	movs	r0, #0
 8005608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800560c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800560e:	2e00      	cmp	r6, #0
 8005610:	d0f9      	beq.n	8005606 <__sflush_r+0x1a>
 8005612:	2300      	movs	r3, #0
 8005614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005618:	682f      	ldr	r7, [r5, #0]
 800561a:	6a21      	ldr	r1, [r4, #32]
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	d032      	beq.n	8005686 <__sflush_r+0x9a>
 8005620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	075a      	lsls	r2, r3, #29
 8005626:	d505      	bpl.n	8005634 <__sflush_r+0x48>
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	1ac0      	subs	r0, r0, r3
 800562c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800562e:	b10b      	cbz	r3, 8005634 <__sflush_r+0x48>
 8005630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005632:	1ac0      	subs	r0, r0, r3
 8005634:	2300      	movs	r3, #0
 8005636:	4602      	mov	r2, r0
 8005638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563a:	6a21      	ldr	r1, [r4, #32]
 800563c:	4628      	mov	r0, r5
 800563e:	47b0      	blx	r6
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	d106      	bne.n	8005654 <__sflush_r+0x68>
 8005646:	6829      	ldr	r1, [r5, #0]
 8005648:	291d      	cmp	r1, #29
 800564a:	d82b      	bhi.n	80056a4 <__sflush_r+0xb8>
 800564c:	4a29      	ldr	r2, [pc, #164]	; (80056f4 <__sflush_r+0x108>)
 800564e:	410a      	asrs	r2, r1
 8005650:	07d6      	lsls	r6, r2, #31
 8005652:	d427      	bmi.n	80056a4 <__sflush_r+0xb8>
 8005654:	2200      	movs	r2, #0
 8005656:	6062      	str	r2, [r4, #4]
 8005658:	04d9      	lsls	r1, r3, #19
 800565a:	6922      	ldr	r2, [r4, #16]
 800565c:	6022      	str	r2, [r4, #0]
 800565e:	d504      	bpl.n	800566a <__sflush_r+0x7e>
 8005660:	1c42      	adds	r2, r0, #1
 8005662:	d101      	bne.n	8005668 <__sflush_r+0x7c>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b903      	cbnz	r3, 800566a <__sflush_r+0x7e>
 8005668:	6560      	str	r0, [r4, #84]	; 0x54
 800566a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566c:	602f      	str	r7, [r5, #0]
 800566e:	2900      	cmp	r1, #0
 8005670:	d0c9      	beq.n	8005606 <__sflush_r+0x1a>
 8005672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005676:	4299      	cmp	r1, r3
 8005678:	d002      	beq.n	8005680 <__sflush_r+0x94>
 800567a:	4628      	mov	r0, r5
 800567c:	f7ff feb6 	bl	80053ec <_free_r>
 8005680:	2000      	movs	r0, #0
 8005682:	6360      	str	r0, [r4, #52]	; 0x34
 8005684:	e7c0      	b.n	8005608 <__sflush_r+0x1c>
 8005686:	2301      	movs	r3, #1
 8005688:	4628      	mov	r0, r5
 800568a:	47b0      	blx	r6
 800568c:	1c41      	adds	r1, r0, #1
 800568e:	d1c8      	bne.n	8005622 <__sflush_r+0x36>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0c5      	beq.n	8005622 <__sflush_r+0x36>
 8005696:	2b1d      	cmp	r3, #29
 8005698:	d001      	beq.n	800569e <__sflush_r+0xb2>
 800569a:	2b16      	cmp	r3, #22
 800569c:	d101      	bne.n	80056a2 <__sflush_r+0xb6>
 800569e:	602f      	str	r7, [r5, #0]
 80056a0:	e7b1      	b.n	8005606 <__sflush_r+0x1a>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a8:	81a3      	strh	r3, [r4, #12]
 80056aa:	e7ad      	b.n	8005608 <__sflush_r+0x1c>
 80056ac:	690f      	ldr	r7, [r1, #16]
 80056ae:	2f00      	cmp	r7, #0
 80056b0:	d0a9      	beq.n	8005606 <__sflush_r+0x1a>
 80056b2:	0793      	lsls	r3, r2, #30
 80056b4:	680e      	ldr	r6, [r1, #0]
 80056b6:	bf08      	it	eq
 80056b8:	694b      	ldreq	r3, [r1, #20]
 80056ba:	600f      	str	r7, [r1, #0]
 80056bc:	bf18      	it	ne
 80056be:	2300      	movne	r3, #0
 80056c0:	eba6 0807 	sub.w	r8, r6, r7
 80056c4:	608b      	str	r3, [r1, #8]
 80056c6:	f1b8 0f00 	cmp.w	r8, #0
 80056ca:	dd9c      	ble.n	8005606 <__sflush_r+0x1a>
 80056cc:	6a21      	ldr	r1, [r4, #32]
 80056ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056d0:	4643      	mov	r3, r8
 80056d2:	463a      	mov	r2, r7
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b0      	blx	r6
 80056d8:	2800      	cmp	r0, #0
 80056da:	dc06      	bgt.n	80056ea <__sflush_r+0xfe>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e78e      	b.n	8005608 <__sflush_r+0x1c>
 80056ea:	4407      	add	r7, r0
 80056ec:	eba8 0800 	sub.w	r8, r8, r0
 80056f0:	e7e9      	b.n	80056c6 <__sflush_r+0xda>
 80056f2:	bf00      	nop
 80056f4:	dfbffffe 	.word	0xdfbffffe

080056f8 <_fflush_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	690b      	ldr	r3, [r1, #16]
 80056fc:	4605      	mov	r5, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	b913      	cbnz	r3, 8005708 <_fflush_r+0x10>
 8005702:	2500      	movs	r5, #0
 8005704:	4628      	mov	r0, r5
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	b118      	cbz	r0, 8005712 <_fflush_r+0x1a>
 800570a:	6a03      	ldr	r3, [r0, #32]
 800570c:	b90b      	cbnz	r3, 8005712 <_fflush_r+0x1a>
 800570e:	f7ff fcc1 	bl	8005094 <__sinit>
 8005712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f3      	beq.n	8005702 <_fflush_r+0xa>
 800571a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800571c:	07d0      	lsls	r0, r2, #31
 800571e:	d404      	bmi.n	800572a <_fflush_r+0x32>
 8005720:	0599      	lsls	r1, r3, #22
 8005722:	d402      	bmi.n	800572a <_fflush_r+0x32>
 8005724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005726:	f7ff fe5e 	bl	80053e6 <__retarget_lock_acquire_recursive>
 800572a:	4628      	mov	r0, r5
 800572c:	4621      	mov	r1, r4
 800572e:	f7ff ff5d 	bl	80055ec <__sflush_r>
 8005732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005734:	07da      	lsls	r2, r3, #31
 8005736:	4605      	mov	r5, r0
 8005738:	d4e4      	bmi.n	8005704 <_fflush_r+0xc>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	059b      	lsls	r3, r3, #22
 800573e:	d4e1      	bmi.n	8005704 <_fflush_r+0xc>
 8005740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005742:	f7ff fe51 	bl	80053e8 <__retarget_lock_release_recursive>
 8005746:	e7dd      	b.n	8005704 <_fflush_r+0xc>

08005748 <__swhatbuf_r>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	460c      	mov	r4, r1
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	2900      	cmp	r1, #0
 8005752:	b096      	sub	sp, #88	; 0x58
 8005754:	4615      	mov	r5, r2
 8005756:	461e      	mov	r6, r3
 8005758:	da0d      	bge.n	8005776 <__swhatbuf_r+0x2e>
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005760:	f04f 0100 	mov.w	r1, #0
 8005764:	bf0c      	ite	eq
 8005766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800576a:	2340      	movne	r3, #64	; 0x40
 800576c:	2000      	movs	r0, #0
 800576e:	6031      	str	r1, [r6, #0]
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	b016      	add	sp, #88	; 0x58
 8005774:	bd70      	pop	{r4, r5, r6, pc}
 8005776:	466a      	mov	r2, sp
 8005778:	f000 f80c 	bl	8005794 <_fstat_r>
 800577c:	2800      	cmp	r0, #0
 800577e:	dbec      	blt.n	800575a <__swhatbuf_r+0x12>
 8005780:	9901      	ldr	r1, [sp, #4]
 8005782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800578a:	4259      	negs	r1, r3
 800578c:	4159      	adcs	r1, r3
 800578e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005792:	e7eb      	b.n	800576c <__swhatbuf_r+0x24>

08005794 <_fstat_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d07      	ldr	r5, [pc, #28]	; (80057b4 <_fstat_r+0x20>)
 8005798:	2300      	movs	r3, #0
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	f7fb f8a6 	bl	80008f2 <_fstat>
 80057a6:	1c43      	adds	r3, r0, #1
 80057a8:	d102      	bne.n	80057b0 <_fstat_r+0x1c>
 80057aa:	682b      	ldr	r3, [r5, #0]
 80057ac:	b103      	cbz	r3, 80057b0 <_fstat_r+0x1c>
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	bd38      	pop	{r3, r4, r5, pc}
 80057b2:	bf00      	nop
 80057b4:	2000035c 	.word	0x2000035c

080057b8 <_sbrk_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d06      	ldr	r5, [pc, #24]	; (80057d4 <_sbrk_r+0x1c>)
 80057bc:	2300      	movs	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	602b      	str	r3, [r5, #0]
 80057c4:	f7fb f8b2 	bl	800092c <_sbrk>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_sbrk_r+0x1a>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_sbrk_r+0x1a>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	2000035c 	.word	0x2000035c

080057d8 <_init>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	bf00      	nop
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr

080057e4 <_fini>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr
