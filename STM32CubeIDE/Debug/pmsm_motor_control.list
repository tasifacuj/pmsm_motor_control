
pmsm_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c60  08005c60  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c68  08005c68  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000068  08005cd8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08005cd8  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_line   00015698  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007e  00000000  00000000  00035773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00013616  00000000  00000000  000357f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ba3  00000000  00000000  00048e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000011a0  00000000  00000000  0004b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce65a  00000000  00000000  0004cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000da8  00000000  00000000  0011b1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00021585  00000000  00000000  0011bf52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000518c  00000000  00000000  0013d4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005b80 	.word	0x08005b80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005b80 	.word	0x08005b80

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c0:	f000 fd28 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f004 fcf5 	bl	8004fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ee:	f000 f85d 	bl	80006ac <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000600:	08005c70 	.word	0x08005c70
  ldr r2, =_sbss
 8000604:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000608:	2000035c 	.word	0x2000035c

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>
	...

08000610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <MX_GPIO_Init+0x94>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_GPIO_Init+0x94>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_GPIO_Init+0x94>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_GPIO_Init+0x94>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HALL_H1_Pin|HALL_H2_Pin|HALL_H3_Pin;
 800066e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000674:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4619      	mov	r1, r3
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <MX_GPIO_Init+0x98>)
 8000686:	f000 fe79 	bl	800137c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2017      	movs	r0, #23
 8000690:	f000 fe3f 	bl	8001312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000694:	2017      	movs	r0, #23
 8000696:	f000 fe56 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 800069a:	bf00      	nop
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000400 	.word	0x48000400

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <main+0x54>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 fb3f 	bl	8004d3c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fcbb 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f81f 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f7ff ffa3 	bl	8000610 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006ca:	f000 f9e5 	bl	8000a98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006ce:	f000 fbeb 	bl	8000ea8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80006d2:	f000 fafd 	bl	8000cd0 <MX_TIM4_Init>
  MX_TIM3_Init();
 80006d6:	f000 faad 	bl	8000c34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  pmsm_init();
 80006da:	f004 f909 	bl	80048f0 <pmsm_init>
  HAL_Delay( 3000 );
 80006de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006e2:	f000 fd19 	bl	8001118 <HAL_Delay>

  pmsm_motor_commutation( pmsm_hall_sensors_get_position() );
 80006e6:	f004 f97f 	bl	80049e8 <pmsm_hall_sensors_get_position>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 f993 	bl	8004a18 <pmsm_motor_commutation>
  pmsm_motor_set_run();
 80006f2:	f004 fa1f 	bl	8004b34 <pmsm_motor_set_run>
  pmsm_set_PWM( 3000 );
 80006f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006fa:	f004 fa27 	bl	8004b4c <pmsm_set_PWM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0x52>
 8000700:	20000064 	.word	0x20000064

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2238      	movs	r2, #56	; 0x38
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fc0b 	bl	8004f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 ffaa 	bl	8001680 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000746:	2355      	movs	r3, #85	; 0x55
 8000748:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074a:	2302      	movs	r3, #2
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f844 	bl	80017e8 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000766:	f000 f818 	bl	800079a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2104      	movs	r1, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fb42 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800078e:	f000 f804 	bl	800079a <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079e:	b672      	cpsid	i
}
 80007a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6613      	str	r3, [r2, #96]	; 0x60
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6593      	str	r3, [r2, #88]	; 0x58
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007da:	f000 fff5 	bl	80017c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f06f 0201 	mvn.w	r2, #1
 80007fa:	611a      	str	r2, [r3, #16]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b01      	cmp	r3, #1
 800081a:	d101      	bne.n	8000820 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000832:	e7fe      	b.n	8000832 <NMI_Handler+0x4>

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <HardFault_Handler+0x4>

0800083a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <BusFault_Handler+0x4>

08000846 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 fc2f 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}

08000882 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(HALL_H1_Pin);
  HAL_GPIO_EXTI_IRQHandler(HALL_H2_Pin);
  HAL_GPIO_EXTI_IRQHandler(HALL_H3_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
#else
  pmsm_EXTI9_5_IRQHandler();
 8000886:	f004 f863 	bl	8004950 <pmsm_EXTI9_5_IRQHandler>
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000896:	f001 ff7d 	bl	8002794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000088 	.word	0x20000088

080008a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008aa:	f001 ff73 	bl	8002794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000088 	.word	0x20000088

080008b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
#else
	if ( LL_TIM_IsActiveFlag_UPDATE( htim3.Instance )){
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <TIM3_IRQHandler+0x28>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ffa1 	bl	8000808 <LL_TIM_IsActiveFlag_UPDATE>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <TIM3_IRQHandler+0x22>
		LL_TIM_ClearFlag_UPDATE( htim3.Instance );
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <TIM3_IRQHandler+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff8b 	bl	80007ec <LL_TIM_ClearFlag_UPDATE>
		pmsm_timer3_update_handler();
 80008d6:	f004 f878 	bl	80049ca <pmsm_timer3_update_handler>
	}
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000d4 	.word	0x200000d4

080008e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */
#else
  if ( LL_TIM_IsActiveFlag_UPDATE( htim4.Instance )){
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <TIM4_IRQHandler+0x28>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff8b 	bl	8000808 <LL_TIM_IsActiveFlag_UPDATE>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <TIM4_IRQHandler+0x22>
      LL_TIM_ClearFlag_UPDATE( htim4.Instance );
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <TIM4_IRQHandler+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff75 	bl	80007ec <LL_TIM_ClearFlag_UPDATE>
      pmsm_sin_table_timer4_handler();
 8000902:	f004 f85b 	bl	80049bc <pmsm_sin_table_timer4_handler>
    }
#endif
  /* USER CODE END TIM4_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000120 	.word	0x20000120

08000910 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e00a      	b.n	8000938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000922:	f3af 8000 	nop.w
 8000926:	4601      	mov	r1, r0
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf0      	blt.n	8000922 <_read+0x12>
  }

  return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e009      	b.n	8000970 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fb43 	bl	8000ff0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf1      	blt.n	800095c <_write+0x12>
  }
  return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_close>:

int _close(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009aa:	605a      	str	r2, [r3, #4]
  return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f004 fad6 	bl	8004fcc <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20008000 	.word	0x20008000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000084 	.word	0x20000084
 8000a54:	20000360 	.word	0x20000360

08000a58 <LL_TIM_EnableCounter>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f043 0201 	orr.w	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_TIM_EnableAllOutputs>:
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09c      	sub	sp, #112	; 0x70
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	615a      	str	r2, [r3, #20]
 8000aca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2234      	movs	r2, #52	; 0x34
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fa2b 	bl	8004f2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad8:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000ada:	4a55      	ldr	r2, [pc, #340]	; (8000c30 <MX_TIM1_Init+0x198>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ade:	4b53      	ldr	r3, [pc, #332]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b51      	ldr	r3, [pc, #324]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5665;
 8000aea:	4b50      	ldr	r3, [pc, #320]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000aec:	f241 6221 	movw	r2, #5665	; 0x1621
 8000af0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af8:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b04:	4849      	ldr	r0, [pc, #292]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000b06:	f001 fd8d 	bl	8002624 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b10:	f7ff fe43 	bl	800079a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4842      	ldr	r0, [pc, #264]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000b22:	f002 f89b 	bl	8002c5c <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b2c:	f7ff fe35 	bl	800079a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b30:	483e      	ldr	r0, [pc, #248]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000b32:	f001 fdce 	bl	80026d2 <HAL_TIM_PWM_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b3c:	f7ff fe2d 	bl	800079a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b50:	4619      	mov	r1, r3
 8000b52:	4836      	ldr	r0, [pc, #216]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000b54:	f002 fddc 	bl	8003710 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b5e:	f7ff fe1c 	bl	800079a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	; 0x60
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	4829      	ldr	r0, [pc, #164]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000b88:	f001 ff54 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b92:	f7ff fe02 	bl	800079a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000ba0:	f001 ff48 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000baa:	f7ff fdf6 	bl	800079a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000bb8:	f001 ff3c 	bl	8002a34 <HAL_TIM_PWM_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000bc2:	f7ff fdea 	bl	800079a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 127;
 8000bd2:	237f      	movs	r3, #127	; 0x7f
 8000bd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	480a      	ldr	r0, [pc, #40]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000c04:	f002 fe06 	bl	8003814 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000c0e:	f7ff fdc4 	bl	800079a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
//  TIM1->CR1 |= TIM_CR1_CEN;
  LL_TIM_EnableCounter( TIM1 );
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM1_Init+0x198>)
 8000c14:	f7ff ff20 	bl	8000a58 <LL_TIM_EnableCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM1_Init+0x198>)
 8000c1a:	f7ff ff2d 	bl	8000a78 <LL_TIM_EnableAllOutputs>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM1_Init+0x194>)
 8000c20:	f000 f90a 	bl	8000e38 <HAL_TIM_MspPostInit>

}
 8000c24:	bf00      	nop
 8000c26:	3770      	adds	r7, #112	; 0x70
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000088 	.word	0x20000088
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c54:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <MX_TIM3_Init+0x98>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c5a:	22a9      	movs	r2, #169	; 0xa9
 8000c5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c7a:	f001 fcd3 	bl	8002624 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c84:	f7ff fd89 	bl	800079a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000c96:	f001 ffe1 	bl	8002c5c <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ca0:	f7ff fd7b 	bl	800079a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_TIM3_Init+0x94>)
 8000cb2:	f002 fd2d 	bl	8003710 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cbc:	f7ff fd6d 	bl	800079a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000d4 	.word	0x200000d4
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <MX_TIM4_Init+0x98>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000cf6:	22a9      	movs	r2, #169	; 0xa9
 8000cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d14:	f001 fc86 	bl	8002624 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f7ff fd3c 	bl	800079a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d30:	f001 ff94 	bl	8002c5c <HAL_TIM_ConfigClockSource>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f7ff fd2e 	bl	800079a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_TIM4_Init+0x94>)
 8000d4c:	f002 fce0 	bl	8003710 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d56:	f7ff fd20 	bl	800079a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000120 	.word	0x20000120
 8000d68:	40000800 	.word	0x40000800

08000d6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <HAL_TIM_Base_MspInit+0xbc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d11c      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2018      	movs	r0, #24
 8000d9c:	f000 fab9 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000da0:	2018      	movs	r0, #24
 8000da2:	f000 fad0 	bl	8001346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2019      	movs	r0, #25
 8000dac:	f000 fab1 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000db0:	2019      	movs	r0, #25
 8000db2:	f000 fac8 	bl	8001346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000db6:	e032      	b.n	8000e1e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <HAL_TIM_Base_MspInit+0xc4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d114      	bne.n	8000dec <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	201d      	movs	r0, #29
 8000de0:	f000 fa97 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000de4:	201d      	movs	r0, #29
 8000de6:	f000 faae 	bl	8001346 <HAL_NVIC_EnableIRQ>
}
 8000dea:	e018      	b.n	8000e1e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM4)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_TIM_Base_MspInit+0xc8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d113      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0xc0>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	201e      	movs	r0, #30
 8000e14:	f000 fa7d 	bl	8001312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e18:	201e      	movs	r0, #30
 8000e1a:	f000 fa94 	bl	8001346 <HAL_NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40000400 	.word	0x40000400
 8000e34:	40000800 	.word	0x40000800

08000e38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <HAL_TIM_MspPostInit+0x64>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d11c      	bne.n	8000e94 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_TIM_MspPostInit+0x68>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_TIM_MspPostInit+0x68>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_TIM_MspPostInit+0x68>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_UL_Pin|PWM_UH_Pin|PWM_VL_Pin|PWM_VH_Pin
 8000e72:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8000e76:	60fb      	str	r3, [r7, #12]
                          |PWM_WL_Pin|PWM_WH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	f000 fa74 	bl	800137c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40012c00 	.word	0x40012c00
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48001000 	.word	0x48001000

08000ea8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <MX_USART1_UART_Init+0x94>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ef2:	f002 fd61 	bl	80039b8 <HAL_UART_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000efc:	f7ff fc4d 	bl	800079a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000f04:	f003 fb5a 	bl	80045bc <HAL_UARTEx_SetTxFifoThreshold>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f0e:	f7ff fc44 	bl	800079a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000f16:	f003 fb8f 	bl	8004638 <HAL_UARTEx_SetRxFifoThreshold>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f20:	f7ff fc3b 	bl	800079a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_USART1_UART_Init+0x90>)
 8000f26:	f003 fb10 	bl	800454a <HAL_UARTEx_DisableFifoMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f7ff fc33 	bl	800079a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000016c 	.word	0x2000016c
 8000f3c:	40013800 	.word	0x40013800

08000f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b09a      	sub	sp, #104	; 0x68
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	2244      	movs	r2, #68	; 0x44
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 ffe4 	bl	8004f2e <memset>
  if(uartHandle->Instance==USART1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_UART_MspInit+0xa8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d137      	bne.n	8000fe0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 f961 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f7ff fc07 	bl	800079a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0xac>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_UART_MspInit+0xac>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6613      	str	r3, [r2, #96]	; 0x60
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xac>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0xac>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0xac>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0xac>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f000 f9ce 	bl	800137c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3768      	adds	r7, #104	; 0x68
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40021000 	.word	0x40021000

08000ff0 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the debug port and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000ff8:	1d39      	adds	r1, r7, #4
 8000ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffe:	2201      	movs	r2, #1
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <__io_putchar+0x20>)
 8001002:	f002 fd29 	bl	8003a58 <HAL_UART_Transmit>

  return ch;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000016c 	.word	0x2000016c

08001014 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	2003      	movs	r0, #3
 8001044:	f000 f95a 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001048:	200f      	movs	r0, #15
 800104a:	f000 f80d 	bl	8001068 <HAL_InitTick>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	e001      	b.n	800105e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105a:	f7ff fba3 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105e:	79fb      	ldrb	r3, [r7, #7]

}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_InitTick+0x68>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d022      	beq.n	80010c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_InitTick+0x6c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_InitTick+0x68>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001088:	fbb1 f3f3 	udiv	r3, r1, r3
 800108c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f966 	bl	8001362 <HAL_SYSTICK_Config>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10f      	bne.n	80010bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	d809      	bhi.n	80010b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a2:	2200      	movs	r2, #0
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	f04f 30ff 	mov.w	r0, #4294967295
 80010aa:	f000 f932 	bl	8001312 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_InitTick+0x70>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	e007      	b.n	80010c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e004      	b.n	80010c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e001      	b.n	80010c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_IncTick+0x1c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x20>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <HAL_IncTick+0x1c>)
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000200 	.word	0x20000200
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000200 	.word	0x20000200

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d004      	beq.n	800113c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_Delay+0x40>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113c:	bf00      	nop
 800113e:	f7ff ffdf 	bl	8001100 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	429a      	cmp	r2, r3
 800114c:	d8f7      	bhi.n	800113e <HAL_Delay+0x26>
  {
  }
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000008 	.word	0x20000008

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff29 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff40 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff90 	bl	8001250 <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5f 	bl	80011fc <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff33 	bl	80011c0 <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa4 	bl	80012b8 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800138a:	e15a      	b.n	8001642 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	4013      	ands	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 814c 	beq.w	800163c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d005      	beq.n	80013bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d130      	bne.n	800141e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f2:	2201      	movs	r2, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	f003 0201 	and.w	r2, r3, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b03      	cmp	r3, #3
 8001428:	d017      	beq.n	800145a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d123      	bne.n	80014ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	08da      	lsrs	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3208      	adds	r2, #8
 80014a8:	6939      	ldr	r1, [r7, #16]
 80014aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0203 	and.w	r2, r3, #3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80a6 	beq.w	800163c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f0:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_GPIO_Init+0x2e4>)
 80014f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f4:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_GPIO_Init+0x2e4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6613      	str	r3, [r2, #96]	; 0x60
 80014fc:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_GPIO_Init+0x2e4>)
 80014fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001508:	4a56      	ldr	r2, [pc, #344]	; (8001664 <HAL_GPIO_Init+0x2e8>)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001532:	d01f      	beq.n	8001574 <HAL_GPIO_Init+0x1f8>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_GPIO_Init+0x2ec>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d019      	beq.n	8001570 <HAL_GPIO_Init+0x1f4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a4b      	ldr	r2, [pc, #300]	; (800166c <HAL_GPIO_Init+0x2f0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d013      	beq.n	800156c <HAL_GPIO_Init+0x1f0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <HAL_GPIO_Init+0x2f4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d00d      	beq.n	8001568 <HAL_GPIO_Init+0x1ec>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a49      	ldr	r2, [pc, #292]	; (8001674 <HAL_GPIO_Init+0x2f8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d007      	beq.n	8001564 <HAL_GPIO_Init+0x1e8>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a48      	ldr	r2, [pc, #288]	; (8001678 <HAL_GPIO_Init+0x2fc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d101      	bne.n	8001560 <HAL_GPIO_Init+0x1e4>
 800155c:	2305      	movs	r3, #5
 800155e:	e00a      	b.n	8001576 <HAL_GPIO_Init+0x1fa>
 8001560:	2306      	movs	r3, #6
 8001562:	e008      	b.n	8001576 <HAL_GPIO_Init+0x1fa>
 8001564:	2304      	movs	r3, #4
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x1fa>
 8001568:	2303      	movs	r3, #3
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x1fa>
 800156c:	2302      	movs	r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x1fa>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x1fa>
 8001574:	2300      	movs	r3, #0
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001586:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_GPIO_Init+0x2e8>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <HAL_GPIO_Init+0x300>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b8:	4a30      	ldr	r2, [pc, #192]	; (800167c <HAL_GPIO_Init+0x300>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <HAL_GPIO_Init+0x300>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e2:	4a26      	ldr	r2, [pc, #152]	; (800167c <HAL_GPIO_Init+0x300>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_GPIO_Init+0x300>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_GPIO_Init+0x300>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_GPIO_Init+0x300>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001636:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_GPIO_Init+0x300>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f ae9d 	bne.w	800138c <HAL_GPIO_Init+0x10>
  }
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	48001400 	.word	0x48001400
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d141      	bne.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800168e:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169a:	d131      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800169c:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a2:	4a46      	ldr	r2, [pc, #280]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ac:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b4:	4a41      	ldr	r2, [pc, #260]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016bc:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2232      	movs	r2, #50	; 0x32
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	0c9b      	lsrs	r3, r3, #18
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d2:	e002      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d102      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f2      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d158      	bne.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e057      	b.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001700:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800170c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001710:	e04d      	b.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001718:	d141      	bne.n	800179e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001726:	d131      	bne.n	800178c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800172e:	4a23      	ldr	r2, [pc, #140]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2232      	movs	r2, #50	; 0x32
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800175e:	e002      	b.n	8001766 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3b01      	subs	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001772:	d102      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f2      	bne.n	8001760 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d112      	bne.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e011      	b.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800179c:	e007      	b.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40007000 	.word	0x40007000
 80017c0:	20000000 	.word	0x20000000
 80017c4:	431bde83 	.word	0x431bde83

080017c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	6093      	str	r3, [r2, #8]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40007000 	.word	0x40007000

080017e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e2fe      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d075      	beq.n	80018f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001806:	4b97      	ldr	r3, [pc, #604]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001810:	4b94      	ldr	r3, [pc, #592]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d102      	bne.n	8001826 <HAL_RCC_OscConfig+0x3e>
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d002      	beq.n	800182c <HAL_RCC_OscConfig+0x44>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b08      	cmp	r3, #8
 800182a:	d10b      	bne.n	8001844 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	4b8d      	ldr	r3, [pc, #564]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d05b      	beq.n	80018f0 <HAL_RCC_OscConfig+0x108>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d157      	bne.n	80018f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e2d9      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d106      	bne.n	800185c <HAL_RCC_OscConfig+0x74>
 800184e:	4b85      	ldr	r3, [pc, #532]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a84      	ldr	r2, [pc, #528]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e01d      	b.n	8001898 <HAL_RCC_OscConfig+0xb0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x98>
 8001866:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7e      	ldr	r2, [pc, #504]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b7c      	ldr	r3, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7b      	ldr	r2, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0xb0>
 8001880:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a74      	ldr	r2, [pc, #464]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fc2e 	bl	8001100 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fc2a 	bl	8001100 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e29e      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ba:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0xc0>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc1a 	bl	8001100 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fc16 	bl	8001100 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e28a      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	4b60      	ldr	r3, [pc, #384]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0xe8>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d075      	beq.n	80019ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fe:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001908:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x136>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d002      	beq.n	8001924 <HAL_RCC_OscConfig+0x13c>
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d11f      	bne.n	8001964 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001924:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_OscConfig+0x154>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e25d      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	4946      	ldr	r1, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001950:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fb87 	bl	8001068 <HAL_InitTick>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d043      	beq.n	80019e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e249      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d023      	beq.n	80019b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a3c      	ldr	r2, [pc, #240]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff fbc2 	bl	8001100 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff fbbe 	bl	8001100 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e232      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	061b      	lsls	r3, r3, #24
 80019ac:	492d      	ldr	r1, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
 80019b2:	e01a      	b.n	80019ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb9e 	bl	8001100 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c8:	f7ff fb9a 	bl	8001100 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e20e      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d041      	beq.n	8001a7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a04:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fb77 	bl	8001100 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a16:	f7ff fb73 	bl	8001100 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1e7      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ef      	beq.n	8001a16 <HAL_RCC_OscConfig+0x22e>
 8001a36:	e020      	b.n	8001a7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_OscConfig+0x27c>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fb5a 	bl	8001100 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4e:	e00d      	b.n	8001a6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fb56 	bl	8001100 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d906      	bls.n	8001a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1ca      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ea      	bne.n	8001a50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80a6 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a8c:	4b84      	ldr	r3, [pc, #528]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2b4>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x2b6>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00d      	beq.n	8001abe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	4a7e      	ldr	r2, [pc, #504]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6593      	str	r3, [r2, #88]	; 0x58
 8001aae:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abe:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0x4bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aca:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x4bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a75      	ldr	r2, [pc, #468]	; (8001ca4 <HAL_RCC_OscConfig+0x4bc>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fb13 	bl	8001100 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff fb0f 	bl	8001100 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e183      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b6c      	ldr	r3, [pc, #432]	; (8001ca4 <HAL_RCC_OscConfig+0x4bc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_RCC_OscConfig+0x32e>
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	4a65      	ldr	r2, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b14:	e024      	b.n	8001b60 <HAL_RCC_OscConfig+0x378>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d110      	bne.n	8001b40 <HAL_RCC_OscConfig+0x358>
 8001b1e:	4b60      	ldr	r3, [pc, #384]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	4a5e      	ldr	r2, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b34:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b3e:	e00f      	b.n	8001b60 <HAL_RCC_OscConfig+0x378>
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d016      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff faca 	bl	8001100 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff fac6 	bl	8001100 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e138      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b86:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ed      	beq.n	8001b70 <HAL_RCC_OscConfig+0x388>
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fab3 	bl	8001100 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff faaf 	bl	8001100 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e121      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ed      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bee:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fa82 	bl	8001100 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c00:	f7ff fa7e 	bl	8001100 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0f2      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ef      	beq.n	8001c00 <HAL_RCC_OscConfig+0x418>
 8001c20:	e01b      	b.n	8001c5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7ff fa65 	bl	8001100 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3a:	f7ff fa61 	bl	8001100 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0d5      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ef      	bne.n	8001c3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80c9 	beq.w	8001df6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	f000 8083 	beq.w	8001d78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d15e      	bne.n	8001d38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fa3b 	bl	8001100 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e00c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff fa37 	bl	8001100 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d905      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0ab      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ec      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b52      	ldr	r3, [pc, #328]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_RCC_OscConfig+0x61c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6a11      	ldr	r1, [r2, #32]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cce:	0212      	lsls	r2, r2, #8
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cd6:	0852      	lsrs	r2, r2, #1
 8001cd8:	3a01      	subs	r2, #1
 8001cda:	0552      	lsls	r2, r2, #21
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ce2:	0852      	lsrs	r2, r2, #1
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	0652      	lsls	r2, r2, #25
 8001ce8:	4311      	orrs	r1, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cee:	06d2      	lsls	r2, r2, #27
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	4943      	ldr	r1, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a40      	ldr	r2, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d04:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a3d      	ldr	r2, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f9f6 	bl	8001100 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f9f2 	bl	8001100 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e066      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x530>
 8001d36:	e05e      	b.n	8001df6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a30      	ldr	r2, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f9dc 	bl	8001100 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f9d8 	bl	8001100 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e04c      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d6a:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4924      	ldr	r1, [pc, #144]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_RCC_OscConfig+0x620>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	60cb      	str	r3, [r1, #12]
 8001d76:	e03e      	b.n	8001df6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e039      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x618>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d12c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	3b01      	subs	r3, #1
 8001da4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d123      	bne.n	8001df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d11b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d113      	bne.n	8001df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d109      	bne.n	8001df2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	3b01      	subs	r3, #1
 8001dec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	019f800c 	.word	0x019f800c
 8001e08:	feeefffc 	.word	0xfeeefffc

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e11e      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b91      	ldr	r3, [pc, #580]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 020f 	bic.w	r2, r3, #15
 8001e3a:	498c      	ldr	r1, [pc, #560]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b8a      	ldr	r3, [pc, #552]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e106      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d073      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d129      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e68:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0f4      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e78:	f000 f99e 	bl	80021b8 <RCC_GetSysClockFreqFromPLLSource>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_ClockConfig+0x268>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d93f      	bls.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e86:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d033      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d12f      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ea6:	4b72      	ldr	r3, [pc, #456]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eae:	4a70      	ldr	r2, [pc, #448]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e024      	b.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0c6      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0be      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ee4:	f000 f8ce 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4a61      	ldr	r2, [pc, #388]	; (8002074 <HAL_RCC_ClockConfig+0x268>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d909      	bls.n	8001f06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001efa:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4957      	ldr	r1, [pc, #348]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f18:	f7ff f8f2 	bl	8001100 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7ff f8ee 	bl	8001100 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e095      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f80:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b80      	cmp	r3, #128	; 0x80
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4a32      	ldr	r2, [pc, #200]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d21d      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 020f 	bic.w	r2, r3, #15
 8001fc4:	4929      	ldr	r1, [pc, #164]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f898 	bl	8001100 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f894 	bl	8001100 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e03b      	b.n	8002062 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x260>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1ed      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4917      	ldr	r1, [pc, #92]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490f      	ldr	r1, [pc, #60]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002036:	f000 f825 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_ClockConfig+0x264>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	490c      	ldr	r1, [pc, #48]	; (8002078 <HAL_RCC_ClockConfig+0x26c>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_RCC_ClockConfig+0x270>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RCC_ClockConfig+0x274>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f804 	bl	8001068 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	04c4b400 	.word	0x04c4b400
 8002078:	08005ba4 	.word	0x08005ba4
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d102      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e047      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e03e      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d136      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3301      	adds	r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d8:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	0a12      	lsrs	r2, r2, #8
 80020e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
      break;
 80020f0:	e00c      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	0a12      	lsrs	r2, r2, #8
 8002100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
      break;
 800210a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0e5b      	lsrs	r3, r3, #25
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	e001      	b.n	800212c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800212c:	693b      	ldr	r3, [r7, #16]
}
 800212e:	4618      	mov	r0, r3
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_GetHCLKFreq+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002164:	f7ff fff0 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	4904      	ldr	r1, [pc, #16]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	08005bb4 	.word	0x08005bb4

0800218c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002190:	f7ff ffda 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	0adb      	lsrs	r3, r3, #11
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08005bb4 	.word	0x08005bb4

080021b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3301      	adds	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d10c      	bne.n	80021f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e6:	68d2      	ldr	r2, [r2, #12]
 80021e8:	0a12      	lsrs	r2, r2, #8
 80021ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
    break;
 80021f4:	e00c      	b.n	8002210 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002200:	68d2      	ldr	r2, [r2, #12]
 8002202:	0a12      	lsrs	r2, r2, #8
 8002204:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
    break;
 800220e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0e5b      	lsrs	r3, r3, #25
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40021000 	.word	0x40021000
 800223c:	007a1200 	.word	0x007a1200
 8002240:	00f42400 	.word	0x00f42400

08002244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800224c:	2300      	movs	r3, #0
 800224e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002250:	2300      	movs	r3, #0
 8002252:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8098 	beq.w	8002392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	6593      	str	r3, [r2, #88]	; 0x58
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a39      	ldr	r2, [pc, #228]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800229a:	f7fe ff31 	bl	8001100 <HAL_GetTick>
 800229e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022a0:	e009      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe ff2d 	bl	8001100 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d902      	bls.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	74fb      	strb	r3, [r7, #19]
        break;
 80022b4:	e005      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0ef      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d159      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01e      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d019      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002310:	4a18      	ldr	r2, [pc, #96]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe feed 	bl	8001100 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002328:	e00b      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fee9 	bl	8001100 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d902      	bls.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	74fb      	strb	r3, [r7, #19]
            break;
 8002340:	e006      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ec      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10b      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800236c:	e008      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	74bb      	strb	r3, [r7, #18]
 8002372:	e005      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002380:	7c7b      	ldrb	r3, [r7, #17]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d105      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002386:	4ba6      	ldr	r3, [pc, #664]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	4aa5      	ldr	r2, [pc, #660]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002390:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800239e:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f023 0203 	bic.w	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	499c      	ldr	r1, [pc, #624]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c0:	4b97      	ldr	r3, [pc, #604]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 020c 	bic.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4994      	ldr	r1, [pc, #592]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e2:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	498b      	ldr	r1, [pc, #556]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002404:	4b86      	ldr	r3, [pc, #536]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	4983      	ldr	r1, [pc, #524]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002426:	4b7e      	ldr	r3, [pc, #504]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	497a      	ldr	r1, [pc, #488]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002448:	4b75      	ldr	r3, [pc, #468]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	4972      	ldr	r1, [pc, #456]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800246a:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4969      	ldr	r1, [pc, #420]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800248c:	4b64      	ldr	r3, [pc, #400]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4961      	ldr	r1, [pc, #388]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ae:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	4958      	ldr	r1, [pc, #352]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	4950      	ldr	r1, [pc, #320]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f0:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a4a      	ldr	r2, [pc, #296]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002508:	4b45      	ldr	r3, [pc, #276]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	4942      	ldr	r1, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a3c      	ldr	r2, [pc, #240]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002532:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d015      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4934      	ldr	r1, [pc, #208]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255e:	d105      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a2e      	ldr	r2, [pc, #184]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d015      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002586:	4926      	ldr	r1, [pc, #152]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002596:	d105      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	4918      	ldr	r1, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ce:	d105      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	490a      	ldr	r1, [pc, #40]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002606:	d105      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002614:	7cbb      	ldrb	r3, [r7, #18]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e049      	b.n	80026ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fb8e 	bl	8000d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f000 fc26 	bl	8002eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e049      	b.n	8002778 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f841 	bl	8002780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f000 fbcf 	bl	8002eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d020      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0202 	mvn.w	r2, #2
 80027c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fb4a 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fb3c 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fb4d 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d020      	beq.n	8002844 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0204 	mvn.w	r2, #4
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2202      	movs	r2, #2
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fb24 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fb16 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fb27 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d020      	beq.n	8002890 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0208 	mvn.w	r2, #8
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2204      	movs	r2, #4
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fafe 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 faf0 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fb01 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d020      	beq.n	80028dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01b      	beq.n	80028dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0210 	mvn.w	r2, #16
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2208      	movs	r2, #8
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fad8 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 faca 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fadb 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0201 	mvn.w	r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 faa8 	bl	8002e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 f809 	bl	8003940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00c      	beq.n	8002952 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800294a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f001 f801 	bl	8003954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00c      	beq.n	8002976 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800296e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fa95 	bl	8002ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f06f 0220 	mvn.w	r2, #32
 8002992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 ffc9 	bl	800392c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 ffd5 	bl	8003968 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00c      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80029da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 ffcd 	bl	800397c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00c      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 ffc5 	bl	8003990 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00c      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 ffbd 	bl	80039a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0ff      	b.n	8002c52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b14      	cmp	r3, #20
 8002a5e:	f200 80f0 	bhi.w	8002c42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a62:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002abd 	.word	0x08002abd
 8002a6c:	08002c43 	.word	0x08002c43
 8002a70:	08002c43 	.word	0x08002c43
 8002a74:	08002c43 	.word	0x08002c43
 8002a78:	08002afd 	.word	0x08002afd
 8002a7c:	08002c43 	.word	0x08002c43
 8002a80:	08002c43 	.word	0x08002c43
 8002a84:	08002c43 	.word	0x08002c43
 8002a88:	08002b3f 	.word	0x08002b3f
 8002a8c:	08002c43 	.word	0x08002c43
 8002a90:	08002c43 	.word	0x08002c43
 8002a94:	08002c43 	.word	0x08002c43
 8002a98:	08002b7f 	.word	0x08002b7f
 8002a9c:	08002c43 	.word	0x08002c43
 8002aa0:	08002c43 	.word	0x08002c43
 8002aa4:	08002c43 	.word	0x08002c43
 8002aa8:	08002bc1 	.word	0x08002bc1
 8002aac:	08002c43 	.word	0x08002c43
 8002ab0:	08002c43 	.word	0x08002c43
 8002ab4:	08002c43 	.word	0x08002c43
 8002ab8:	08002c01 	.word	0x08002c01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fa92 	bl	8002fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0208 	orr.w	r2, r2, #8
 8002ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6999      	ldr	r1, [r3, #24]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	619a      	str	r2, [r3, #24]
      break;
 8002afa:	e0a5      	b.n	8002c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fb02 	bl	800310c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	021a      	lsls	r2, r3, #8
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	619a      	str	r2, [r3, #24]
      break;
 8002b3c:	e084      	b.n	8002c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fb6b 	bl	8003220 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0208 	orr.w	r2, r2, #8
 8002b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0204 	bic.w	r2, r2, #4
 8002b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69d9      	ldr	r1, [r3, #28]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	61da      	str	r2, [r3, #28]
      break;
 8002b7c:	e064      	b.n	8002c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fbd3 	bl	8003330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	61da      	str	r2, [r3, #28]
      break;
 8002bbe:	e043      	b.n	8002c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fc3c 	bl	8003444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0208 	orr.w	r2, r2, #8
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002bfe:	e023      	b.n	8002c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fc80 	bl	800350c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	021a      	lsls	r2, r3, #8
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c40:	e002      	b.n	8002c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
      break;
 8002c46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop

08002c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_TIM_ConfigClockSource+0x1c>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0de      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x1da>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f000 80a9 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002cb8:	4a61      	ldr	r2, [pc, #388]	; (8002e40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	f200 80ae 	bhi.w	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002cc0:	4a60      	ldr	r2, [pc, #384]	; (8002e44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f000 80a1 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002cc8:	4a5e      	ldr	r2, [pc, #376]	; (8002e44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	f200 80a6 	bhi.w	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002cd0:	4a5d      	ldr	r2, [pc, #372]	; (8002e48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f000 8099 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002cd8:	4a5b      	ldr	r2, [pc, #364]	; (8002e48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	f200 809e 	bhi.w	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002ce0:	4a5a      	ldr	r2, [pc, #360]	; (8002e4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	f000 8091 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f200 8096 	bhi.w	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002cf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002cf4:	f000 8089 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002cf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002cfc:	f200 808e 	bhi.w	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d04:	d03e      	beq.n	8002d84 <HAL_TIM_ConfigClockSource+0x128>
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	f200 8087 	bhi.w	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d12:	f000 8086 	beq.w	8002e22 <HAL_TIM_ConfigClockSource+0x1c6>
 8002d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1a:	d87f      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d1c:	2b70      	cmp	r3, #112	; 0x70
 8002d1e:	d01a      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xfa>
 8002d20:	2b70      	cmp	r3, #112	; 0x70
 8002d22:	d87b      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d24:	2b60      	cmp	r3, #96	; 0x60
 8002d26:	d050      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x16e>
 8002d28:	2b60      	cmp	r3, #96	; 0x60
 8002d2a:	d877      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d2c:	2b50      	cmp	r3, #80	; 0x50
 8002d2e:	d03c      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x14e>
 8002d30:	2b50      	cmp	r3, #80	; 0x50
 8002d32:	d873      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d058      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x18e>
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d86f      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d3c:	2b30      	cmp	r3, #48	; 0x30
 8002d3e:	d064      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d40:	2b30      	cmp	r3, #48	; 0x30
 8002d42:	d86b      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d060      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d867      	bhi.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d05c      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d05a      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x1ae>
 8002d54:	e062      	b.n	8002e1c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d66:	f000 fcb3 	bl	80036d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	609a      	str	r2, [r3, #8]
      break;
 8002d82:	e04f      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d94:	f000 fc9c 	bl	80036d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da6:	609a      	str	r2, [r3, #8]
      break;
 8002da8:	e03c      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 fc0e 	bl	80035d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2150      	movs	r1, #80	; 0x50
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fc67 	bl	8003696 <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e02c      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f000 fc2d 	bl	8003636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2160      	movs	r1, #96	; 0x60
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc57 	bl	8003696 <TIM_ITRx_SetConfig>
      break;
 8002de8:	e01c      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df6:	461a      	mov	r2, r3
 8002df8:	f000 fbee 	bl	80035d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2140      	movs	r1, #64	; 0x40
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fc47 	bl	8003696 <TIM_ITRx_SetConfig>
      break;
 8002e08:	e00c      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f000 fc3e 	bl	8003696 <TIM_ITRx_SetConfig>
      break;
 8002e1a:	e003      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e20:	e000      	b.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	00100070 	.word	0x00100070
 8002e44:	00100040 	.word	0x00100040
 8002e48:	00100030 	.word	0x00100030
 8002e4c:	00100020 	.word	0x00100020

08002e50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <TIM_Base_SetConfig+0x11c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00f      	beq.n	8002eec <TIM_Base_SetConfig+0x38>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d00b      	beq.n	8002eec <TIM_Base_SetConfig+0x38>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3f      	ldr	r2, [pc, #252]	; (8002fd4 <TIM_Base_SetConfig+0x120>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_Base_SetConfig+0x38>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3e      	ldr	r2, [pc, #248]	; (8002fd8 <TIM_Base_SetConfig+0x124>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_Base_SetConfig+0x38>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3d      	ldr	r2, [pc, #244]	; (8002fdc <TIM_Base_SetConfig+0x128>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <TIM_Base_SetConfig+0x11c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01b      	beq.n	8002f3e <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d017      	beq.n	8002f3e <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <TIM_Base_SetConfig+0x120>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <TIM_Base_SetConfig+0x8a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <TIM_Base_SetConfig+0x124>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00f      	beq.n	8002f3e <TIM_Base_SetConfig+0x8a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <TIM_Base_SetConfig+0x128>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0x8a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0x8a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <TIM_Base_SetConfig+0x130>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0x8a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2b      	ldr	r2, [pc, #172]	; (8002fe8 <TIM_Base_SetConfig+0x134>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <TIM_Base_SetConfig+0x11c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00f      	beq.n	8002f9c <TIM_Base_SetConfig+0xe8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <TIM_Base_SetConfig+0x128>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <TIM_Base_SetConfig+0xe8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0xe8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <TIM_Base_SetConfig+0x130>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0xe8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <TIM_Base_SetConfig+0x134>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d105      	bne.n	8002fc2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f023 0201 	bic.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	611a      	str	r2, [r3, #16]
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800
 8002fdc:	40013400 	.word	0x40013400
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800

08002fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f023 0201 	bic.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 0302 	bic.w	r3, r3, #2
 8003038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <TIM_OC1_SetConfig+0x10c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00f      	beq.n	800306c <TIM_OC1_SetConfig+0x80>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <TIM_OC1_SetConfig+0x110>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <TIM_OC1_SetConfig+0x80>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <TIM_OC1_SetConfig+0x114>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <TIM_OC1_SetConfig+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a29      	ldr	r2, [pc, #164]	; (8003104 <TIM_OC1_SetConfig+0x118>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_OC1_SetConfig+0x80>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a28      	ldr	r2, [pc, #160]	; (8003108 <TIM_OC1_SetConfig+0x11c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10c      	bne.n	8003086 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0308 	bic.w	r3, r3, #8
 8003072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <TIM_OC1_SetConfig+0x10c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00f      	beq.n	80030ae <TIM_OC1_SetConfig+0xc2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <TIM_OC1_SetConfig+0x110>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00b      	beq.n	80030ae <TIM_OC1_SetConfig+0xc2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <TIM_OC1_SetConfig+0x114>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <TIM_OC1_SetConfig+0xc2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a18      	ldr	r2, [pc, #96]	; (8003104 <TIM_OC1_SetConfig+0x118>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d003      	beq.n	80030ae <TIM_OC1_SetConfig+0xc2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a17      	ldr	r2, [pc, #92]	; (8003108 <TIM_OC1_SetConfig+0x11c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d111      	bne.n	80030d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	621a      	str	r2, [r3, #32]
}
 80030ec:	bf00      	nop
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40013400 	.word	0x40013400
 8003100:	40014000 	.word	0x40014000
 8003104:	40014400 	.word	0x40014400
 8003108:	40014800 	.word	0x40014800

0800310c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 0210 	bic.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0320 	bic.w	r3, r3, #32
 800315a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a28      	ldr	r2, [pc, #160]	; (800320c <TIM_OC2_SetConfig+0x100>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_OC2_SetConfig+0x6c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a27      	ldr	r2, [pc, #156]	; (8003210 <TIM_OC2_SetConfig+0x104>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10d      	bne.n	8003194 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800317e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a1d      	ldr	r2, [pc, #116]	; (800320c <TIM_OC2_SetConfig+0x100>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00f      	beq.n	80031bc <TIM_OC2_SetConfig+0xb0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <TIM_OC2_SetConfig+0x104>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00b      	beq.n	80031bc <TIM_OC2_SetConfig+0xb0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <TIM_OC2_SetConfig+0x108>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <TIM_OC2_SetConfig+0xb0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <TIM_OC2_SetConfig+0x10c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d003      	beq.n	80031bc <TIM_OC2_SetConfig+0xb0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a19      	ldr	r2, [pc, #100]	; (800321c <TIM_OC2_SetConfig+0x110>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d113      	bne.n	80031e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40013400 	.word	0x40013400
 8003214:	40014000 	.word	0x40014000
 8003218:	40014400 	.word	0x40014400
 800321c:	40014800 	.word	0x40014800

08003220 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800326c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <TIM_OC3_SetConfig+0xfc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d003      	beq.n	800328a <TIM_OC3_SetConfig+0x6a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a26      	ldr	r2, [pc, #152]	; (8003320 <TIM_OC3_SetConfig+0x100>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10d      	bne.n	80032a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <TIM_OC3_SetConfig+0xfc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00f      	beq.n	80032ce <TIM_OC3_SetConfig+0xae>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <TIM_OC3_SetConfig+0x100>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <TIM_OC3_SetConfig+0xae>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <TIM_OC3_SetConfig+0x104>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_OC3_SetConfig+0xae>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <TIM_OC3_SetConfig+0x108>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_OC3_SetConfig+0xae>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <TIM_OC3_SetConfig+0x10c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d113      	bne.n	80032f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	621a      	str	r2, [r3, #32]
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40013400 	.word	0x40013400
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800

08003330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a28      	ldr	r2, [pc, #160]	; (8003430 <TIM_OC4_SetConfig+0x100>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_OC4_SetConfig+0x6c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a27      	ldr	r2, [pc, #156]	; (8003434 <TIM_OC4_SetConfig+0x104>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10d      	bne.n	80033b8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <TIM_OC4_SetConfig+0x100>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00f      	beq.n	80033e0 <TIM_OC4_SetConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <TIM_OC4_SetConfig+0x104>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <TIM_OC4_SetConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <TIM_OC4_SetConfig+0x108>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <TIM_OC4_SetConfig+0xb0>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <TIM_OC4_SetConfig+0x10c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_OC4_SetConfig+0xb0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a19      	ldr	r2, [pc, #100]	; (8003440 <TIM_OC4_SetConfig+0x110>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d113      	bne.n	8003408 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	019b      	lsls	r3, r3, #6
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40013400 	.word	0x40013400
 8003438:	40014000 	.word	0x40014000
 800343c:	40014400 	.word	0x40014400
 8003440:	40014800 	.word	0x40014800

08003444 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <TIM_OC5_SetConfig+0xb4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_OC5_SetConfig+0x7a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a16      	ldr	r2, [pc, #88]	; (80034fc <TIM_OC5_SetConfig+0xb8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_OC5_SetConfig+0x7a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a15      	ldr	r2, [pc, #84]	; (8003500 <TIM_OC5_SetConfig+0xbc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_OC5_SetConfig+0x7a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <TIM_OC5_SetConfig+0xc0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_OC5_SetConfig+0x7a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a13      	ldr	r2, [pc, #76]	; (8003508 <TIM_OC5_SetConfig+0xc4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d109      	bne.n	80034d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40013400 	.word	0x40013400
 8003500:	40014000 	.word	0x40014000
 8003504:	40014400 	.word	0x40014400
 8003508:	40014800 	.word	0x40014800

0800350c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	051b      	lsls	r3, r3, #20
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <TIM_OC6_SetConfig+0xb8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00f      	beq.n	8003588 <TIM_OC6_SetConfig+0x7c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <TIM_OC6_SetConfig+0xbc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00b      	beq.n	8003588 <TIM_OC6_SetConfig+0x7c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a16      	ldr	r2, [pc, #88]	; (80035cc <TIM_OC6_SetConfig+0xc0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <TIM_OC6_SetConfig+0x7c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <TIM_OC6_SetConfig+0xc4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_OC6_SetConfig+0x7c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <TIM_OC6_SetConfig+0xc8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d109      	bne.n	800359c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	029b      	lsls	r3, r3, #10
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40013400 	.word	0x40013400
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800

080035d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 030a 	bic.w	r3, r3, #10
 8003614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	621a      	str	r2, [r3, #32]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003636:	b480      	push	{r7}
 8003638:	b087      	sub	sp, #28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f023 0210 	bic.w	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	031b      	lsls	r3, r3, #12
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003672:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80036ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f043 0307 	orr.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003724:	2302      	movs	r3, #2
 8003726:	e065      	b.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d108      	bne.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379e:	d013      	beq.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a17      	ldr	r2, [pc, #92]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10c      	bne.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800
 8003810:	40014000 	.word	0x40014000

08003814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800382c:	2302      	movs	r3, #2
 800382e:	e073      	b.n	8003918 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d11c      	bne.n	8003906 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	051b      	lsls	r3, r3, #20
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40013400 	.word	0x40013400

0800392c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e042      	b.n	8003a50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fd faaf 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2224      	movs	r2, #36	; 0x24
 80039e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fb82 	bl	800410c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8b3 	bl	8003b74 <UART_SetConfig>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e01b      	b.n	8003a50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fc01 	bl	8004250 <UART_CheckIdleState>
 8003a4e:	4603      	mov	r3, r0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d17b      	bne.n	8003b6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_Transmit+0x26>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e074      	b.n	8003b6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2221      	movs	r2, #33	; 0x21
 8003a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fd fb35 	bl	8001100 <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Transmit+0x6c>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003acc:	e030      	b.n	8003b30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fc63 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e03d      	b.n	8003b6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e007      	b.n	8003b1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1c8      	bne.n	8003ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fc2c 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e006      	b.n	8003b6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b78:	b08c      	sub	sp, #48	; 0x30
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4bab      	ldr	r3, [pc, #684]	; (8003e50 <UART_SetConfig+0x2dc>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4aa0      	ldr	r2, [pc, #640]	; (8003e54 <UART_SetConfig+0x2e0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f023 010f 	bic.w	r1, r3, #15
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a91      	ldr	r2, [pc, #580]	; (8003e58 <UART_SetConfig+0x2e4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d125      	bne.n	8003c64 <UART_SetConfig+0xf0>
 8003c18:	4b90      	ldr	r3, [pc, #576]	; (8003e5c <UART_SetConfig+0x2e8>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d81a      	bhi.n	8003c5c <UART_SetConfig+0xe8>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0xb8>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c4d 	.word	0x08003c4d
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c55 	.word	0x08003c55
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c42:	e0d6      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4a:	e0d2      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c52:	e0ce      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	e0ca      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e0c6      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a7d      	ldr	r2, [pc, #500]	; (8003e60 <UART_SetConfig+0x2ec>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d138      	bne.n	8003ce0 <UART_SetConfig+0x16c>
 8003c6e:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <UART_SetConfig+0x2e8>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d82d      	bhi.n	8003cd8 <UART_SetConfig+0x164>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0x110>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003cd9 	.word	0x08003cd9
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003cd9 	.word	0x08003cd9
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cd9 	.word	0x08003cd9
 8003ca4:	08003cc1 	.word	0x08003cc1
 8003ca8:	08003cd9 	.word	0x08003cd9
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e098      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc6:	e094      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cce:	e090      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd6:	e08c      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cde:	e088      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a5f      	ldr	r2, [pc, #380]	; (8003e64 <UART_SetConfig+0x2f0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d125      	bne.n	8003d36 <UART_SetConfig+0x1c2>
 8003cea:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <UART_SetConfig+0x2e8>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cf4:	2b30      	cmp	r3, #48	; 0x30
 8003cf6:	d016      	beq.n	8003d26 <UART_SetConfig+0x1b2>
 8003cf8:	2b30      	cmp	r3, #48	; 0x30
 8003cfa:	d818      	bhi.n	8003d2e <UART_SetConfig+0x1ba>
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d00a      	beq.n	8003d16 <UART_SetConfig+0x1a2>
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d814      	bhi.n	8003d2e <UART_SetConfig+0x1ba>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <UART_SetConfig+0x19a>
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d008      	beq.n	8003d1e <UART_SetConfig+0x1aa>
 8003d0c:	e00f      	b.n	8003d2e <UART_SetConfig+0x1ba>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d14:	e06d      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1c:	e069      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d24:	e065      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d26:	2308      	movs	r3, #8
 8003d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2c:	e061      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d2e:	2310      	movs	r3, #16
 8003d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d34:	e05d      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a4b      	ldr	r2, [pc, #300]	; (8003e68 <UART_SetConfig+0x2f4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d125      	bne.n	8003d8c <UART_SetConfig+0x218>
 8003d40:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <UART_SetConfig+0x2e8>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d4c:	d016      	beq.n	8003d7c <UART_SetConfig+0x208>
 8003d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d50:	d818      	bhi.n	8003d84 <UART_SetConfig+0x210>
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d00a      	beq.n	8003d6c <UART_SetConfig+0x1f8>
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d814      	bhi.n	8003d84 <UART_SetConfig+0x210>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <UART_SetConfig+0x1f0>
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d008      	beq.n	8003d74 <UART_SetConfig+0x200>
 8003d62:	e00f      	b.n	8003d84 <UART_SetConfig+0x210>
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6a:	e042      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d72:	e03e      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d74:	2304      	movs	r3, #4
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7a:	e03a      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d82:	e036      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	e032      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <UART_SetConfig+0x2e0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d12a      	bne.n	8003dec <UART_SetConfig+0x278>
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <UART_SetConfig+0x2e8>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da4:	d01a      	beq.n	8003ddc <UART_SetConfig+0x268>
 8003da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003daa:	d81b      	bhi.n	8003de4 <UART_SetConfig+0x270>
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db0:	d00c      	beq.n	8003dcc <UART_SetConfig+0x258>
 8003db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db6:	d815      	bhi.n	8003de4 <UART_SetConfig+0x270>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <UART_SetConfig+0x250>
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc0:	d008      	beq.n	8003dd4 <UART_SetConfig+0x260>
 8003dc2:	e00f      	b.n	8003de4 <UART_SetConfig+0x270>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e012      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e00e      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dda:	e00a      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e006      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e002      	b.n	8003df2 <UART_SetConfig+0x27e>
 8003dec:	2310      	movs	r3, #16
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <UART_SetConfig+0x2e0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	f040 80a8 	bne.w	8003f4e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d834      	bhi.n	8003e70 <UART_SetConfig+0x2fc>
 8003e06:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0x298>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e71 	.word	0x08003e71
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e71 	.word	0x08003e71
 8003e1c:	08003e3f 	.word	0x08003e3f
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e47 	.word	0x08003e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fe f996 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8003e34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e36:	e021      	b.n	8003e7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <UART_SetConfig+0x2f8>)
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e3c:	e01e      	b.n	8003e7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7fe f921 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8003e42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e44:	e01a      	b.n	8003e7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e4c:	e016      	b.n	8003e7c <UART_SetConfig+0x308>
 8003e4e:	bf00      	nop
 8003e50:	cfff69f3 	.word	0xcfff69f3
 8003e54:	40008000 	.word	0x40008000
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40004400 	.word	0x40004400
 8003e64:	40004800 	.word	0x40004800
 8003e68:	40004c00 	.word	0x40004c00
 8003e6c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 812a 	beq.w	80040d8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	4a9e      	ldr	r2, [pc, #632]	; (8004104 <UART_SetConfig+0x590>)
 8003e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d305      	bcc.n	8003eb4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d903      	bls.n	8003ebc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eba:	e10d      	b.n	80040d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	60fa      	str	r2, [r7, #12]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	4a8e      	ldr	r2, [pc, #568]	; (8004104 <UART_SetConfig+0x590>)
 8003eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ede:	f7fc f9ef 	bl	80002c0 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	020b      	lsls	r3, r1, #8
 8003ef4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ef8:	0202      	lsls	r2, r0, #8
 8003efa:	6979      	ldr	r1, [r7, #20]
 8003efc:	6849      	ldr	r1, [r1, #4]
 8003efe:	0849      	lsrs	r1, r1, #1
 8003f00:	2000      	movs	r0, #0
 8003f02:	460c      	mov	r4, r1
 8003f04:	4605      	mov	r5, r0
 8003f06:	eb12 0804 	adds.w	r8, r2, r4
 8003f0a:	eb43 0905 	adc.w	r9, r3, r5
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	469a      	mov	sl, r3
 8003f16:	4693      	mov	fp, r2
 8003f18:	4652      	mov	r2, sl
 8003f1a:	465b      	mov	r3, fp
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc f9ce 	bl	80002c0 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d308      	bcc.n	8003f46 <UART_SetConfig+0x3d2>
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3a:	d204      	bcs.n	8003f46 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	60da      	str	r2, [r3, #12]
 8003f44:	e0c8      	b.n	80040d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f4c:	e0c4      	b.n	80040d8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f56:	d167      	bne.n	8004028 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d828      	bhi.n	8003fb2 <UART_SetConfig+0x43e>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x3f4>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe f8e8 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f92:	e014      	b.n	8003fbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7fe f8fa 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f9a:	e010      	b.n	8003fbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b5a      	ldr	r3, [pc, #360]	; (8004108 <UART_SetConfig+0x594>)
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fa0:	e00d      	b.n	8003fbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe f86f 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8003fa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa8:	e009      	b.n	8003fbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb0:	e005      	b.n	8003fbe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8089 	beq.w	80040d8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <UART_SetConfig+0x590>)
 8003fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd8:	005a      	lsls	r2, r3, #1
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	441a      	add	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d916      	bls.n	8004020 <UART_SetConfig+0x4ac>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d212      	bcs.n	8004020 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f023 030f 	bic.w	r3, r3, #15
 8004002:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	b29b      	uxth	r3, r3
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	b29a      	uxth	r2, r3
 8004010:	8bfb      	ldrh	r3, [r7, #30]
 8004012:	4313      	orrs	r3, r2
 8004014:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	8bfa      	ldrh	r2, [r7, #30]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	e05b      	b.n	80040d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004026:	e057      	b.n	80040d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800402c:	2b08      	cmp	r3, #8
 800402e:	d828      	bhi.n	8004082 <UART_SetConfig+0x50e>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x4c4>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004083 	.word	0x08004083
 8004048:	08004073 	.word	0x08004073
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
 8004058:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fe f880 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004062:	e014      	b.n	800408e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7fe f892 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 8004068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800406a:	e010      	b.n	800408e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <UART_SetConfig+0x594>)
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004070:	e00d      	b.n	800408e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fe f807 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004078:	e009      	b.n	800408e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004080:	e005      	b.n	800408e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800408c:	bf00      	nop
    }

    if (pclk != 0U)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d021      	beq.n	80040d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <UART_SetConfig+0x590>)
 800409a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800409e:	461a      	mov	r2, r3
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	441a      	add	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	d909      	bls.n	80040d2 <UART_SetConfig+0x55e>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d205      	bcs.n	80040d2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e002      	b.n	80040d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2201      	movs	r2, #1
 80040dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2200      	movs	r2, #0
 80040ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2200      	movs	r2, #0
 80040f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004102:	bf00      	nop
 8004104:	08005bbc 	.word	0x08005bbc
 8004108:	00f42400 	.word	0x00f42400

0800410c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01a      	beq.n	8004222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420a:	d10a      	bne.n	8004222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b098      	sub	sp, #96	; 0x60
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004260:	f7fc ff4e 	bl	8001100 <HAL_GetTick>
 8004264:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d12f      	bne.n	80042d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f88e 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d022      	beq.n	80042d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a2:	653b      	str	r3, [r7, #80]	; 0x50
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
 80042ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e6      	bne.n	800428e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e063      	b.n	800439c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d149      	bne.n	8004376 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ea:	2200      	movs	r2, #0
 80042ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f857 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d03c      	beq.n	8004376 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	623b      	str	r3, [r7, #32]
   return(result);
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
 800431c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e6      	bne.n	80042fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	60fb      	str	r3, [r7, #12]
   return(result);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	64bb      	str	r3, [r7, #72]	; 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434e:	61fa      	str	r2, [r7, #28]
 8004350:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	69b9      	ldr	r1, [r7, #24]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	617b      	str	r3, [r7, #20]
   return(result);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e012      	b.n	800439c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3758      	adds	r7, #88	; 0x58
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b4:	e04f      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d04b      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fc fe9f 	bl	8001100 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e04e      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d037      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d034      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d031      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d110      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2208      	movs	r2, #8
 8004406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f838 	bl	800447e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2208      	movs	r2, #8
 8004412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e029      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	d111      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f81e 	bl	800447e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d0a0      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447e:	b480      	push	{r7}
 8004480:	b095      	sub	sp, #84	; 0x54
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	643b      	str	r3, [r7, #64]	; 0x40
 80044a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3308      	adds	r3, #8
 80044da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e3      	bne.n	80044b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d118      	bne.n	800452a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	60bb      	str	r3, [r7, #8]
   return(result);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6979      	ldr	r1, [r7, #20]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	613b      	str	r3, [r7, #16]
   return(result);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e6      	bne.n	80044f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800453e:	bf00      	nop
 8004540:	3754      	adds	r7, #84	; 0x54
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UARTEx_DisableFifoMode+0x16>
 800455c:	2302      	movs	r3, #2
 800455e:	e027      	b.n	80045b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	; 0x24
 800456c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800458e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e02d      	b.n	8004630 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f84f 	bl	80046b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800464c:	2302      	movs	r3, #2
 800464e:	e02d      	b.n	80046ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0201 	bic.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f811 	bl	80046b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d108      	bne.n	80046d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046d4:	e031      	b.n	800473a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046d6:	2308      	movs	r3, #8
 80046d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046da:	2308      	movs	r3, #8
 80046dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	0e5b      	lsrs	r3, r3, #25
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	0f5b      	lsrs	r3, r3, #29
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046fe:	7bbb      	ldrb	r3, [r7, #14]
 8004700:	7b3a      	ldrb	r2, [r7, #12]
 8004702:	4911      	ldr	r1, [pc, #68]	; (8004748 <UARTEx_SetNbDataToProcess+0x94>)
 8004704:	5c8a      	ldrb	r2, [r1, r2]
 8004706:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800470a:	7b3a      	ldrb	r2, [r7, #12]
 800470c:	490f      	ldr	r1, [pc, #60]	; (800474c <UARTEx_SetNbDataToProcess+0x98>)
 800470e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004710:	fb93 f3f2 	sdiv	r3, r3, r2
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	7b7a      	ldrb	r2, [r7, #13]
 8004720:	4909      	ldr	r1, [pc, #36]	; (8004748 <UARTEx_SetNbDataToProcess+0x94>)
 8004722:	5c8a      	ldrb	r2, [r1, r2]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004728:	7b7a      	ldrb	r2, [r7, #13]
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <UARTEx_SetNbDataToProcess+0x98>)
 800472c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800472e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	08005bd4 	.word	0x08005bd4
 800474c:	08005bdc 	.word	0x08005bdc

08004750 <LL_TIM_EnableCounter>:
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f043 0201 	orr.w	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_TIM_CC_EnableChannel>:
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <LL_TIM_CC_DisableChannel>:
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	401a      	ands	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <LL_TIM_OC_SetMode>:
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d02e      	beq.n	8004828 <LL_TIM_OC_SetMode+0x70>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d029      	beq.n	8004824 <LL_TIM_OC_SetMode+0x6c>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d024      	beq.n	8004820 <LL_TIM_OC_SetMode+0x68>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d01f      	beq.n	800481c <LL_TIM_OC_SetMode+0x64>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	d019      	beq.n	8004818 <LL_TIM_OC_SetMode+0x60>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d013      	beq.n	8004814 <LL_TIM_OC_SetMode+0x5c>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d00d      	beq.n	8004810 <LL_TIM_OC_SetMode+0x58>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047fa:	d007      	beq.n	800480c <LL_TIM_OC_SetMode+0x54>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d101      	bne.n	8004808 <LL_TIM_OC_SetMode+0x50>
 8004804:	2308      	movs	r3, #8
 8004806:	e010      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 8004808:	2309      	movs	r3, #9
 800480a:	e00e      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 800480c:	2307      	movs	r3, #7
 800480e:	e00c      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 8004810:	2306      	movs	r3, #6
 8004812:	e00a      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 8004814:	2305      	movs	r3, #5
 8004816:	e008      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 8004818:	2304      	movs	r3, #4
 800481a:	e006      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 800481c:	2303      	movs	r3, #3
 800481e:	e004      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 8004820:	2302      	movs	r3, #2
 8004822:	e002      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <LL_TIM_OC_SetMode+0x72>
 8004828:	2300      	movs	r3, #0
 800482a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3318      	adds	r3, #24
 8004830:	4619      	mov	r1, r3
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <LL_TIM_OC_SetMode+0xb8>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	440b      	add	r3, r1
 800483a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	7dfb      	ldrb	r3, [r7, #23]
 8004842:	490c      	ldr	r1, [pc, #48]	; (8004874 <LL_TIM_OC_SetMode+0xbc>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	4619      	mov	r1, r3
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <LL_TIM_OC_SetMode+0xc0>)
 800484a:	408b      	lsls	r3, r1
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	4908      	ldr	r1, [pc, #32]	; (8004874 <LL_TIM_OC_SetMode+0xbc>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	4619      	mov	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	408b      	lsls	r3, r1
 800485c:	431a      	orrs	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	08005be4 	.word	0x08005be4
 8004874:	08005bf0 	.word	0x08005bf0
 8004878:	00010073 	.word	0x00010073

0800487c <LL_TIM_OC_SetCompareCH1>:
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_TIM_OC_SetCompareCH2>:
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_TIM_OC_SetCompareCH3>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_TIM_EnableAllOutputs>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <pmsm_init>:
volatile uint16_t PMSM_PWM = 0;

#define TIMxCCER_MASK_CH123       (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 )
#define TIMxCCER_MASK_CH1N2N3N    (LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N)

void pmsm_init(){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
	//1. hall sensor initialized in MX_GPIO_Init
	//2. pwm timer done in MX_TIM4_Init
	//3.
	LL_TIM_OC_SetMode( TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 80048f4:	2260      	movs	r2, #96	; 0x60
 80048f6:	2101      	movs	r1, #1
 80048f8:	4814      	ldr	r0, [pc, #80]	; (800494c <pmsm_init+0x5c>)
 80048fa:	f7ff ff5d 	bl	80047b8 <LL_TIM_OC_SetMode>
	LL_TIM_OC_SetMode( TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 80048fe:	2260      	movs	r2, #96	; 0x60
 8004900:	2110      	movs	r1, #16
 8004902:	4812      	ldr	r0, [pc, #72]	; (800494c <pmsm_init+0x5c>)
 8004904:	f7ff ff58 	bl	80047b8 <LL_TIM_OC_SetMode>
	LL_TIM_OC_SetMode( TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 8004908:	2260      	movs	r2, #96	; 0x60
 800490a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800490e:	480f      	ldr	r0, [pc, #60]	; (800494c <pmsm_init+0x5c>)
 8004910:	f7ff ff52 	bl	80047b8 <LL_TIM_OC_SetMode>
	//4. PMSM_SinTimerInit in MX_TIM4_Init
	//5. PMSM_SpeedTimerInit in MX_TIM3_Init
	LL_TIM_EnableCounter( TIM1 );
 8004914:	480d      	ldr	r0, [pc, #52]	; (800494c <pmsm_init+0x5c>)
 8004916:	f7ff ff1b 	bl	8004750 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel( TIM1, TIMxCCER_MASK_CH123 | TIMxCCER_MASK_CH1N2N3N );
 800491a:	f240 5155 	movw	r1, #1365	; 0x555
 800491e:	480b      	ldr	r0, [pc, #44]	; (800494c <pmsm_init+0x5c>)
 8004920:	f7ff ff26 	bl	8004770 <LL_TIM_CC_EnableChannel>
	LL_TIM_OC_SetCompareCH1(TIM1, 0u);
 8004924:	2100      	movs	r1, #0
 8004926:	4809      	ldr	r0, [pc, #36]	; (800494c <pmsm_init+0x5c>)
 8004928:	f7ff ffa8 	bl	800487c <LL_TIM_OC_SetCompareCH1>
	LL_TIM_OC_SetCompareCH2(TIM1, 0u);
 800492c:	2100      	movs	r1, #0
 800492e:	4807      	ldr	r0, [pc, #28]	; (800494c <pmsm_init+0x5c>)
 8004930:	f7ff ffb2 	bl	8004898 <LL_TIM_OC_SetCompareCH2>
	LL_TIM_OC_SetCompareCH3(TIM1, 0u);
 8004934:	2100      	movs	r1, #0
 8004936:	4805      	ldr	r0, [pc, #20]	; (800494c <pmsm_init+0x5c>)
 8004938:	f7ff ffbc 	bl	80048b4 <LL_TIM_OC_SetCompareCH3>
	LL_TIM_EnableAllOutputs(TIM1);
 800493c:	4803      	ldr	r0, [pc, #12]	; (800494c <pmsm_init+0x5c>)
 800493e:	f7ff ffc7 	bl	80048d0 <LL_TIM_EnableAllOutputs>
	pmsm_motor_stop();
 8004942:	f000 f849 	bl	80049d8 <pmsm_motor_stop>
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00

08004950 <pmsm_EXTI9_5_IRQHandler>:


void pmsm_EXTI9_5_IRQHandler(void){
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  if ( ( __HAL_GPIO_EXTI_GET_IT(HALL_H1_Pin) | __HAL_GPIO_EXTI_GET_IT(HALL_H2_Pin) | __HAL_GPIO_EXTI_GET_IT(HALL_H3_Pin) ) != 0x00u)
 8004954:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <pmsm_EXTI9_5_IRQHandler+0x60>)
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <pmsm_EXTI9_5_IRQHandler+0x60>)
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	431a      	orrs	r2, r3
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <pmsm_EXTI9_5_IRQHandler+0x60>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	4313      	orrs	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01b      	beq.n	80049ac <pmsm_EXTI9_5_IRQHandler+0x5c>
    {
      __HAL_GPIO_EXTI_CLEAR_IT(HALL_H1_Pin);
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <pmsm_EXTI9_5_IRQHandler+0x60>)
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	615a      	str	r2, [r3, #20]
      __HAL_GPIO_EXTI_CLEAR_IT(HALL_H2_Pin);
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <pmsm_EXTI9_5_IRQHandler+0x60>)
 800497c:	2280      	movs	r2, #128	; 0x80
 800497e:	615a      	str	r2, [r3, #20]
      __HAL_GPIO_EXTI_CLEAR_IT(HALL_H3_Pin);
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <pmsm_EXTI9_5_IRQHandler+0x60>)
 8004982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004986:	615a      	str	r2, [r3, #20]

      PMSM_Sensors = pmsm_hall_sensors_get_position();
 8004988:	f000 f82e 	bl	80049e8 <pmsm_hall_sensors_get_position>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <pmsm_EXTI9_5_IRQHandler+0x64>)
 8004992:	701a      	strb	r2, [r3, #0]
//      PMSM_Speed_prev = PMSM_Speed;

      if ( PMSM_ModeEnabled == 0 ) {
 8004994:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <pmsm_EXTI9_5_IRQHandler+0x68>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <pmsm_EXTI9_5_IRQHandler+0x5c>
    	  pmsm_motor_commutation( PMSM_Sensors );
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <pmsm_EXTI9_5_IRQHandler+0x64>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f836 	bl	8004a18 <pmsm_motor_commutation>
      }
    }

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049ac:	bf00      	nop
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40010400 	.word	0x40010400
 80049b4:	2000020a 	.word	0x2000020a
 80049b8:	2000020b 	.word	0x2000020b

080049bc <pmsm_sin_table_timer4_handler>:

void pmsm_sin_table_timer4_handler(){
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0

}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <pmsm_timer3_update_handler>:

void pmsm_timer3_update_handler(){
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0

}
 80049ce:	bf00      	nop
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <pmsm_motor_stop>:

void pmsm_motor_stop(){
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0

}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <pmsm_hall_sensors_get_position>:

uint8_t pmsm_hall_sensors_get_position(){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	uint8_t hallpos = ((GPIOB->IDR & 0b111000000) >> 6);
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <pmsm_hall_sensors_get_position+0x28>)
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	71fb      	strb	r3, [r7, #7]
	printf(">> st:%u\r\n", hallpos);
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	4619      	mov	r1, r3
 8004a00:	4804      	ldr	r0, [pc, #16]	; (8004a14 <pmsm_hall_sensors_get_position+0x2c>)
 8004a02:	f000 f989 	bl	8004d18 <iprintf>
	return hallpos;
 8004a06:	79fb      	ldrb	r3, [r7, #7]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	48000400 	.word	0x48000400
 8004a14:	08005b98 	.word	0x08005b98

08004a18 <pmsm_motor_commutation>:

void pmsm_motor_commutation( uint16_t hall_pos ){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	80fb      	strh	r3, [r7, #6]
	memcpy( PMSM_State, PMSM_BRIDGE_STATE_BACKWARD[ hall_pos ], sizeof( PMSM_State ) );
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4a3e      	ldr	r2, [pc, #248]	; (8004b28 <pmsm_motor_commutation+0x110>)
 8004a2e:	441a      	add	r2, r3
 8004a30:	4b3e      	ldr	r3, [pc, #248]	; (8004b2c <pmsm_motor_commutation+0x114>)
 8004a32:	6810      	ldr	r0, [r2, #0]
 8004a34:	6018      	str	r0, [r3, #0]
 8004a36:	8892      	ldrh	r2, [r2, #4]
 8004a38:	809a      	strh	r2, [r3, #4]

	if (PMSM_State[UH]) {
 8004a3a:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <pmsm_motor_commutation+0x114>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <pmsm_motor_commutation+0x3e>
		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 8004a42:	2260      	movs	r2, #96	; 0x60
 8004a44:	2101      	movs	r1, #1
 8004a46:	483a      	ldr	r0, [pc, #232]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a48:	f7ff feb6 	bl	80047b8 <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N );
 8004a4c:	2105      	movs	r1, #5
 8004a4e:	4838      	ldr	r0, [pc, #224]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a50:	f7ff fe8e 	bl	8004770 <LL_TIM_CC_EnableChannel>
 8004a54:	e015      	b.n	8004a82 <pmsm_motor_commutation+0x6a>
	} else {
		// Low side FET: OFF
		LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8004a56:	2101      	movs	r1, #1
 8004a58:	4835      	ldr	r0, [pc, #212]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a5a:	f7ff fe9a 	bl	8004792 <LL_TIM_CC_DisableChannel>

		if (PMSM_State[UL]){
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <pmsm_motor_commutation+0x114>)
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <pmsm_motor_commutation+0x62>
			// High side FET: ON
			LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_FORCED_ACTIVE );
 8004a66:	2250      	movs	r2, #80	; 0x50
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4831      	ldr	r0, [pc, #196]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a6c:	f7ff fea4 	bl	80047b8 <LL_TIM_OC_SetMode>
			LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N );
 8004a70:	2104      	movs	r1, #4
 8004a72:	482f      	ldr	r0, [pc, #188]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a74:	f7ff fe7c 	bl	8004770 <LL_TIM_CC_EnableChannel>
 8004a78:	e003      	b.n	8004a82 <pmsm_motor_commutation+0x6a>
		} else {
			// High side FET: OFF
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	482c      	ldr	r0, [pc, #176]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a7e:	f7ff fe88 	bl	8004792 <LL_TIM_CC_DisableChannel>
		}
	}

	if (PMSM_State[VH]) {
 8004a82:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <pmsm_motor_commutation+0x114>)
 8004a84:	789b      	ldrb	r3, [r3, #2]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <pmsm_motor_commutation+0x86>
		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 8004a8a:	2260      	movs	r2, #96	; 0x60
 8004a8c:	2110      	movs	r1, #16
 8004a8e:	4828      	ldr	r0, [pc, #160]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a90:	f7ff fe92 	bl	80047b8 <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH2N );
 8004a94:	2150      	movs	r1, #80	; 0x50
 8004a96:	4826      	ldr	r0, [pc, #152]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004a98:	f7ff fe6a 	bl	8004770 <LL_TIM_CC_EnableChannel>
 8004a9c:	e015      	b.n	8004aca <pmsm_motor_commutation+0xb2>
	} else {
		// Low side FET: OFF
		LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 8004a9e:	2110      	movs	r1, #16
 8004aa0:	4823      	ldr	r0, [pc, #140]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004aa2:	f7ff fe76 	bl	8004792 <LL_TIM_CC_DisableChannel>

		if (PMSM_State[VL]){
 8004aa6:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <pmsm_motor_commutation+0x114>)
 8004aa8:	78db      	ldrb	r3, [r3, #3]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <pmsm_motor_commutation+0xaa>
			// High side FET: ON
			LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH2N, LL_TIM_OCMODE_FORCED_ACTIVE );
 8004aae:	2250      	movs	r2, #80	; 0x50
 8004ab0:	2140      	movs	r1, #64	; 0x40
 8004ab2:	481f      	ldr	r0, [pc, #124]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004ab4:	f7ff fe80 	bl	80047b8 <LL_TIM_OC_SetMode>
			LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2N );
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	481d      	ldr	r0, [pc, #116]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004abc:	f7ff fe58 	bl	8004770 <LL_TIM_CC_EnableChannel>
 8004ac0:	e003      	b.n	8004aca <pmsm_motor_commutation+0xb2>
		} else {
			// High side FET: OFF
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH2N );
 8004ac2:	2140      	movs	r1, #64	; 0x40
 8004ac4:	481a      	ldr	r0, [pc, #104]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004ac6:	f7ff fe64 	bl	8004792 <LL_TIM_CC_DisableChannel>
		}
	}

	if (PMSM_State[WH]) {
 8004aca:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <pmsm_motor_commutation+0x114>)
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <pmsm_motor_commutation+0xd2>
		LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 8004ad2:	2260      	movs	r2, #96	; 0x60
 8004ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ad8:	4815      	ldr	r0, [pc, #84]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004ada:	f7ff fe6d 	bl	80047b8 <LL_TIM_OC_SetMode>
		LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH3N );
 8004ade:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8004ae2:	4813      	ldr	r0, [pc, #76]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004ae4:	f7ff fe44 	bl	8004770 <LL_TIM_CC_EnableChannel>
		} else {
			// High side FET: OFF
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N );
		}
	}
}
 8004ae8:	e019      	b.n	8004b1e <pmsm_motor_commutation+0x106>
		LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3 );
 8004aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aee:	4810      	ldr	r0, [pc, #64]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004af0:	f7ff fe4f 	bl	8004792 <LL_TIM_CC_DisableChannel>
		if (PMSM_State[WL]){
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <pmsm_motor_commutation+0x114>)
 8004af6:	795b      	ldrb	r3, [r3, #5]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <pmsm_motor_commutation+0xfc>
			LL_TIM_OC_SetMode(TIM1, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_FORCED_ACTIVE );
 8004afc:	2250      	movs	r2, #80	; 0x50
 8004afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b02:	480b      	ldr	r0, [pc, #44]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004b04:	f7ff fe58 	bl	80047b8 <LL_TIM_OC_SetMode>
			LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3N );
 8004b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b0c:	4808      	ldr	r0, [pc, #32]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004b0e:	f7ff fe2f 	bl	8004770 <LL_TIM_CC_EnableChannel>
}
 8004b12:	e004      	b.n	8004b1e <pmsm_motor_commutation+0x106>
			LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH3N );
 8004b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b18:	4805      	ldr	r0, [pc, #20]	; (8004b30 <pmsm_motor_commutation+0x118>)
 8004b1a:	f7ff fe3a 	bl	8004792 <LL_TIM_CC_DisableChannel>
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	08005bfc 	.word	0x08005bfc
 8004b2c:	20000204 	.word	0x20000204
 8004b30:	40012c00 	.word	0x40012c00

08004b34 <pmsm_motor_set_run>:

void pmsm_motor_set_run(void){
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
	PMSM_MotorRunFlag = 1;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <pmsm_motor_set_run+0x14>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	2000020c 	.word	0x2000020c

08004b4c <pmsm_set_PWM>:

void pmsm_set_PWM(uint16_t PWM){
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	80fb      	strh	r3, [r7, #6]
	if (PMSM_ModeEnabled == 0) {
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <pmsm_set_PWM+0x3c>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <pmsm_set_PWM+0x28>
		TIM1->CCR1 = PWM;
 8004b60:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <pmsm_set_PWM+0x40>)
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = PWM;
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <pmsm_set_PWM+0x40>)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = PWM;
 8004b6c:	4a07      	ldr	r2, [pc, #28]	; (8004b8c <pmsm_set_PWM+0x40>)
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	else {
		PMSM_PWM = PWM;
	}
}
 8004b72:	e002      	b.n	8004b7a <pmsm_set_PWM+0x2e>
		PMSM_PWM = PWM;
 8004b74:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <pmsm_set_PWM+0x44>)
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	8013      	strh	r3, [r2, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	2000020b 	.word	0x2000020b
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	2000020e 	.word	0x2000020e

08004b94 <std>:
 8004b94:	2300      	movs	r3, #0
 8004b96:	b510      	push	{r4, lr}
 8004b98:	4604      	mov	r4, r0
 8004b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba2:	6083      	str	r3, [r0, #8]
 8004ba4:	8181      	strh	r1, [r0, #12]
 8004ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ba8:	81c2      	strh	r2, [r0, #14]
 8004baa:	6183      	str	r3, [r0, #24]
 8004bac:	4619      	mov	r1, r3
 8004bae:	2208      	movs	r2, #8
 8004bb0:	305c      	adds	r0, #92	; 0x5c
 8004bb2:	f000 f9bc 	bl	8004f2e <memset>
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <std+0x58>)
 8004bb8:	6263      	str	r3, [r4, #36]	; 0x24
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <std+0x5c>)
 8004bbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <std+0x60>)
 8004bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <std+0x64>)
 8004bc4:	6323      	str	r3, [r4, #48]	; 0x30
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <std+0x68>)
 8004bc8:	6224      	str	r4, [r4, #32]
 8004bca:	429c      	cmp	r4, r3
 8004bcc:	d006      	beq.n	8004bdc <std+0x48>
 8004bce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004bd2:	4294      	cmp	r4, r2
 8004bd4:	d002      	beq.n	8004bdc <std+0x48>
 8004bd6:	33d0      	adds	r3, #208	; 0xd0
 8004bd8:	429c      	cmp	r4, r3
 8004bda:	d105      	bne.n	8004be8 <std+0x54>
 8004bdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be4:	f000 ba1c 	b.w	8005020 <__retarget_lock_init_recursive>
 8004be8:	bd10      	pop	{r4, pc}
 8004bea:	bf00      	nop
 8004bec:	08004ea9 	.word	0x08004ea9
 8004bf0:	08004ecb 	.word	0x08004ecb
 8004bf4:	08004f03 	.word	0x08004f03
 8004bf8:	08004f27 	.word	0x08004f27
 8004bfc:	20000210 	.word	0x20000210

08004c00 <stdio_exit_handler>:
 8004c00:	4a02      	ldr	r2, [pc, #8]	; (8004c0c <stdio_exit_handler+0xc>)
 8004c02:	4903      	ldr	r1, [pc, #12]	; (8004c10 <stdio_exit_handler+0x10>)
 8004c04:	4803      	ldr	r0, [pc, #12]	; (8004c14 <stdio_exit_handler+0x14>)
 8004c06:	f000 b869 	b.w	8004cdc <_fwalk_sglue>
 8004c0a:	bf00      	nop
 8004c0c:	2000000c 	.word	0x2000000c
 8004c10:	080058dd 	.word	0x080058dd
 8004c14:	20000018 	.word	0x20000018

08004c18 <cleanup_stdio>:
 8004c18:	6841      	ldr	r1, [r0, #4]
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <cleanup_stdio+0x34>)
 8004c1c:	4299      	cmp	r1, r3
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	4604      	mov	r4, r0
 8004c22:	d001      	beq.n	8004c28 <cleanup_stdio+0x10>
 8004c24:	f000 fe5a 	bl	80058dc <_fflush_r>
 8004c28:	68a1      	ldr	r1, [r4, #8]
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <cleanup_stdio+0x38>)
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	d002      	beq.n	8004c36 <cleanup_stdio+0x1e>
 8004c30:	4620      	mov	r0, r4
 8004c32:	f000 fe53 	bl	80058dc <_fflush_r>
 8004c36:	68e1      	ldr	r1, [r4, #12]
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <cleanup_stdio+0x3c>)
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	d004      	beq.n	8004c48 <cleanup_stdio+0x30>
 8004c3e:	4620      	mov	r0, r4
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f000 be4a 	b.w	80058dc <_fflush_r>
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000210 	.word	0x20000210
 8004c50:	20000278 	.word	0x20000278
 8004c54:	200002e0 	.word	0x200002e0

08004c58 <global_stdio_init.part.0>:
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <global_stdio_init.part.0+0x30>)
 8004c5c:	4c0b      	ldr	r4, [pc, #44]	; (8004c8c <global_stdio_init.part.0+0x34>)
 8004c5e:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <global_stdio_init.part.0+0x38>)
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	4620      	mov	r0, r4
 8004c64:	2200      	movs	r2, #0
 8004c66:	2104      	movs	r1, #4
 8004c68:	f7ff ff94 	bl	8004b94 <std>
 8004c6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c70:	2201      	movs	r2, #1
 8004c72:	2109      	movs	r1, #9
 8004c74:	f7ff ff8e 	bl	8004b94 <std>
 8004c78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c82:	2112      	movs	r1, #18
 8004c84:	f7ff bf86 	b.w	8004b94 <std>
 8004c88:	20000348 	.word	0x20000348
 8004c8c:	20000210 	.word	0x20000210
 8004c90:	08004c01 	.word	0x08004c01

08004c94 <__sfp_lock_acquire>:
 8004c94:	4801      	ldr	r0, [pc, #4]	; (8004c9c <__sfp_lock_acquire+0x8>)
 8004c96:	f000 b9c4 	b.w	8005022 <__retarget_lock_acquire_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	20000351 	.word	0x20000351

08004ca0 <__sfp_lock_release>:
 8004ca0:	4801      	ldr	r0, [pc, #4]	; (8004ca8 <__sfp_lock_release+0x8>)
 8004ca2:	f000 b9bf 	b.w	8005024 <__retarget_lock_release_recursive>
 8004ca6:	bf00      	nop
 8004ca8:	20000351 	.word	0x20000351

08004cac <__sinit>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	4604      	mov	r4, r0
 8004cb0:	f7ff fff0 	bl	8004c94 <__sfp_lock_acquire>
 8004cb4:	6a23      	ldr	r3, [r4, #32]
 8004cb6:	b11b      	cbz	r3, 8004cc0 <__sinit+0x14>
 8004cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cbc:	f7ff bff0 	b.w	8004ca0 <__sfp_lock_release>
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <__sinit+0x28>)
 8004cc2:	6223      	str	r3, [r4, #32]
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <__sinit+0x2c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f5      	bne.n	8004cb8 <__sinit+0xc>
 8004ccc:	f7ff ffc4 	bl	8004c58 <global_stdio_init.part.0>
 8004cd0:	e7f2      	b.n	8004cb8 <__sinit+0xc>
 8004cd2:	bf00      	nop
 8004cd4:	08004c19 	.word	0x08004c19
 8004cd8:	20000348 	.word	0x20000348

08004cdc <_fwalk_sglue>:
 8004cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	4688      	mov	r8, r1
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cec:	f1b9 0901 	subs.w	r9, r9, #1
 8004cf0:	d505      	bpl.n	8004cfe <_fwalk_sglue+0x22>
 8004cf2:	6824      	ldr	r4, [r4, #0]
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	d1f7      	bne.n	8004ce8 <_fwalk_sglue+0xc>
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d907      	bls.n	8004d14 <_fwalk_sglue+0x38>
 8004d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	d003      	beq.n	8004d14 <_fwalk_sglue+0x38>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4638      	mov	r0, r7
 8004d10:	47c0      	blx	r8
 8004d12:	4306      	orrs	r6, r0
 8004d14:	3568      	adds	r5, #104	; 0x68
 8004d16:	e7e9      	b.n	8004cec <_fwalk_sglue+0x10>

08004d18 <iprintf>:
 8004d18:	b40f      	push	{r0, r1, r2, r3}
 8004d1a:	b507      	push	{r0, r1, r2, lr}
 8004d1c:	4906      	ldr	r1, [pc, #24]	; (8004d38 <iprintf+0x20>)
 8004d1e:	ab04      	add	r3, sp, #16
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d26:	6881      	ldr	r1, [r0, #8]
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	f000 faa7 	bl	800527c <_vfiprintf_r>
 8004d2e:	b003      	add	sp, #12
 8004d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d34:	b004      	add	sp, #16
 8004d36:	4770      	bx	lr
 8004d38:	20000064 	.word	0x20000064

08004d3c <setbuf>:
 8004d3c:	fab1 f281 	clz	r2, r1
 8004d40:	0952      	lsrs	r2, r2, #5
 8004d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d46:	0052      	lsls	r2, r2, #1
 8004d48:	f000 b800 	b.w	8004d4c <setvbuf>

08004d4c <setvbuf>:
 8004d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	461d      	mov	r5, r3
 8004d52:	4b54      	ldr	r3, [pc, #336]	; (8004ea4 <setvbuf+0x158>)
 8004d54:	681f      	ldr	r7, [r3, #0]
 8004d56:	4604      	mov	r4, r0
 8004d58:	460e      	mov	r6, r1
 8004d5a:	4690      	mov	r8, r2
 8004d5c:	b127      	cbz	r7, 8004d68 <setvbuf+0x1c>
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	b913      	cbnz	r3, 8004d68 <setvbuf+0x1c>
 8004d62:	4638      	mov	r0, r7
 8004d64:	f7ff ffa2 	bl	8004cac <__sinit>
 8004d68:	f1b8 0f02 	cmp.w	r8, #2
 8004d6c:	d006      	beq.n	8004d7c <setvbuf+0x30>
 8004d6e:	f1b8 0f01 	cmp.w	r8, #1
 8004d72:	f200 8094 	bhi.w	8004e9e <setvbuf+0x152>
 8004d76:	2d00      	cmp	r5, #0
 8004d78:	f2c0 8091 	blt.w	8004e9e <setvbuf+0x152>
 8004d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7e:	07da      	lsls	r2, r3, #31
 8004d80:	d405      	bmi.n	8004d8e <setvbuf+0x42>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d402      	bmi.n	8004d8e <setvbuf+0x42>
 8004d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8a:	f000 f94a 	bl	8005022 <__retarget_lock_acquire_recursive>
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4638      	mov	r0, r7
 8004d92:	f000 fda3 	bl	80058dc <_fflush_r>
 8004d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d98:	b141      	cbz	r1, 8004dac <setvbuf+0x60>
 8004d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d9e:	4299      	cmp	r1, r3
 8004da0:	d002      	beq.n	8004da8 <setvbuf+0x5c>
 8004da2:	4638      	mov	r0, r7
 8004da4:	f000 f940 	bl	8005028 <_free_r>
 8004da8:	2300      	movs	r3, #0
 8004daa:	6363      	str	r3, [r4, #52]	; 0x34
 8004dac:	2300      	movs	r3, #0
 8004dae:	61a3      	str	r3, [r4, #24]
 8004db0:	6063      	str	r3, [r4, #4]
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	0618      	lsls	r0, r3, #24
 8004db6:	d503      	bpl.n	8004dc0 <setvbuf+0x74>
 8004db8:	6921      	ldr	r1, [r4, #16]
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f000 f934 	bl	8005028 <_free_r>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f1b8 0f02 	cmp.w	r8, #2
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	d05f      	beq.n	8004e92 <setvbuf+0x146>
 8004dd2:	ab01      	add	r3, sp, #4
 8004dd4:	466a      	mov	r2, sp
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f000 fda7 	bl	800592c <__swhatbuf_r>
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	4318      	orrs	r0, r3
 8004de2:	81a0      	strh	r0, [r4, #12]
 8004de4:	bb2d      	cbnz	r5, 8004e32 <setvbuf+0xe6>
 8004de6:	9d00      	ldr	r5, [sp, #0]
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 f969 	bl	80050c0 <malloc>
 8004dee:	4606      	mov	r6, r0
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d150      	bne.n	8004e96 <setvbuf+0x14a>
 8004df4:	f8dd 9000 	ldr.w	r9, [sp]
 8004df8:	45a9      	cmp	r9, r5
 8004dfa:	d13e      	bne.n	8004e7a <setvbuf+0x12e>
 8004dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8004e00:	2200      	movs	r2, #0
 8004e02:	60a2      	str	r2, [r4, #8]
 8004e04:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004e08:	6022      	str	r2, [r4, #0]
 8004e0a:	6122      	str	r2, [r4, #16]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e12:	6162      	str	r2, [r4, #20]
 8004e14:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	07d1      	lsls	r1, r2, #31
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	d404      	bmi.n	8004e2a <setvbuf+0xde>
 8004e20:	059b      	lsls	r3, r3, #22
 8004e22:	d402      	bmi.n	8004e2a <setvbuf+0xde>
 8004e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e26:	f000 f8fd 	bl	8005024 <__retarget_lock_release_recursive>
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	b003      	add	sp, #12
 8004e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	d0d8      	beq.n	8004de8 <setvbuf+0x9c>
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	b913      	cbnz	r3, 8004e40 <setvbuf+0xf4>
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7ff ff36 	bl	8004cac <__sinit>
 8004e40:	f1b8 0f01 	cmp.w	r8, #1
 8004e44:	bf08      	it	eq
 8004e46:	89a3      	ldrheq	r3, [r4, #12]
 8004e48:	6026      	str	r6, [r4, #0]
 8004e4a:	bf04      	itt	eq
 8004e4c:	f043 0301 	orreq.w	r3, r3, #1
 8004e50:	81a3      	strheq	r3, [r4, #12]
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	f013 0208 	ands.w	r2, r3, #8
 8004e58:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004e5c:	d01d      	beq.n	8004e9a <setvbuf+0x14e>
 8004e5e:	07da      	lsls	r2, r3, #31
 8004e60:	bf41      	itttt	mi
 8004e62:	2200      	movmi	r2, #0
 8004e64:	426d      	negmi	r5, r5
 8004e66:	60a2      	strmi	r2, [r4, #8]
 8004e68:	61a5      	strmi	r5, [r4, #24]
 8004e6a:	bf58      	it	pl
 8004e6c:	60a5      	strpl	r5, [r4, #8]
 8004e6e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004e70:	f015 0501 	ands.w	r5, r5, #1
 8004e74:	d0d4      	beq.n	8004e20 <setvbuf+0xd4>
 8004e76:	2500      	movs	r5, #0
 8004e78:	e7d7      	b.n	8004e2a <setvbuf+0xde>
 8004e7a:	4648      	mov	r0, r9
 8004e7c:	f000 f920 	bl	80050c0 <malloc>
 8004e80:	4606      	mov	r6, r0
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d0ba      	beq.n	8004dfc <setvbuf+0xb0>
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	81a3      	strh	r3, [r4, #12]
 8004e8e:	464d      	mov	r5, r9
 8004e90:	e7d1      	b.n	8004e36 <setvbuf+0xea>
 8004e92:	2500      	movs	r5, #0
 8004e94:	e7b4      	b.n	8004e00 <setvbuf+0xb4>
 8004e96:	46a9      	mov	r9, r5
 8004e98:	e7f5      	b.n	8004e86 <setvbuf+0x13a>
 8004e9a:	60a2      	str	r2, [r4, #8]
 8004e9c:	e7e7      	b.n	8004e6e <setvbuf+0x122>
 8004e9e:	f04f 35ff 	mov.w	r5, #4294967295
 8004ea2:	e7c2      	b.n	8004e2a <setvbuf+0xde>
 8004ea4:	20000064 	.word	0x20000064

08004ea8 <__sread>:
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	460c      	mov	r4, r1
 8004eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb0:	f000 f868 	bl	8004f84 <_read_r>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	bfab      	itete	ge
 8004eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eba:	89a3      	ldrhlt	r3, [r4, #12]
 8004ebc:	181b      	addge	r3, r3, r0
 8004ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ec2:	bfac      	ite	ge
 8004ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ec6:	81a3      	strhlt	r3, [r4, #12]
 8004ec8:	bd10      	pop	{r4, pc}

08004eca <__swrite>:
 8004eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ece:	461f      	mov	r7, r3
 8004ed0:	898b      	ldrh	r3, [r1, #12]
 8004ed2:	05db      	lsls	r3, r3, #23
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4616      	mov	r6, r2
 8004eda:	d505      	bpl.n	8004ee8 <__swrite+0x1e>
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f000 f83c 	bl	8004f60 <_lseek_r>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef2:	81a3      	strh	r3, [r4, #12]
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	4628      	mov	r0, r5
 8004efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004efe:	f000 b853 	b.w	8004fa8 <_write_r>

08004f02 <__sseek>:
 8004f02:	b510      	push	{r4, lr}
 8004f04:	460c      	mov	r4, r1
 8004f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0a:	f000 f829 	bl	8004f60 <_lseek_r>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	bf15      	itete	ne
 8004f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f1e:	81a3      	strheq	r3, [r4, #12]
 8004f20:	bf18      	it	ne
 8004f22:	81a3      	strhne	r3, [r4, #12]
 8004f24:	bd10      	pop	{r4, pc}

08004f26 <__sclose>:
 8004f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2a:	f000 b809 	b.w	8004f40 <_close_r>

08004f2e <memset>:
 8004f2e:	4402      	add	r2, r0
 8004f30:	4603      	mov	r3, r0
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d100      	bne.n	8004f38 <memset+0xa>
 8004f36:	4770      	bx	lr
 8004f38:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3c:	e7f9      	b.n	8004f32 <memset+0x4>
	...

08004f40 <_close_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d06      	ldr	r5, [pc, #24]	; (8004f5c <_close_r+0x1c>)
 8004f44:	2300      	movs	r3, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	602b      	str	r3, [r5, #0]
 8004f4c:	f7fb fd19 	bl	8000982 <_close>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_close_r+0x1a>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_close_r+0x1a>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	2000034c 	.word	0x2000034c

08004f60 <_lseek_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	; (8004f80 <_lseek_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fb fd2e 	bl	80009d0 <_lseek>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_lseek_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_lseek_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	2000034c 	.word	0x2000034c

08004f84 <_read_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_read_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fb fcbc 	bl	8000910 <_read>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_read_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_read_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	2000034c 	.word	0x2000034c

08004fa8 <_write_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d07      	ldr	r5, [pc, #28]	; (8004fc8 <_write_r+0x20>)
 8004fac:	4604      	mov	r4, r0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7fb fcc7 	bl	800094a <_write>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_write_r+0x1e>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_write_r+0x1e>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	2000034c 	.word	0x2000034c

08004fcc <__errno>:
 8004fcc:	4b01      	ldr	r3, [pc, #4]	; (8004fd4 <__errno+0x8>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000064 	.word	0x20000064

08004fd8 <__libc_init_array>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4d0d      	ldr	r5, [pc, #52]	; (8005010 <__libc_init_array+0x38>)
 8004fdc:	4c0d      	ldr	r4, [pc, #52]	; (8005014 <__libc_init_array+0x3c>)
 8004fde:	1b64      	subs	r4, r4, r5
 8004fe0:	10a4      	asrs	r4, r4, #2
 8004fe2:	2600      	movs	r6, #0
 8004fe4:	42a6      	cmp	r6, r4
 8004fe6:	d109      	bne.n	8004ffc <__libc_init_array+0x24>
 8004fe8:	4d0b      	ldr	r5, [pc, #44]	; (8005018 <__libc_init_array+0x40>)
 8004fea:	4c0c      	ldr	r4, [pc, #48]	; (800501c <__libc_init_array+0x44>)
 8004fec:	f000 fdc8 	bl	8005b80 <_init>
 8004ff0:	1b64      	subs	r4, r4, r5
 8004ff2:	10a4      	asrs	r4, r4, #2
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	42a6      	cmp	r6, r4
 8004ff8:	d105      	bne.n	8005006 <__libc_init_array+0x2e>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005000:	4798      	blx	r3
 8005002:	3601      	adds	r6, #1
 8005004:	e7ee      	b.n	8004fe4 <__libc_init_array+0xc>
 8005006:	f855 3b04 	ldr.w	r3, [r5], #4
 800500a:	4798      	blx	r3
 800500c:	3601      	adds	r6, #1
 800500e:	e7f2      	b.n	8004ff6 <__libc_init_array+0x1e>
 8005010:	08005c68 	.word	0x08005c68
 8005014:	08005c68 	.word	0x08005c68
 8005018:	08005c68 	.word	0x08005c68
 800501c:	08005c6c 	.word	0x08005c6c

08005020 <__retarget_lock_init_recursive>:
 8005020:	4770      	bx	lr

08005022 <__retarget_lock_acquire_recursive>:
 8005022:	4770      	bx	lr

08005024 <__retarget_lock_release_recursive>:
 8005024:	4770      	bx	lr
	...

08005028 <_free_r>:
 8005028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800502a:	2900      	cmp	r1, #0
 800502c:	d044      	beq.n	80050b8 <_free_r+0x90>
 800502e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005032:	9001      	str	r0, [sp, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f1a1 0404 	sub.w	r4, r1, #4
 800503a:	bfb8      	it	lt
 800503c:	18e4      	addlt	r4, r4, r3
 800503e:	f000 f8e7 	bl	8005210 <__malloc_lock>
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <_free_r+0x94>)
 8005044:	9801      	ldr	r0, [sp, #4]
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	b933      	cbnz	r3, 8005058 <_free_r+0x30>
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6014      	str	r4, [r2, #0]
 800504e:	b003      	add	sp, #12
 8005050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005054:	f000 b8e2 	b.w	800521c <__malloc_unlock>
 8005058:	42a3      	cmp	r3, r4
 800505a:	d908      	bls.n	800506e <_free_r+0x46>
 800505c:	6825      	ldr	r5, [r4, #0]
 800505e:	1961      	adds	r1, r4, r5
 8005060:	428b      	cmp	r3, r1
 8005062:	bf01      	itttt	eq
 8005064:	6819      	ldreq	r1, [r3, #0]
 8005066:	685b      	ldreq	r3, [r3, #4]
 8005068:	1949      	addeq	r1, r1, r5
 800506a:	6021      	streq	r1, [r4, #0]
 800506c:	e7ed      	b.n	800504a <_free_r+0x22>
 800506e:	461a      	mov	r2, r3
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	b10b      	cbz	r3, 8005078 <_free_r+0x50>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d9fa      	bls.n	800506e <_free_r+0x46>
 8005078:	6811      	ldr	r1, [r2, #0]
 800507a:	1855      	adds	r5, r2, r1
 800507c:	42a5      	cmp	r5, r4
 800507e:	d10b      	bne.n	8005098 <_free_r+0x70>
 8005080:	6824      	ldr	r4, [r4, #0]
 8005082:	4421      	add	r1, r4
 8005084:	1854      	adds	r4, r2, r1
 8005086:	42a3      	cmp	r3, r4
 8005088:	6011      	str	r1, [r2, #0]
 800508a:	d1e0      	bne.n	800504e <_free_r+0x26>
 800508c:	681c      	ldr	r4, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	6053      	str	r3, [r2, #4]
 8005092:	440c      	add	r4, r1
 8005094:	6014      	str	r4, [r2, #0]
 8005096:	e7da      	b.n	800504e <_free_r+0x26>
 8005098:	d902      	bls.n	80050a0 <_free_r+0x78>
 800509a:	230c      	movs	r3, #12
 800509c:	6003      	str	r3, [r0, #0]
 800509e:	e7d6      	b.n	800504e <_free_r+0x26>
 80050a0:	6825      	ldr	r5, [r4, #0]
 80050a2:	1961      	adds	r1, r4, r5
 80050a4:	428b      	cmp	r3, r1
 80050a6:	bf04      	itt	eq
 80050a8:	6819      	ldreq	r1, [r3, #0]
 80050aa:	685b      	ldreq	r3, [r3, #4]
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	bf04      	itt	eq
 80050b0:	1949      	addeq	r1, r1, r5
 80050b2:	6021      	streq	r1, [r4, #0]
 80050b4:	6054      	str	r4, [r2, #4]
 80050b6:	e7ca      	b.n	800504e <_free_r+0x26>
 80050b8:	b003      	add	sp, #12
 80050ba:	bd30      	pop	{r4, r5, pc}
 80050bc:	20000354 	.word	0x20000354

080050c0 <malloc>:
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <malloc+0xc>)
 80050c2:	4601      	mov	r1, r0
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f000 b823 	b.w	8005110 <_malloc_r>
 80050ca:	bf00      	nop
 80050cc:	20000064 	.word	0x20000064

080050d0 <sbrk_aligned>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4e0e      	ldr	r6, [pc, #56]	; (800510c <sbrk_aligned+0x3c>)
 80050d4:	460c      	mov	r4, r1
 80050d6:	6831      	ldr	r1, [r6, #0]
 80050d8:	4605      	mov	r5, r0
 80050da:	b911      	cbnz	r1, 80050e2 <sbrk_aligned+0x12>
 80050dc:	f000 fd40 	bl	8005b60 <_sbrk_r>
 80050e0:	6030      	str	r0, [r6, #0]
 80050e2:	4621      	mov	r1, r4
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 fd3b 	bl	8005b60 <_sbrk_r>
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	d00a      	beq.n	8005104 <sbrk_aligned+0x34>
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d007      	beq.n	8005108 <sbrk_aligned+0x38>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 fd30 	bl	8005b60 <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d101      	bne.n	8005108 <sbrk_aligned+0x38>
 8005104:	f04f 34ff 	mov.w	r4, #4294967295
 8005108:	4620      	mov	r0, r4
 800510a:	bd70      	pop	{r4, r5, r6, pc}
 800510c:	20000358 	.word	0x20000358

08005110 <_malloc_r>:
 8005110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005114:	1ccd      	adds	r5, r1, #3
 8005116:	f025 0503 	bic.w	r5, r5, #3
 800511a:	3508      	adds	r5, #8
 800511c:	2d0c      	cmp	r5, #12
 800511e:	bf38      	it	cc
 8005120:	250c      	movcc	r5, #12
 8005122:	2d00      	cmp	r5, #0
 8005124:	4607      	mov	r7, r0
 8005126:	db01      	blt.n	800512c <_malloc_r+0x1c>
 8005128:	42a9      	cmp	r1, r5
 800512a:	d905      	bls.n	8005138 <_malloc_r+0x28>
 800512c:	230c      	movs	r3, #12
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	2600      	movs	r6, #0
 8005132:	4630      	mov	r0, r6
 8005134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800520c <_malloc_r+0xfc>
 800513c:	f000 f868 	bl	8005210 <__malloc_lock>
 8005140:	f8d8 3000 	ldr.w	r3, [r8]
 8005144:	461c      	mov	r4, r3
 8005146:	bb5c      	cbnz	r4, 80051a0 <_malloc_r+0x90>
 8005148:	4629      	mov	r1, r5
 800514a:	4638      	mov	r0, r7
 800514c:	f7ff ffc0 	bl	80050d0 <sbrk_aligned>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	4604      	mov	r4, r0
 8005154:	d155      	bne.n	8005202 <_malloc_r+0xf2>
 8005156:	f8d8 4000 	ldr.w	r4, [r8]
 800515a:	4626      	mov	r6, r4
 800515c:	2e00      	cmp	r6, #0
 800515e:	d145      	bne.n	80051ec <_malloc_r+0xdc>
 8005160:	2c00      	cmp	r4, #0
 8005162:	d048      	beq.n	80051f6 <_malloc_r+0xe6>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	4631      	mov	r1, r6
 8005168:	4638      	mov	r0, r7
 800516a:	eb04 0903 	add.w	r9, r4, r3
 800516e:	f000 fcf7 	bl	8005b60 <_sbrk_r>
 8005172:	4581      	cmp	r9, r0
 8005174:	d13f      	bne.n	80051f6 <_malloc_r+0xe6>
 8005176:	6821      	ldr	r1, [r4, #0]
 8005178:	1a6d      	subs	r5, r5, r1
 800517a:	4629      	mov	r1, r5
 800517c:	4638      	mov	r0, r7
 800517e:	f7ff ffa7 	bl	80050d0 <sbrk_aligned>
 8005182:	3001      	adds	r0, #1
 8005184:	d037      	beq.n	80051f6 <_malloc_r+0xe6>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	442b      	add	r3, r5
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	f8d8 3000 	ldr.w	r3, [r8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d038      	beq.n	8005206 <_malloc_r+0xf6>
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	42a2      	cmp	r2, r4
 8005198:	d12b      	bne.n	80051f2 <_malloc_r+0xe2>
 800519a:	2200      	movs	r2, #0
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e00f      	b.n	80051c0 <_malloc_r+0xb0>
 80051a0:	6822      	ldr	r2, [r4, #0]
 80051a2:	1b52      	subs	r2, r2, r5
 80051a4:	d41f      	bmi.n	80051e6 <_malloc_r+0xd6>
 80051a6:	2a0b      	cmp	r2, #11
 80051a8:	d917      	bls.n	80051da <_malloc_r+0xca>
 80051aa:	1961      	adds	r1, r4, r5
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	6025      	str	r5, [r4, #0]
 80051b0:	bf18      	it	ne
 80051b2:	6059      	strne	r1, [r3, #4]
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	bf08      	it	eq
 80051b8:	f8c8 1000 	streq.w	r1, [r8]
 80051bc:	5162      	str	r2, [r4, r5]
 80051be:	604b      	str	r3, [r1, #4]
 80051c0:	4638      	mov	r0, r7
 80051c2:	f104 060b 	add.w	r6, r4, #11
 80051c6:	f000 f829 	bl	800521c <__malloc_unlock>
 80051ca:	f026 0607 	bic.w	r6, r6, #7
 80051ce:	1d23      	adds	r3, r4, #4
 80051d0:	1af2      	subs	r2, r6, r3
 80051d2:	d0ae      	beq.n	8005132 <_malloc_r+0x22>
 80051d4:	1b9b      	subs	r3, r3, r6
 80051d6:	50a3      	str	r3, [r4, r2]
 80051d8:	e7ab      	b.n	8005132 <_malloc_r+0x22>
 80051da:	42a3      	cmp	r3, r4
 80051dc:	6862      	ldr	r2, [r4, #4]
 80051de:	d1dd      	bne.n	800519c <_malloc_r+0x8c>
 80051e0:	f8c8 2000 	str.w	r2, [r8]
 80051e4:	e7ec      	b.n	80051c0 <_malloc_r+0xb0>
 80051e6:	4623      	mov	r3, r4
 80051e8:	6864      	ldr	r4, [r4, #4]
 80051ea:	e7ac      	b.n	8005146 <_malloc_r+0x36>
 80051ec:	4634      	mov	r4, r6
 80051ee:	6876      	ldr	r6, [r6, #4]
 80051f0:	e7b4      	b.n	800515c <_malloc_r+0x4c>
 80051f2:	4613      	mov	r3, r2
 80051f4:	e7cc      	b.n	8005190 <_malloc_r+0x80>
 80051f6:	230c      	movs	r3, #12
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4638      	mov	r0, r7
 80051fc:	f000 f80e 	bl	800521c <__malloc_unlock>
 8005200:	e797      	b.n	8005132 <_malloc_r+0x22>
 8005202:	6025      	str	r5, [r4, #0]
 8005204:	e7dc      	b.n	80051c0 <_malloc_r+0xb0>
 8005206:	605b      	str	r3, [r3, #4]
 8005208:	deff      	udf	#255	; 0xff
 800520a:	bf00      	nop
 800520c:	20000354 	.word	0x20000354

08005210 <__malloc_lock>:
 8005210:	4801      	ldr	r0, [pc, #4]	; (8005218 <__malloc_lock+0x8>)
 8005212:	f7ff bf06 	b.w	8005022 <__retarget_lock_acquire_recursive>
 8005216:	bf00      	nop
 8005218:	20000350 	.word	0x20000350

0800521c <__malloc_unlock>:
 800521c:	4801      	ldr	r0, [pc, #4]	; (8005224 <__malloc_unlock+0x8>)
 800521e:	f7ff bf01 	b.w	8005024 <__retarget_lock_release_recursive>
 8005222:	bf00      	nop
 8005224:	20000350 	.word	0x20000350

08005228 <__sfputc_r>:
 8005228:	6893      	ldr	r3, [r2, #8]
 800522a:	3b01      	subs	r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	b410      	push	{r4}
 8005230:	6093      	str	r3, [r2, #8]
 8005232:	da08      	bge.n	8005246 <__sfputc_r+0x1e>
 8005234:	6994      	ldr	r4, [r2, #24]
 8005236:	42a3      	cmp	r3, r4
 8005238:	db01      	blt.n	800523e <__sfputc_r+0x16>
 800523a:	290a      	cmp	r1, #10
 800523c:	d103      	bne.n	8005246 <__sfputc_r+0x1e>
 800523e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005242:	f000 bbd5 	b.w	80059f0 <__swbuf_r>
 8005246:	6813      	ldr	r3, [r2, #0]
 8005248:	1c58      	adds	r0, r3, #1
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	7019      	strb	r1, [r3, #0]
 800524e:	4608      	mov	r0, r1
 8005250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005254:	4770      	bx	lr

08005256 <__sfputs_r>:
 8005256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005258:	4606      	mov	r6, r0
 800525a:	460f      	mov	r7, r1
 800525c:	4614      	mov	r4, r2
 800525e:	18d5      	adds	r5, r2, r3
 8005260:	42ac      	cmp	r4, r5
 8005262:	d101      	bne.n	8005268 <__sfputs_r+0x12>
 8005264:	2000      	movs	r0, #0
 8005266:	e007      	b.n	8005278 <__sfputs_r+0x22>
 8005268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800526c:	463a      	mov	r2, r7
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff ffda 	bl	8005228 <__sfputc_r>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d1f3      	bne.n	8005260 <__sfputs_r+0xa>
 8005278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800527c <_vfiprintf_r>:
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	460d      	mov	r5, r1
 8005282:	b09d      	sub	sp, #116	; 0x74
 8005284:	4614      	mov	r4, r2
 8005286:	4698      	mov	r8, r3
 8005288:	4606      	mov	r6, r0
 800528a:	b118      	cbz	r0, 8005294 <_vfiprintf_r+0x18>
 800528c:	6a03      	ldr	r3, [r0, #32]
 800528e:	b90b      	cbnz	r3, 8005294 <_vfiprintf_r+0x18>
 8005290:	f7ff fd0c 	bl	8004cac <__sinit>
 8005294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005296:	07d9      	lsls	r1, r3, #31
 8005298:	d405      	bmi.n	80052a6 <_vfiprintf_r+0x2a>
 800529a:	89ab      	ldrh	r3, [r5, #12]
 800529c:	059a      	lsls	r2, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_vfiprintf_r+0x2a>
 80052a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052a2:	f7ff febe 	bl	8005022 <__retarget_lock_acquire_recursive>
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	071b      	lsls	r3, r3, #28
 80052aa:	d501      	bpl.n	80052b0 <_vfiprintf_r+0x34>
 80052ac:	692b      	ldr	r3, [r5, #16]
 80052ae:	b99b      	cbnz	r3, 80052d8 <_vfiprintf_r+0x5c>
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f000 fbda 	bl	8005a6c <__swsetup_r>
 80052b8:	b170      	cbz	r0, 80052d8 <_vfiprintf_r+0x5c>
 80052ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052bc:	07dc      	lsls	r4, r3, #31
 80052be:	d504      	bpl.n	80052ca <_vfiprintf_r+0x4e>
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	b01d      	add	sp, #116	; 0x74
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	89ab      	ldrh	r3, [r5, #12]
 80052cc:	0598      	lsls	r0, r3, #22
 80052ce:	d4f7      	bmi.n	80052c0 <_vfiprintf_r+0x44>
 80052d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052d2:	f7ff fea7 	bl	8005024 <__retarget_lock_release_recursive>
 80052d6:	e7f3      	b.n	80052c0 <_vfiprintf_r+0x44>
 80052d8:	2300      	movs	r3, #0
 80052da:	9309      	str	r3, [sp, #36]	; 0x24
 80052dc:	2320      	movs	r3, #32
 80052de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e6:	2330      	movs	r3, #48	; 0x30
 80052e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800549c <_vfiprintf_r+0x220>
 80052ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052f0:	f04f 0901 	mov.w	r9, #1
 80052f4:	4623      	mov	r3, r4
 80052f6:	469a      	mov	sl, r3
 80052f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052fc:	b10a      	cbz	r2, 8005302 <_vfiprintf_r+0x86>
 80052fe:	2a25      	cmp	r2, #37	; 0x25
 8005300:	d1f9      	bne.n	80052f6 <_vfiprintf_r+0x7a>
 8005302:	ebba 0b04 	subs.w	fp, sl, r4
 8005306:	d00b      	beq.n	8005320 <_vfiprintf_r+0xa4>
 8005308:	465b      	mov	r3, fp
 800530a:	4622      	mov	r2, r4
 800530c:	4629      	mov	r1, r5
 800530e:	4630      	mov	r0, r6
 8005310:	f7ff ffa1 	bl	8005256 <__sfputs_r>
 8005314:	3001      	adds	r0, #1
 8005316:	f000 80a9 	beq.w	800546c <_vfiprintf_r+0x1f0>
 800531a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800531c:	445a      	add	r2, fp
 800531e:	9209      	str	r2, [sp, #36]	; 0x24
 8005320:	f89a 3000 	ldrb.w	r3, [sl]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80a1 	beq.w	800546c <_vfiprintf_r+0x1f0>
 800532a:	2300      	movs	r3, #0
 800532c:	f04f 32ff 	mov.w	r2, #4294967295
 8005330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005334:	f10a 0a01 	add.w	sl, sl, #1
 8005338:	9304      	str	r3, [sp, #16]
 800533a:	9307      	str	r3, [sp, #28]
 800533c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005340:	931a      	str	r3, [sp, #104]	; 0x68
 8005342:	4654      	mov	r4, sl
 8005344:	2205      	movs	r2, #5
 8005346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800534a:	4854      	ldr	r0, [pc, #336]	; (800549c <_vfiprintf_r+0x220>)
 800534c:	f7fa ff68 	bl	8000220 <memchr>
 8005350:	9a04      	ldr	r2, [sp, #16]
 8005352:	b9d8      	cbnz	r0, 800538c <_vfiprintf_r+0x110>
 8005354:	06d1      	lsls	r1, r2, #27
 8005356:	bf44      	itt	mi
 8005358:	2320      	movmi	r3, #32
 800535a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800535e:	0713      	lsls	r3, r2, #28
 8005360:	bf44      	itt	mi
 8005362:	232b      	movmi	r3, #43	; 0x2b
 8005364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005368:	f89a 3000 	ldrb.w	r3, [sl]
 800536c:	2b2a      	cmp	r3, #42	; 0x2a
 800536e:	d015      	beq.n	800539c <_vfiprintf_r+0x120>
 8005370:	9a07      	ldr	r2, [sp, #28]
 8005372:	4654      	mov	r4, sl
 8005374:	2000      	movs	r0, #0
 8005376:	f04f 0c0a 	mov.w	ip, #10
 800537a:	4621      	mov	r1, r4
 800537c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005380:	3b30      	subs	r3, #48	; 0x30
 8005382:	2b09      	cmp	r3, #9
 8005384:	d94d      	bls.n	8005422 <_vfiprintf_r+0x1a6>
 8005386:	b1b0      	cbz	r0, 80053b6 <_vfiprintf_r+0x13a>
 8005388:	9207      	str	r2, [sp, #28]
 800538a:	e014      	b.n	80053b6 <_vfiprintf_r+0x13a>
 800538c:	eba0 0308 	sub.w	r3, r0, r8
 8005390:	fa09 f303 	lsl.w	r3, r9, r3
 8005394:	4313      	orrs	r3, r2
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	46a2      	mov	sl, r4
 800539a:	e7d2      	b.n	8005342 <_vfiprintf_r+0xc6>
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	1d19      	adds	r1, r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	9103      	str	r1, [sp, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bfbb      	ittet	lt
 80053a8:	425b      	neglt	r3, r3
 80053aa:	f042 0202 	orrlt.w	r2, r2, #2
 80053ae:	9307      	strge	r3, [sp, #28]
 80053b0:	9307      	strlt	r3, [sp, #28]
 80053b2:	bfb8      	it	lt
 80053b4:	9204      	strlt	r2, [sp, #16]
 80053b6:	7823      	ldrb	r3, [r4, #0]
 80053b8:	2b2e      	cmp	r3, #46	; 0x2e
 80053ba:	d10c      	bne.n	80053d6 <_vfiprintf_r+0x15a>
 80053bc:	7863      	ldrb	r3, [r4, #1]
 80053be:	2b2a      	cmp	r3, #42	; 0x2a
 80053c0:	d134      	bne.n	800542c <_vfiprintf_r+0x1b0>
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	9203      	str	r2, [sp, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bfb8      	it	lt
 80053ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80053d2:	3402      	adds	r4, #2
 80053d4:	9305      	str	r3, [sp, #20]
 80053d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80054ac <_vfiprintf_r+0x230>
 80053da:	7821      	ldrb	r1, [r4, #0]
 80053dc:	2203      	movs	r2, #3
 80053de:	4650      	mov	r0, sl
 80053e0:	f7fa ff1e 	bl	8000220 <memchr>
 80053e4:	b138      	cbz	r0, 80053f6 <_vfiprintf_r+0x17a>
 80053e6:	9b04      	ldr	r3, [sp, #16]
 80053e8:	eba0 000a 	sub.w	r0, r0, sl
 80053ec:	2240      	movs	r2, #64	; 0x40
 80053ee:	4082      	lsls	r2, r0
 80053f0:	4313      	orrs	r3, r2
 80053f2:	3401      	adds	r4, #1
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fa:	4829      	ldr	r0, [pc, #164]	; (80054a0 <_vfiprintf_r+0x224>)
 80053fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005400:	2206      	movs	r2, #6
 8005402:	f7fa ff0d 	bl	8000220 <memchr>
 8005406:	2800      	cmp	r0, #0
 8005408:	d03f      	beq.n	800548a <_vfiprintf_r+0x20e>
 800540a:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <_vfiprintf_r+0x228>)
 800540c:	bb1b      	cbnz	r3, 8005456 <_vfiprintf_r+0x1da>
 800540e:	9b03      	ldr	r3, [sp, #12]
 8005410:	3307      	adds	r3, #7
 8005412:	f023 0307 	bic.w	r3, r3, #7
 8005416:	3308      	adds	r3, #8
 8005418:	9303      	str	r3, [sp, #12]
 800541a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541c:	443b      	add	r3, r7
 800541e:	9309      	str	r3, [sp, #36]	; 0x24
 8005420:	e768      	b.n	80052f4 <_vfiprintf_r+0x78>
 8005422:	fb0c 3202 	mla	r2, ip, r2, r3
 8005426:	460c      	mov	r4, r1
 8005428:	2001      	movs	r0, #1
 800542a:	e7a6      	b.n	800537a <_vfiprintf_r+0xfe>
 800542c:	2300      	movs	r3, #0
 800542e:	3401      	adds	r4, #1
 8005430:	9305      	str	r3, [sp, #20]
 8005432:	4619      	mov	r1, r3
 8005434:	f04f 0c0a 	mov.w	ip, #10
 8005438:	4620      	mov	r0, r4
 800543a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800543e:	3a30      	subs	r2, #48	; 0x30
 8005440:	2a09      	cmp	r2, #9
 8005442:	d903      	bls.n	800544c <_vfiprintf_r+0x1d0>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0c6      	beq.n	80053d6 <_vfiprintf_r+0x15a>
 8005448:	9105      	str	r1, [sp, #20]
 800544a:	e7c4      	b.n	80053d6 <_vfiprintf_r+0x15a>
 800544c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005450:	4604      	mov	r4, r0
 8005452:	2301      	movs	r3, #1
 8005454:	e7f0      	b.n	8005438 <_vfiprintf_r+0x1bc>
 8005456:	ab03      	add	r3, sp, #12
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	462a      	mov	r2, r5
 800545c:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <_vfiprintf_r+0x22c>)
 800545e:	a904      	add	r1, sp, #16
 8005460:	4630      	mov	r0, r6
 8005462:	f3af 8000 	nop.w
 8005466:	4607      	mov	r7, r0
 8005468:	1c78      	adds	r0, r7, #1
 800546a:	d1d6      	bne.n	800541a <_vfiprintf_r+0x19e>
 800546c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800546e:	07d9      	lsls	r1, r3, #31
 8005470:	d405      	bmi.n	800547e <_vfiprintf_r+0x202>
 8005472:	89ab      	ldrh	r3, [r5, #12]
 8005474:	059a      	lsls	r2, r3, #22
 8005476:	d402      	bmi.n	800547e <_vfiprintf_r+0x202>
 8005478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547a:	f7ff fdd3 	bl	8005024 <__retarget_lock_release_recursive>
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	065b      	lsls	r3, r3, #25
 8005482:	f53f af1d 	bmi.w	80052c0 <_vfiprintf_r+0x44>
 8005486:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005488:	e71c      	b.n	80052c4 <_vfiprintf_r+0x48>
 800548a:	ab03      	add	r3, sp, #12
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	462a      	mov	r2, r5
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <_vfiprintf_r+0x22c>)
 8005492:	a904      	add	r1, sp, #16
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f879 	bl	800558c <_printf_i>
 800549a:	e7e4      	b.n	8005466 <_vfiprintf_r+0x1ea>
 800549c:	08005c2c 	.word	0x08005c2c
 80054a0:	08005c36 	.word	0x08005c36
 80054a4:	00000000 	.word	0x00000000
 80054a8:	08005257 	.word	0x08005257
 80054ac:	08005c32 	.word	0x08005c32

080054b0 <_printf_common>:
 80054b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	4616      	mov	r6, r2
 80054b6:	4699      	mov	r9, r3
 80054b8:	688a      	ldr	r2, [r1, #8]
 80054ba:	690b      	ldr	r3, [r1, #16]
 80054bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bfb8      	it	lt
 80054c4:	4613      	movlt	r3, r2
 80054c6:	6033      	str	r3, [r6, #0]
 80054c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054cc:	4607      	mov	r7, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	b10a      	cbz	r2, 80054d6 <_printf_common+0x26>
 80054d2:	3301      	adds	r3, #1
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	0699      	lsls	r1, r3, #26
 80054da:	bf42      	ittt	mi
 80054dc:	6833      	ldrmi	r3, [r6, #0]
 80054de:	3302      	addmi	r3, #2
 80054e0:	6033      	strmi	r3, [r6, #0]
 80054e2:	6825      	ldr	r5, [r4, #0]
 80054e4:	f015 0506 	ands.w	r5, r5, #6
 80054e8:	d106      	bne.n	80054f8 <_printf_common+0x48>
 80054ea:	f104 0a19 	add.w	sl, r4, #25
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	6832      	ldr	r2, [r6, #0]
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	42ab      	cmp	r3, r5
 80054f6:	dc26      	bgt.n	8005546 <_printf_common+0x96>
 80054f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054fc:	1e13      	subs	r3, r2, #0
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	bf18      	it	ne
 8005502:	2301      	movne	r3, #1
 8005504:	0692      	lsls	r2, r2, #26
 8005506:	d42b      	bmi.n	8005560 <_printf_common+0xb0>
 8005508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800550c:	4649      	mov	r1, r9
 800550e:	4638      	mov	r0, r7
 8005510:	47c0      	blx	r8
 8005512:	3001      	adds	r0, #1
 8005514:	d01e      	beq.n	8005554 <_printf_common+0xa4>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	6922      	ldr	r2, [r4, #16]
 800551a:	f003 0306 	and.w	r3, r3, #6
 800551e:	2b04      	cmp	r3, #4
 8005520:	bf02      	ittt	eq
 8005522:	68e5      	ldreq	r5, [r4, #12]
 8005524:	6833      	ldreq	r3, [r6, #0]
 8005526:	1aed      	subeq	r5, r5, r3
 8005528:	68a3      	ldr	r3, [r4, #8]
 800552a:	bf0c      	ite	eq
 800552c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005530:	2500      	movne	r5, #0
 8005532:	4293      	cmp	r3, r2
 8005534:	bfc4      	itt	gt
 8005536:	1a9b      	subgt	r3, r3, r2
 8005538:	18ed      	addgt	r5, r5, r3
 800553a:	2600      	movs	r6, #0
 800553c:	341a      	adds	r4, #26
 800553e:	42b5      	cmp	r5, r6
 8005540:	d11a      	bne.n	8005578 <_printf_common+0xc8>
 8005542:	2000      	movs	r0, #0
 8005544:	e008      	b.n	8005558 <_printf_common+0xa8>
 8005546:	2301      	movs	r3, #1
 8005548:	4652      	mov	r2, sl
 800554a:	4649      	mov	r1, r9
 800554c:	4638      	mov	r0, r7
 800554e:	47c0      	blx	r8
 8005550:	3001      	adds	r0, #1
 8005552:	d103      	bne.n	800555c <_printf_common+0xac>
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	3501      	adds	r5, #1
 800555e:	e7c6      	b.n	80054ee <_printf_common+0x3e>
 8005560:	18e1      	adds	r1, r4, r3
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	2030      	movs	r0, #48	; 0x30
 8005566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800556a:	4422      	add	r2, r4
 800556c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005574:	3302      	adds	r3, #2
 8005576:	e7c7      	b.n	8005508 <_printf_common+0x58>
 8005578:	2301      	movs	r3, #1
 800557a:	4622      	mov	r2, r4
 800557c:	4649      	mov	r1, r9
 800557e:	4638      	mov	r0, r7
 8005580:	47c0      	blx	r8
 8005582:	3001      	adds	r0, #1
 8005584:	d0e6      	beq.n	8005554 <_printf_common+0xa4>
 8005586:	3601      	adds	r6, #1
 8005588:	e7d9      	b.n	800553e <_printf_common+0x8e>
	...

0800558c <_printf_i>:
 800558c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	7e0f      	ldrb	r7, [r1, #24]
 8005592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005594:	2f78      	cmp	r7, #120	; 0x78
 8005596:	4691      	mov	r9, r2
 8005598:	4680      	mov	r8, r0
 800559a:	460c      	mov	r4, r1
 800559c:	469a      	mov	sl, r3
 800559e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055a2:	d807      	bhi.n	80055b4 <_printf_i+0x28>
 80055a4:	2f62      	cmp	r7, #98	; 0x62
 80055a6:	d80a      	bhi.n	80055be <_printf_i+0x32>
 80055a8:	2f00      	cmp	r7, #0
 80055aa:	f000 80d4 	beq.w	8005756 <_printf_i+0x1ca>
 80055ae:	2f58      	cmp	r7, #88	; 0x58
 80055b0:	f000 80c0 	beq.w	8005734 <_printf_i+0x1a8>
 80055b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055bc:	e03a      	b.n	8005634 <_printf_i+0xa8>
 80055be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055c2:	2b15      	cmp	r3, #21
 80055c4:	d8f6      	bhi.n	80055b4 <_printf_i+0x28>
 80055c6:	a101      	add	r1, pc, #4	; (adr r1, 80055cc <_printf_i+0x40>)
 80055c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055cc:	08005625 	.word	0x08005625
 80055d0:	08005639 	.word	0x08005639
 80055d4:	080055b5 	.word	0x080055b5
 80055d8:	080055b5 	.word	0x080055b5
 80055dc:	080055b5 	.word	0x080055b5
 80055e0:	080055b5 	.word	0x080055b5
 80055e4:	08005639 	.word	0x08005639
 80055e8:	080055b5 	.word	0x080055b5
 80055ec:	080055b5 	.word	0x080055b5
 80055f0:	080055b5 	.word	0x080055b5
 80055f4:	080055b5 	.word	0x080055b5
 80055f8:	0800573d 	.word	0x0800573d
 80055fc:	08005665 	.word	0x08005665
 8005600:	080056f7 	.word	0x080056f7
 8005604:	080055b5 	.word	0x080055b5
 8005608:	080055b5 	.word	0x080055b5
 800560c:	0800575f 	.word	0x0800575f
 8005610:	080055b5 	.word	0x080055b5
 8005614:	08005665 	.word	0x08005665
 8005618:	080055b5 	.word	0x080055b5
 800561c:	080055b5 	.word	0x080055b5
 8005620:	080056ff 	.word	0x080056ff
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	1d1a      	adds	r2, r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	602a      	str	r2, [r5, #0]
 800562c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005634:	2301      	movs	r3, #1
 8005636:	e09f      	b.n	8005778 <_printf_i+0x1ec>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	0607      	lsls	r7, r0, #24
 800563e:	f103 0104 	add.w	r1, r3, #4
 8005642:	6029      	str	r1, [r5, #0]
 8005644:	d501      	bpl.n	800564a <_printf_i+0xbe>
 8005646:	681e      	ldr	r6, [r3, #0]
 8005648:	e003      	b.n	8005652 <_printf_i+0xc6>
 800564a:	0646      	lsls	r6, r0, #25
 800564c:	d5fb      	bpl.n	8005646 <_printf_i+0xba>
 800564e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005652:	2e00      	cmp	r6, #0
 8005654:	da03      	bge.n	800565e <_printf_i+0xd2>
 8005656:	232d      	movs	r3, #45	; 0x2d
 8005658:	4276      	negs	r6, r6
 800565a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800565e:	485a      	ldr	r0, [pc, #360]	; (80057c8 <_printf_i+0x23c>)
 8005660:	230a      	movs	r3, #10
 8005662:	e012      	b.n	800568a <_printf_i+0xfe>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	6029      	str	r1, [r5, #0]
 800566c:	0605      	lsls	r5, r0, #24
 800566e:	d501      	bpl.n	8005674 <_printf_i+0xe8>
 8005670:	681e      	ldr	r6, [r3, #0]
 8005672:	e002      	b.n	800567a <_printf_i+0xee>
 8005674:	0641      	lsls	r1, r0, #25
 8005676:	d5fb      	bpl.n	8005670 <_printf_i+0xe4>
 8005678:	881e      	ldrh	r6, [r3, #0]
 800567a:	4853      	ldr	r0, [pc, #332]	; (80057c8 <_printf_i+0x23c>)
 800567c:	2f6f      	cmp	r7, #111	; 0x6f
 800567e:	bf0c      	ite	eq
 8005680:	2308      	moveq	r3, #8
 8005682:	230a      	movne	r3, #10
 8005684:	2100      	movs	r1, #0
 8005686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800568a:	6865      	ldr	r5, [r4, #4]
 800568c:	60a5      	str	r5, [r4, #8]
 800568e:	2d00      	cmp	r5, #0
 8005690:	bfa2      	ittt	ge
 8005692:	6821      	ldrge	r1, [r4, #0]
 8005694:	f021 0104 	bicge.w	r1, r1, #4
 8005698:	6021      	strge	r1, [r4, #0]
 800569a:	b90e      	cbnz	r6, 80056a0 <_printf_i+0x114>
 800569c:	2d00      	cmp	r5, #0
 800569e:	d04b      	beq.n	8005738 <_printf_i+0x1ac>
 80056a0:	4615      	mov	r5, r2
 80056a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056a6:	fb03 6711 	mls	r7, r3, r1, r6
 80056aa:	5dc7      	ldrb	r7, [r0, r7]
 80056ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056b0:	4637      	mov	r7, r6
 80056b2:	42bb      	cmp	r3, r7
 80056b4:	460e      	mov	r6, r1
 80056b6:	d9f4      	bls.n	80056a2 <_printf_i+0x116>
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d10b      	bne.n	80056d4 <_printf_i+0x148>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07de      	lsls	r6, r3, #31
 80056c0:	d508      	bpl.n	80056d4 <_printf_i+0x148>
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	6861      	ldr	r1, [r4, #4]
 80056c6:	4299      	cmp	r1, r3
 80056c8:	bfde      	ittt	le
 80056ca:	2330      	movle	r3, #48	; 0x30
 80056cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056d4:	1b52      	subs	r2, r2, r5
 80056d6:	6122      	str	r2, [r4, #16]
 80056d8:	f8cd a000 	str.w	sl, [sp]
 80056dc:	464b      	mov	r3, r9
 80056de:	aa03      	add	r2, sp, #12
 80056e0:	4621      	mov	r1, r4
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff fee4 	bl	80054b0 <_printf_common>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d14a      	bne.n	8005782 <_printf_i+0x1f6>
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	b004      	add	sp, #16
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f043 0320 	orr.w	r3, r3, #32
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	4833      	ldr	r0, [pc, #204]	; (80057cc <_printf_i+0x240>)
 8005700:	2778      	movs	r7, #120	; 0x78
 8005702:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	6829      	ldr	r1, [r5, #0]
 800570a:	061f      	lsls	r7, r3, #24
 800570c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005710:	d402      	bmi.n	8005718 <_printf_i+0x18c>
 8005712:	065f      	lsls	r7, r3, #25
 8005714:	bf48      	it	mi
 8005716:	b2b6      	uxthmi	r6, r6
 8005718:	07df      	lsls	r7, r3, #31
 800571a:	bf48      	it	mi
 800571c:	f043 0320 	orrmi.w	r3, r3, #32
 8005720:	6029      	str	r1, [r5, #0]
 8005722:	bf48      	it	mi
 8005724:	6023      	strmi	r3, [r4, #0]
 8005726:	b91e      	cbnz	r6, 8005730 <_printf_i+0x1a4>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	f023 0320 	bic.w	r3, r3, #32
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	2310      	movs	r3, #16
 8005732:	e7a7      	b.n	8005684 <_printf_i+0xf8>
 8005734:	4824      	ldr	r0, [pc, #144]	; (80057c8 <_printf_i+0x23c>)
 8005736:	e7e4      	b.n	8005702 <_printf_i+0x176>
 8005738:	4615      	mov	r5, r2
 800573a:	e7bd      	b.n	80056b8 <_printf_i+0x12c>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	6826      	ldr	r6, [r4, #0]
 8005740:	6961      	ldr	r1, [r4, #20]
 8005742:	1d18      	adds	r0, r3, #4
 8005744:	6028      	str	r0, [r5, #0]
 8005746:	0635      	lsls	r5, r6, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1c4>
 800574c:	6019      	str	r1, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1ca>
 8005750:	0670      	lsls	r0, r6, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1c0>
 8005754:	8019      	strh	r1, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4615      	mov	r5, r2
 800575c:	e7bc      	b.n	80056d8 <_printf_i+0x14c>
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	681d      	ldr	r5, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4628      	mov	r0, r5
 800576c:	f7fa fd58 	bl	8000220 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1ea>
 8005772:	1b40      	subs	r0, r0, r5
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	e7aa      	b.n	80056d8 <_printf_i+0x14c>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	462a      	mov	r2, r5
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ad      	beq.n	80056ec <_printf_i+0x160>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x232>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a6      	b.n	80056f0 <_printf_i+0x164>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09d      	beq.n	80056ec <_printf_i+0x160>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x216>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x20a>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x226>
 80057c6:	bf00      	nop
 80057c8:	08005c3d 	.word	0x08005c3d
 80057cc:	08005c4e 	.word	0x08005c4e

080057d0 <__sflush_r>:
 80057d0:	898a      	ldrh	r2, [r1, #12]
 80057d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	4605      	mov	r5, r0
 80057d8:	0710      	lsls	r0, r2, #28
 80057da:	460c      	mov	r4, r1
 80057dc:	d458      	bmi.n	8005890 <__sflush_r+0xc0>
 80057de:	684b      	ldr	r3, [r1, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc05      	bgt.n	80057f0 <__sflush_r+0x20>
 80057e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	dc02      	bgt.n	80057f0 <__sflush_r+0x20>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d0f9      	beq.n	80057ea <__sflush_r+0x1a>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057fc:	682f      	ldr	r7, [r5, #0]
 80057fe:	6a21      	ldr	r1, [r4, #32]
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	d032      	beq.n	800586a <__sflush_r+0x9a>
 8005804:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	075a      	lsls	r2, r3, #29
 800580a:	d505      	bpl.n	8005818 <__sflush_r+0x48>
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	1ac0      	subs	r0, r0, r3
 8005810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005812:	b10b      	cbz	r3, 8005818 <__sflush_r+0x48>
 8005814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005816:	1ac0      	subs	r0, r0, r3
 8005818:	2300      	movs	r3, #0
 800581a:	4602      	mov	r2, r0
 800581c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581e:	6a21      	ldr	r1, [r4, #32]
 8005820:	4628      	mov	r0, r5
 8005822:	47b0      	blx	r6
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	d106      	bne.n	8005838 <__sflush_r+0x68>
 800582a:	6829      	ldr	r1, [r5, #0]
 800582c:	291d      	cmp	r1, #29
 800582e:	d82b      	bhi.n	8005888 <__sflush_r+0xb8>
 8005830:	4a29      	ldr	r2, [pc, #164]	; (80058d8 <__sflush_r+0x108>)
 8005832:	410a      	asrs	r2, r1
 8005834:	07d6      	lsls	r6, r2, #31
 8005836:	d427      	bmi.n	8005888 <__sflush_r+0xb8>
 8005838:	2200      	movs	r2, #0
 800583a:	6062      	str	r2, [r4, #4]
 800583c:	04d9      	lsls	r1, r3, #19
 800583e:	6922      	ldr	r2, [r4, #16]
 8005840:	6022      	str	r2, [r4, #0]
 8005842:	d504      	bpl.n	800584e <__sflush_r+0x7e>
 8005844:	1c42      	adds	r2, r0, #1
 8005846:	d101      	bne.n	800584c <__sflush_r+0x7c>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b903      	cbnz	r3, 800584e <__sflush_r+0x7e>
 800584c:	6560      	str	r0, [r4, #84]	; 0x54
 800584e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005850:	602f      	str	r7, [r5, #0]
 8005852:	2900      	cmp	r1, #0
 8005854:	d0c9      	beq.n	80057ea <__sflush_r+0x1a>
 8005856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800585a:	4299      	cmp	r1, r3
 800585c:	d002      	beq.n	8005864 <__sflush_r+0x94>
 800585e:	4628      	mov	r0, r5
 8005860:	f7ff fbe2 	bl	8005028 <_free_r>
 8005864:	2000      	movs	r0, #0
 8005866:	6360      	str	r0, [r4, #52]	; 0x34
 8005868:	e7c0      	b.n	80057ec <__sflush_r+0x1c>
 800586a:	2301      	movs	r3, #1
 800586c:	4628      	mov	r0, r5
 800586e:	47b0      	blx	r6
 8005870:	1c41      	adds	r1, r0, #1
 8005872:	d1c8      	bne.n	8005806 <__sflush_r+0x36>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0c5      	beq.n	8005806 <__sflush_r+0x36>
 800587a:	2b1d      	cmp	r3, #29
 800587c:	d001      	beq.n	8005882 <__sflush_r+0xb2>
 800587e:	2b16      	cmp	r3, #22
 8005880:	d101      	bne.n	8005886 <__sflush_r+0xb6>
 8005882:	602f      	str	r7, [r5, #0]
 8005884:	e7b1      	b.n	80057ea <__sflush_r+0x1a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7ad      	b.n	80057ec <__sflush_r+0x1c>
 8005890:	690f      	ldr	r7, [r1, #16]
 8005892:	2f00      	cmp	r7, #0
 8005894:	d0a9      	beq.n	80057ea <__sflush_r+0x1a>
 8005896:	0793      	lsls	r3, r2, #30
 8005898:	680e      	ldr	r6, [r1, #0]
 800589a:	bf08      	it	eq
 800589c:	694b      	ldreq	r3, [r1, #20]
 800589e:	600f      	str	r7, [r1, #0]
 80058a0:	bf18      	it	ne
 80058a2:	2300      	movne	r3, #0
 80058a4:	eba6 0807 	sub.w	r8, r6, r7
 80058a8:	608b      	str	r3, [r1, #8]
 80058aa:	f1b8 0f00 	cmp.w	r8, #0
 80058ae:	dd9c      	ble.n	80057ea <__sflush_r+0x1a>
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b4:	4643      	mov	r3, r8
 80058b6:	463a      	mov	r2, r7
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b0      	blx	r6
 80058bc:	2800      	cmp	r0, #0
 80058be:	dc06      	bgt.n	80058ce <__sflush_r+0xfe>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e78e      	b.n	80057ec <__sflush_r+0x1c>
 80058ce:	4407      	add	r7, r0
 80058d0:	eba8 0800 	sub.w	r8, r8, r0
 80058d4:	e7e9      	b.n	80058aa <__sflush_r+0xda>
 80058d6:	bf00      	nop
 80058d8:	dfbffffe 	.word	0xdfbffffe

080058dc <_fflush_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	4605      	mov	r5, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	b913      	cbnz	r3, 80058ec <_fflush_r+0x10>
 80058e6:	2500      	movs	r5, #0
 80058e8:	4628      	mov	r0, r5
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	b118      	cbz	r0, 80058f6 <_fflush_r+0x1a>
 80058ee:	6a03      	ldr	r3, [r0, #32]
 80058f0:	b90b      	cbnz	r3, 80058f6 <_fflush_r+0x1a>
 80058f2:	f7ff f9db 	bl	8004cac <__sinit>
 80058f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f3      	beq.n	80058e6 <_fflush_r+0xa>
 80058fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005900:	07d0      	lsls	r0, r2, #31
 8005902:	d404      	bmi.n	800590e <_fflush_r+0x32>
 8005904:	0599      	lsls	r1, r3, #22
 8005906:	d402      	bmi.n	800590e <_fflush_r+0x32>
 8005908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590a:	f7ff fb8a 	bl	8005022 <__retarget_lock_acquire_recursive>
 800590e:	4628      	mov	r0, r5
 8005910:	4621      	mov	r1, r4
 8005912:	f7ff ff5d 	bl	80057d0 <__sflush_r>
 8005916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005918:	07da      	lsls	r2, r3, #31
 800591a:	4605      	mov	r5, r0
 800591c:	d4e4      	bmi.n	80058e8 <_fflush_r+0xc>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	059b      	lsls	r3, r3, #22
 8005922:	d4e1      	bmi.n	80058e8 <_fflush_r+0xc>
 8005924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005926:	f7ff fb7d 	bl	8005024 <__retarget_lock_release_recursive>
 800592a:	e7dd      	b.n	80058e8 <_fflush_r+0xc>

0800592c <__swhatbuf_r>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	460c      	mov	r4, r1
 8005930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005934:	2900      	cmp	r1, #0
 8005936:	b096      	sub	sp, #88	; 0x58
 8005938:	4615      	mov	r5, r2
 800593a:	461e      	mov	r6, r3
 800593c:	da0d      	bge.n	800595a <__swhatbuf_r+0x2e>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005944:	f04f 0100 	mov.w	r1, #0
 8005948:	bf0c      	ite	eq
 800594a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800594e:	2340      	movne	r3, #64	; 0x40
 8005950:	2000      	movs	r0, #0
 8005952:	6031      	str	r1, [r6, #0]
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	b016      	add	sp, #88	; 0x58
 8005958:	bd70      	pop	{r4, r5, r6, pc}
 800595a:	466a      	mov	r2, sp
 800595c:	f000 f8de 	bl	8005b1c <_fstat_r>
 8005960:	2800      	cmp	r0, #0
 8005962:	dbec      	blt.n	800593e <__swhatbuf_r+0x12>
 8005964:	9901      	ldr	r1, [sp, #4]
 8005966:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800596a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800596e:	4259      	negs	r1, r3
 8005970:	4159      	adcs	r1, r3
 8005972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005976:	e7eb      	b.n	8005950 <__swhatbuf_r+0x24>

08005978 <__smakebuf_r>:
 8005978:	898b      	ldrh	r3, [r1, #12]
 800597a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800597c:	079d      	lsls	r5, r3, #30
 800597e:	4606      	mov	r6, r0
 8005980:	460c      	mov	r4, r1
 8005982:	d507      	bpl.n	8005994 <__smakebuf_r+0x1c>
 8005984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	2301      	movs	r3, #1
 800598e:	6163      	str	r3, [r4, #20]
 8005990:	b002      	add	sp, #8
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	ab01      	add	r3, sp, #4
 8005996:	466a      	mov	r2, sp
 8005998:	f7ff ffc8 	bl	800592c <__swhatbuf_r>
 800599c:	9900      	ldr	r1, [sp, #0]
 800599e:	4605      	mov	r5, r0
 80059a0:	4630      	mov	r0, r6
 80059a2:	f7ff fbb5 	bl	8005110 <_malloc_r>
 80059a6:	b948      	cbnz	r0, 80059bc <__smakebuf_r+0x44>
 80059a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ac:	059a      	lsls	r2, r3, #22
 80059ae:	d4ef      	bmi.n	8005990 <__smakebuf_r+0x18>
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	e7e3      	b.n	8005984 <__smakebuf_r+0xc>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	6020      	str	r0, [r4, #0]
 80059c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	9b00      	ldr	r3, [sp, #0]
 80059c8:	6163      	str	r3, [r4, #20]
 80059ca:	9b01      	ldr	r3, [sp, #4]
 80059cc:	6120      	str	r0, [r4, #16]
 80059ce:	b15b      	cbz	r3, 80059e8 <__smakebuf_r+0x70>
 80059d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d4:	4630      	mov	r0, r6
 80059d6:	f000 f8b3 	bl	8005b40 <_isatty_r>
 80059da:	b128      	cbz	r0, 80059e8 <__smakebuf_r+0x70>
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	431d      	orrs	r5, r3
 80059ec:	81a5      	strh	r5, [r4, #12]
 80059ee:	e7cf      	b.n	8005990 <__smakebuf_r+0x18>

080059f0 <__swbuf_r>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	460e      	mov	r6, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	4605      	mov	r5, r0
 80059f8:	b118      	cbz	r0, 8005a02 <__swbuf_r+0x12>
 80059fa:	6a03      	ldr	r3, [r0, #32]
 80059fc:	b90b      	cbnz	r3, 8005a02 <__swbuf_r+0x12>
 80059fe:	f7ff f955 	bl	8004cac <__sinit>
 8005a02:	69a3      	ldr	r3, [r4, #24]
 8005a04:	60a3      	str	r3, [r4, #8]
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	071a      	lsls	r2, r3, #28
 8005a0a:	d525      	bpl.n	8005a58 <__swbuf_r+0x68>
 8005a0c:	6923      	ldr	r3, [r4, #16]
 8005a0e:	b31b      	cbz	r3, 8005a58 <__swbuf_r+0x68>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	6922      	ldr	r2, [r4, #16]
 8005a14:	1a98      	subs	r0, r3, r2
 8005a16:	6963      	ldr	r3, [r4, #20]
 8005a18:	b2f6      	uxtb	r6, r6
 8005a1a:	4283      	cmp	r3, r0
 8005a1c:	4637      	mov	r7, r6
 8005a1e:	dc04      	bgt.n	8005a2a <__swbuf_r+0x3a>
 8005a20:	4621      	mov	r1, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff ff5a 	bl	80058dc <_fflush_r>
 8005a28:	b9e0      	cbnz	r0, 8005a64 <__swbuf_r+0x74>
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	60a3      	str	r3, [r4, #8]
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	6022      	str	r2, [r4, #0]
 8005a36:	701e      	strb	r6, [r3, #0]
 8005a38:	6962      	ldr	r2, [r4, #20]
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d004      	beq.n	8005a4a <__swbuf_r+0x5a>
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	07db      	lsls	r3, r3, #31
 8005a44:	d506      	bpl.n	8005a54 <__swbuf_r+0x64>
 8005a46:	2e0a      	cmp	r6, #10
 8005a48:	d104      	bne.n	8005a54 <__swbuf_r+0x64>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff ff45 	bl	80058dc <_fflush_r>
 8005a52:	b938      	cbnz	r0, 8005a64 <__swbuf_r+0x74>
 8005a54:	4638      	mov	r0, r7
 8005a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f000 f806 	bl	8005a6c <__swsetup_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d0d5      	beq.n	8005a10 <__swbuf_r+0x20>
 8005a64:	f04f 37ff 	mov.w	r7, #4294967295
 8005a68:	e7f4      	b.n	8005a54 <__swbuf_r+0x64>
	...

08005a6c <__swsetup_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <__swsetup_r+0xac>)
 8005a70:	4605      	mov	r5, r0
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	460c      	mov	r4, r1
 8005a76:	b118      	cbz	r0, 8005a80 <__swsetup_r+0x14>
 8005a78:	6a03      	ldr	r3, [r0, #32]
 8005a7a:	b90b      	cbnz	r3, 8005a80 <__swsetup_r+0x14>
 8005a7c:	f7ff f916 	bl	8004cac <__sinit>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a86:	0718      	lsls	r0, r3, #28
 8005a88:	d422      	bmi.n	8005ad0 <__swsetup_r+0x64>
 8005a8a:	06d9      	lsls	r1, r3, #27
 8005a8c:	d407      	bmi.n	8005a9e <__swsetup_r+0x32>
 8005a8e:	2309      	movs	r3, #9
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e034      	b.n	8005b08 <__swsetup_r+0x9c>
 8005a9e:	0758      	lsls	r0, r3, #29
 8005aa0:	d512      	bpl.n	8005ac8 <__swsetup_r+0x5c>
 8005aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aa4:	b141      	cbz	r1, 8005ab8 <__swsetup_r+0x4c>
 8005aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	d002      	beq.n	8005ab4 <__swsetup_r+0x48>
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f7ff faba 	bl	8005028 <_free_r>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6363      	str	r3, [r4, #52]	; 0x34
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f043 0308 	orr.w	r3, r3, #8
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	b94b      	cbnz	r3, 8005ae8 <__swsetup_r+0x7c>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ade:	d003      	beq.n	8005ae8 <__swsetup_r+0x7c>
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7ff ff48 	bl	8005978 <__smakebuf_r>
 8005ae8:	89a0      	ldrh	r0, [r4, #12]
 8005aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aee:	f010 0301 	ands.w	r3, r0, #1
 8005af2:	d00a      	beq.n	8005b0a <__swsetup_r+0x9e>
 8005af4:	2300      	movs	r3, #0
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	6963      	ldr	r3, [r4, #20]
 8005afa:	425b      	negs	r3, r3
 8005afc:	61a3      	str	r3, [r4, #24]
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	b943      	cbnz	r3, 8005b14 <__swsetup_r+0xa8>
 8005b02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b06:	d1c4      	bne.n	8005a92 <__swsetup_r+0x26>
 8005b08:	bd38      	pop	{r3, r4, r5, pc}
 8005b0a:	0781      	lsls	r1, r0, #30
 8005b0c:	bf58      	it	pl
 8005b0e:	6963      	ldrpl	r3, [r4, #20]
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	e7f4      	b.n	8005afe <__swsetup_r+0x92>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e7f7      	b.n	8005b08 <__swsetup_r+0x9c>
 8005b18:	20000064 	.word	0x20000064

08005b1c <_fstat_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d07      	ldr	r5, [pc, #28]	; (8005b3c <_fstat_r+0x20>)
 8005b20:	2300      	movs	r3, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	f7fa ff36 	bl	800099a <_fstat>
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	d102      	bne.n	8005b38 <_fstat_r+0x1c>
 8005b32:	682b      	ldr	r3, [r5, #0]
 8005b34:	b103      	cbz	r3, 8005b38 <_fstat_r+0x1c>
 8005b36:	6023      	str	r3, [r4, #0]
 8005b38:	bd38      	pop	{r3, r4, r5, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000034c 	.word	0x2000034c

08005b40 <_isatty_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d06      	ldr	r5, [pc, #24]	; (8005b5c <_isatty_r+0x1c>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f7fa ff35 	bl	80009ba <_isatty>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_isatty_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_isatty_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	2000034c 	.word	0x2000034c

08005b60 <_sbrk_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d06      	ldr	r5, [pc, #24]	; (8005b7c <_sbrk_r+0x1c>)
 8005b64:	2300      	movs	r3, #0
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	f7fa ff3e 	bl	80009ec <_sbrk>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_sbrk_r+0x1a>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_sbrk_r+0x1a>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	2000034c 	.word	0x2000034c

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
